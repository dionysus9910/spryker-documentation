<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="15253" MadCap:lastWidth="1768" style="">
    <head><title>Frontend Translations</title>
        <link href="../Resources/TableStyles/PatternedRows.css" rel="stylesheet" MadCap:stylesheetType="table" />
    </head>
    <body>
        <h1>Frontend Translations</h1>
        <p MadCap:conditions="General.Hidden Comment">Used to be: http://spryker.github.io/development-guide/yves/frontend-translations/</p>
        <p>Textual translations are handled by the Glossary-module. You can use the <var>GlossaryFacade </var>in Zed to add entries to Glossary (or you can use the Zed UI).

</p><pre><code class="language-PHP line-numbers">&lt;?php
class GlossaryFacade extends AbstractFacade
{
    public function createTranslation($keyName, LocaleTransfer $locale, $value, $isActive = true){ ... }
 
    // there are several other methods in this facade
}
</code></pre>
        <p>An entry in the glossary has a key and translations per locale, like this:

</p><pre><code class="language-PHP line-numbers">&lt;?php
['say.hello' =&gt; [
    'de_DE =&gt; 'Hallo', 
    'en_US' =&gt; 'Hello']
]</code></pre>
        <p>&#160;</p>
        <p>Before it can be used in Yves, this data must be exported to the KV-storage. You can use the <a href="http://redisdesktop.com/" target="_blank">Redis Desktop Manager</a> to have a look inside and see the values.

 

</p>
        <p>
            <img src="../Resources/Images/glossary-kv-and-db.png" title="Glossary KV and DB" alt="Glossary KV and DB" class="Thumbnail" />
        </p>
        <p MadCap:conditions="General.Image_Source">Source: https://www.gliffy.com/go/html5/9959279</p>
        <h2>Usage in Twig templates
</h2>
        <p>The translation function is provided by <a href="http://symfony.com/doc/current/book/translation.html" target="_blank">Symfony translation component</a>.
</p>
        <h3>Simple translation
</h3>
        <p>You can use the key in a Twig template in Yves:

</p><pre><code class="language-PHP line-numbers">{{ 'say.hello' | trans }}</code></pre>
        <p>Sometimes you need to list all keys which are used in a template. Currently there is no good solution, but this regex will do the job pretty good:</p><pre><code class="language-PHP line-numbers">{{.?"(.*)".?\|.?trans.?}}</code></pre>
        <h3>Translation with placeholders
</h3>
        <p>When you have a dynamic part in the translation, you can use placeholders.

</p>
        <p><b>Entry in glossary</b>:
</p>
        <table style="width: 100%;mc-table-style: url('../Resources/TableStyles/PatternedRows.css');" class="TableStyle-PatternedRows" cellspacing="0">
            <col class="TableStyle-PatternedRows-Column-Regular" />
            <col class="TableStyle-PatternedRows-Column-Regular" />
            <thead>
                <tr class="TableStyle-PatternedRows-Head-Header1">
                    <th class="TableStyle-PatternedRows-HeadE-Regular-Header1">Key	</th>
                    <th class="TableStyle-PatternedRows-HeadD-Regular-Header1">Value
</th>
                </tr>
            </thead>
            <tbody>
                <tr class="TableStyle-PatternedRows-Body-LightRows">
                    <td class="TableStyle-PatternedRows-BodyB-Regular-LightRows">
                        <p>“my.name”</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyA-Regular-LightRows">
                        <p>	“My name is %name%”
</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p>
Now replace it with a value in the Twig template:

</p><pre><code class="language-PHP line-numbers">{{ "auth.my.name" | trans({'%name%' : 'Fabian'}, "app") }}</code></pre>
        <p>This will show “My name is Fabian”

</p>
        <h2>Translation with ajax requests
</h2>
        <p>To use an AJAX request, you need to send translated content directly from the controller. In Yves you can locate the translator and use it directly:

</p><pre><code class="language-PHP line-numbers">&lt;?php

public function ajaxAction()
{
    $app = $this-&gt;getLocator()-&gt;application()-&gt;pluginPimple()-&gt;getApplication();   
    $text = $app-&gt;trans('what.ever');
    return $this-&gt;jsonResponse['text' =&gt; $text];
}
</code></pre>
    </body>
</html>