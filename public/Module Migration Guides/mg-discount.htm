<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="" MadCap:conditions="General.Demoshop,Spryker.B2C,Spryker.B2B">
    <head><title>Migration Guide - Discount | Spryker</title>
        <meta name="description" content="Discount Module Migration guide contains instructions on how to migrate the Discoiunt module to major versions in Spryker Commerce OS." />
    </head>
    <body>
        <h1>Migration Guide - Discount <img src="../Resources/Images/shoptype/B2B_Shop.png" /> <img src="../Resources/Images/shoptype/B2C_Shop.png" /> </h1>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>
                    <div class="drop-anchor">Upgrad<MadCap:annotation MadCap:createDate="2018-11-23T18:15:55.6004901+02:00" MadCap:creator="karasyova" MadCap:initials="KA" MadCap:comment="February release\r\n" MadCap:editor="karasyova" MadCap:editDate="2018-11-23T18:16:00.9556574+02:00">ing from Version 6.* t</MadCap:annotation>o Version 7.*</div>
                </MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>The seventh version of the Discount module introduces the Minimum Quantity of Items value for discounts. This functionality allows to define discounts that will be applied only when the number of items which satisfies the conditions, is equal to or greater than the defined amount. To achieve this, we have added a new database field: <var>spy_discount.minimum_item_amount</var>.</p>
                <p>To upgrade the Discount module with this change, run</p><pre><code class="language-PHP line-numbers">console propel:install</code></pre>
                <p>This will generate a propel migration file as well update the database and the model for the Minimum Quantity of Items functionality to take effect.</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>
                    <div class="drop-anchor">Upgrading from Version 5.* to Version 6.*</div>
                </MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <ol>
                    <li>Update/install <var>spryker/discount</var> to at least <var>6.0.0</var> version.</li>
                    <li>Run <var>vendor/bin/console transfer:generate</var> to generate the new transfer objects.</li>
                    <li>Install the new database tables by running <var>vendor/bin/console propel:diff</var>. Propel should generate a migration file with the changes.</li>
                    <li>Run <var>vendor/bin/console propel:migrate</var> to apply the database changes.</li>
                    <li>Generate ORM models by running <var>vendor/bin/console propel:model:build</var>.
                    <p>
                        This command will generate some new classes in your project under <var>\Orm\Zed\Discount\Persistence</var> namespace.
                        It is important to make sure that they extend the base classes from the Spryker core, e.g.:
                    </p><ul><li><var>\Orm\Zed\Discount\Persistence\SpyDiscountStore</var> extends <var>\Spryker\Zed\Discount\Persistence\Propel\AbstractSpyDiscountStore</var></li><li><var>\Orm\Zed\Discount\Persistence\SpyDiscountStoreQuery</var> extends <var>\Spryker\Zed\Discount\Persistence\Propel\AbstractSpyDiscountStoreQuery</var></li></ul></li>
                    <li>
                        <p>
                        Each row in the newly created <var>spy_discount_store</var> table represents a connection between a Store and a Discount, meaning that a specific discount is available in that specific Store.
                    </p>
                        <p>
                        To migrate the <var>spy_discount_store</var> table, create connections between your discounts and the desired stores.
                        <MadCap:dropDown><MadCap:dropDownHead><MadCap:dropDownHotspot>Example migration for multiple (or single) stores</MadCap:dropDownHotspot></MadCap:dropDownHead><MadCap:dropDownBody>
                                PostgreSQL:
                               <pre><code class="language-PHP line-numbers"> INSERT INTO spy_discount_store (id_discount_store, fk_discount, fk_store)
                                SELECT nextval('id_discount_store_pk_seq'), id_discount, id_store FROM spy_discount, spy_store;</code></pre>

                                MySQL:
                                <pre><code class="language-PHP line-numbers">INSERT INTO spy_discount_store (fk_discount, fk_store)
                                SELECT id_discount, id_store FROM spy_discount, spy_store;</code></pre></MadCap:dropDownBody></MadCap:dropDown></p>
                    </li>
                    <li>
                    To populate current Store information into the Quote transfer object, the <var>StoreQuoteTransferExpanderPlugin</var> has to be provided through the <var>QuoteDependencyProvider::getQuoteTransferExpanderPlugins()</var>.
                    <MadCap:dropDown><MadCap:dropDownHead><MadCap:dropDownHotspot>Example plugin registration</MadCap:dropDownHotspot></MadCap:dropDownHead><MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Client\Quote;

use Spryker\Client\Quote\QuoteDependencyProvider as SprykerQuoteDependencyProvider;
use Spryker\Client\Store\Plugin\StoreQuoteTransferExpanderPlugin;

class QuoteDependencyProvider extends SprykerQuoteDependencyProvider
{
    /**
     * @param \Spryker\Client\Kernel\Container $container
     *
     * @return \Spryker\Client\Quote\Dependency\Plugin\QuoteTransferExpanderPluginInterface[]
     */
    protected function getQuoteTransferExpanderPlugins($container)
    {
        return [
            new StoreQuoteTransferExpanderPlugin(),
        ];
    }
}
                            </code></pre></MadCap:dropDownBody></MadCap:dropDown></li>
                    <li>
                    To allow Discount in Administration Interface to handle multi-store concept (even if you are using single-store) a FormTypeInterface has to be provided through <var>DiscountDependencyProvider::getStoreRelationFormTypePlugin()</var> to handle store relation.
                    You can use the already implemented <var>StoreRelationToggleFormTypePlugin</var>.
                    <MadCap:dropDown><MadCap:dropDownHead><MadCap:dropDownHotspot>Example plugin registration</MadCap:dropDownHotspot></MadCap:dropDownHead><MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Zed\Discount;

use Spryker\Zed\Discount\DiscountDependencyProvider as SprykerDiscountDependencyProvider;
use Spryker\Zed\Store\Communication\Plugin\Form\StoreRelationToggleFormTypePlugin;

class DiscountDependencyProvider extends SprykerDiscountDependencyProvider
{
    /**
     * @return \Spryker\Zed\Kernel\Communication\Form\FormTypeInterface
     */
    protected function getStoreRelationFormTypePlugin()
    {
        return new StoreRelationToggleFormTypePlugin();
    }
}
                            </code></pre></MadCap:dropDownBody></MadCap:dropDown></li>
                    <li>
                    A bug was fixed in our <a href="https://github.com/spryker/demoshop">Demoshop implementation</a> when displaying promotion items using <var>DiscountPromotion/Theme/default/discount-promotion/item-list.twig</var>.
                    In case you used it, please amend your implementation also to check the same variable for number of elements and iterating through.
                    <MadCap:dropDown><MadCap:dropDownHead><MadCap:dropDownHotspot>Modified version</MadCap:dropDownHotspot></MadCap:dropDownHead><MadCap:dropDownBody><pre><code class="language-PHP line-numbers">
{% if promotionStorageProducts|length &gt; 0 %}
    &lt;div class="small-12 columns"&gt;
        &lt;h1&gt; {{ 'cart.promotion.items' | trans }}&lt;/h1&gt;
        {% for promotionStorageProduct in promotionStorageProducts %}
            {% include '@DiscountPromotion/discount-promotion/item.twig' %}
        {% endfor %}
    &lt;/div&gt;
{% endif %}
                            </code></pre></MadCap:dropDownBody></MadCap:dropDown></li>
                    <li>
                    The following classes' constructor dependencies were altered, please check if you have customized any of them or their constructor method:
                    <ul><li>Calculator/Discount</li><li>DiscountConfigurationHydrate</li><li>DiscountPersist</li><li>GeneralForm</li><li>DiscountsTable</li></ul></li>
                    <li>
                    The following methods were enhanced, please check if you have customized any of them:
                    <ul><li><var>Calculator/Discount::retrieveActiveCartAndVoucherDiscounts()</var></li><li><var>DiscountFormDataProvider::createDiscountGeneralTransferDefaults()</var></li><li><var>DiscountConfigurationHydrate::getByIdDiscount()</var></li><li><var>DiscountCommunicationFactory::getVoucherForm()</var></li></ul></li>
                    <li>
                    The following methods/classes were removed or renamed, please check if you have customized any of them:
                    <ul><li><var>DiscountConfigurationHydrate::setDiscountConfigurationExpanderPlugins()</var></li><li><var>DiscountPersist::setDiscountPostCreatePlugins()</var></li><li><var>DiscountPersist::setDiscountPostUpdatePlugins()</var></li><li><var>DiscountQueryContainerInterface::queryDiscountsBySpecifiedVouchers()</var></li><li><var>DiscountQueryContainerInterface::queryActiveCartRules()</var></li><li><var>Business/Persistence/DiscountOrderSaver</var></li><li><var>Business/Persistence/DiscountOrderSaverInterface</var></li><li><var>Communication/Plugin/Sales/DiscountOrderSavePlugin</var></li><li><var>DiscountFacadeInterface::saveOrderDiscounts()</var></li><li><var>DiscountFacade::saveOrderDiscounts()</var></li><li><var>DiscountCommunicationFactory::createGeneralFormType()</var></li><li><var>DiscountCommunicationFactory::createCalculatorFormType()</var></li><li><var>DiscountCommunicationFactory::createConditionsFormType()</var></li><li><var>DiscountCommunicationFactory::createVoucherFormType()</var></li><li><var>DiscountCommunicationFactory::createVoucherForm()</var></li><li><var>CalculatorForm::getName()</var></li><li><var>ConditionsForm::getName()</var></li><li><var>DiscountForm::getName()</var></li><li><var>GeneralForm::getName()</var></li><li><var>VoucherForm::getName()</var></li><li><var>DiscountCommunicationFactory::createDiscountForm()</var></li><li><var>DiscountCommunicationFactory::createVoucherForm()</var></li></ul></li>
                    <li>
                        <p>You can find additional information on <a href="https://github.com/spryker/discount/releases">Discount module release page</a> or by checking out our <a href="https://github.com/spryker/demoshop">Demoshop implementation</a> for implementation example and idea.</p>
                    </li>
                    <li>
                    You are ready now to use Discount Zed Admin UI and manage discounts per Store.
                </li>
                </ol>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>
                    <div class="drop-anchor">Upgrading from Version 4.* to Version 5.*</div>
                </MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>
            In discount module version 5 we have introduced multicurrency support for fixed discount calculation.

            This update also includes:</p>
                <ul>
                    <li>
              Support for net/gross amounts.
              </li>
                    <li>Currency decision rule -  to filter discounts by currency.</li>
                    <li>
              PriceMode decision rule - to filter discounts by price mode(net/gross).
</li>
                    <li>              Database schema changes to store discount amounts and fk_store for later multi store support.
              </li>
                    <li>Sales table changed deprecated collumn type from decimal to int as discount amounts were already stored as integers.</li>
                    <li>
              CalculatorInterface renamed to CalculatorTypeInterface, concrete calculators Fixed and Percentage rename to FixedType and PercentageType accordingly.

            </li>
                </ul>
                <ol>
                    <li>Run 
				<pre><code class="language-php line-numbers">composer update spryker/discount spryker/currency spryker/store spryker/money spryker/calculation spryker/cart spryker/kernel.</code></pre>
						 Install the new module to be able to use the new currency plugin. 
				<pre><code class="language-php line-numbers">composer require spryker/cart-currency-connector</code></pre></li>
                    <li>Run schema migration

            <pre><code class="language-PHP line-numbers">
              CREATE SEQUENCE "spy_discount_amount_pk_seq";

              CREATE TABLE "spy_discount_amount"
              (
                  "id_discount_amount" INTEGER NOT NULL,
                  "fk_currency" INTEGER NOT NULL,
                  "fk_discount" INTEGER NOT NULL,
                  "gross_amount" INTEGER,
                  "net_amount" INTEGER,
                  PRIMARY KEY ("id_discount_amount")
              );

             CREATE UNIQUE INDEX "spy_discount_amount-unique-currency-discount" ON "spy_discount_amount" ("fk_currency","fk_discount");

              ALTER TABLE "spy_discount" ADD CONSTRAINT "spy_discount-fk_store"
                FOREIGN KEY ("fk_store")
                REFERENCES "spy_store" ("id_store");

                ALTER TABLE "spy_sales_discount" ALTER COLUMN "amount" TYPE INTEGER;

            </code></pre></li>
                    <li>Then run console commands

            <pre><code class="language-php line-numbers">vendor/bin/console propel:model:build</code></pre><br /><pre><code class="language-php line-numbers">vendor/bin/console transfer:generate</code></pre><br /></li>
                    <li>We have prepared a console command, discount migration script, to migrate old discount amounts to a new structure.
               Place it in your project discount module and include in Console module dependency provider.
This console command will move all discount amount with fixed calculator plugin to a new discount amount tables. It won't delete old values.</li>
                    <li>Register a new currency plugin to reload cart items when currency is changed.
               Take <var>\Spryker\Yves\CartCurrencyConnector\CurrencyChange\RebuildCartOnCurrencyChangePlugin</var>
               and place it to <var>\Pyz\Yves\Currency\CurrencyDependencyProvider::getCurrencyPostChangePlugins</var> plugin stack.
               This way we make sure that when currency in Yves is changed, we have updated product prices and discounts.</li>
                </ol>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>Discount Amounts Migration Console Command</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php
 
/**
           
 * Copyright © 2017-present Spryker Systems GmbH. All rights reserved.
 * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
 */

namespace Pyz\Zed\Discount\Communication\Console;

use Orm\Zed\Currency\Persistence\SpyCurrencyQuery;
use Orm\Zed\Discount\Persistence\SpyDiscountAmount;
use Orm\Zed\Discount\Persistence\SpyDiscountQuery;
use Spryker\Shared\Kernel\Store;
use Spryker\Zed\Discount\DiscountDependencyProvider;
use Spryker\Zed\Kernel\Communication\Console\Console;
use Spryker\Zed\PropelOrm\Business\Runtime\ActiveQuery\Criteria;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Question\ConfirmationQuestion;

class MigrateDiscountsConsole extends Console
{
    const COMMAND_NAME = 'discount:migrate';
    const COMMAND_DESCRIPTION = 'Console command to migrate discount amounts to multi currency implementation.';

    /**
     * @return void
     */
    protected function configure()
    {
        $this-&gt;setName(static::COMMAND_NAME);
        $this-&gt;setDescription(static::COMMAND_DESCRIPTION);

        parent::configure();
    }


    /**
     * @param \Symfony\Component\Console\Input\InputInterface $input
     * @param \Symfony\Component\Console\Output\OutputInterface $output
     *
     * @return void
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $discounts = SpyDiscountQuery::create()
            -&gt;filterByCalculatorPlugin(DiscountDependencyProvider::PLUGIN_CALCULATOR_FIXED)
            -&gt;useDiscountAmountQuery(null, Criteria::LEFT_JOIN)
                -&gt;filterByIdDiscountAmount(null,Criteria::EQUAL)
            -&gt;endUse()
            -&gt;find();

        if (count($discounts) === 0) {
            $output-&gt;writeln('There are no discounts to migrate.');
            return;
        }

        $helper = $this-&gt;getHelper('question');
        $question = new ConfirmationQuestion(
            sprintf('Migrate %s discounts? (y|n)', count($discounts)),
            false
        );

        if (!$helper-&gt;ask($input, $output, $question)) {
            $output-&gt;writeln('Aborted.');
            return;
        }

        $currencyIsoCode = Store::getInstance()-&gt;getCurrencyIsoCode();

        $currencyEntity = SpyCurrencyQuery::create()
            -&gt;filterByCode($currencyIsoCode)
            -&gt;findOne();

        foreach ($discounts as $discountEntity) {
            $amount = $discountEntity-&gt;getAmount();

            $discountAmountEntity = new SpyDiscountAmount();
            $discountAmountEntity-&gt;setGrossAmount($amount);
            $discountAmountEntity-&gt;setFkDiscount($discountEntity-&gt;getIdDiscount());
            $discountAmountEntity-&gt;setFkCurrency($currencyEntity-&gt;getIdCurrency());
            $discountAmountEntity-&gt;save();

            $output-&gt;writeln(sprintf('Discount with id %s updated.', $discountEntity-&gt;getIdDiscount()));
        }

        $output-&gt;writeln('done.');
    }

}
?&gt;
			</code></pre>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p>&#160;</p>
        <p><b>See also:</b>
        </p>
        <ul>
            <li><a href="discount.htm">Get a general idea about Discount</a>
            </li>
            <li><a href="discount-applying.htm">Learn how to apply a discount</a>
            </li>
            <li><a href="discount-excl-nonexcl.htm">Get acquainted with the types of discounts</a>
            </li>
        </ul>
        <p>&#160;</p>
        <p><i>Last review date: Nov. 23th, 2018</i>
            <MadCap:conditionalText MadCap:conditions="General.Hidden Comment">by Helen Kravchenko, Oksana Karasyova</MadCap:conditionalText>
        </p>
    </body>
</html>