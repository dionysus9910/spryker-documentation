<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="" MadCap:conditions="General.Demoshop,Spryker.DemoShop">
    <head>
    </head>
    <body>
        <h1>Migration Guide - Touch <img src="../Resources/Images/shoptype/B2B_Shop.png" /> <img src="../Resources/Images/shoptype/B2C_Shop.png" /> <img src="../Resources/Images/shoptype/Demoshop.png" /> </h1>
        <h2>Upgrading from Version 3.* to Version 4.*</h2>
        <ol>
            <li>Update/install <var>spryker/touch</var> to at least <var>4.0.0</var> version.</li>
            <li>Install the new database columns by running <var>vendor/bin/console propel:diff</var>. Propel should generate a migration file with the changes.</li>
            <li>Run <var>vendor/bin/console propel:migrate</var> to apply the database changes.</li>
            <li>Generate ORM models by running <var>vendor/bin/console propel:model:build</var>.
                <p>
                    This command will update <var>spy_touch_storage</var>, and <var>spy_touch_search</var> classes to have the newly created <var>fk_store</var> columns and their relations.
                </p></li>
            <li>
                <p>Populate <var>fk_store</var> records respectively to <var>spy_touch_storage.key</var>, and <var>spy_touch_search.key</var>.</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot><div class="drop-anchor">Example migrations</div></MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <ol>
                            <li>
                                If you have a single Store, <var>spy_store</var> contains 1 row which represents your active store. Use its <var>spy_store.id_store</var> value to update touch records.
                                In our current example the store ID is considered: 1.
                                <pre xml:space="preserve"><code class="language-PHP line-numbers">
                                    UPDATE spy_touch_storage SET fk_store = 1;
                                    UPDATE spy_touch_search SET fk_store = 1;
                                </code></pre></li>
                            <li>
                                If you have multiple Stores already, you will need to create a query which updates the <var>fk_store</var> values based on the records' key (if it contains the store information).
                                Example update when the key has the following structure: {STORE_NAME}.{LOCALE_NAME}.{ENTITY_NAME}.{ENTITY_ID}.
                                <pre><code class="language-PHP line-numbers">
MySql:
      UPDATE spy_touch_storage JOIN spy_store SET spy_touch_storage.fk_store = spy_store.id_store
      WHERE LOWER(spy_store.name) = LOWER(SUBSTR(`key`, 1, LOCATE(`key`, '.') - 1));

      UPDATE spy_touch_search JOIN spy_store SET spy_touch_search.fk_store = spy_store.id_store
      WHERE LOWER(spy_store.name) = LOWER(SUBSTR(`key`, 1, LOCATE(`key`, '.') - 1));

PostgreSql:
      UPDATE spy_touch_storage SET fk_store = spy_store.id_store
      FROM spy_store WHERE LOWER(spy_store.name) = LOWER(SUBSTR(key, 1, STRPOS(key, '.') - 1));

      UPDATE spy_touch_search SET fk_store = spy_store.id_store
      FROM spy_store WHERE LOWER(spy_store.name) = LOWER(SUBSTR(key, 1, STRPOS(key, '.') - 1));
                                </code></pre></li>
                        </ol>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
            </li>
            <li>
                The following deprecated methods were removed, please check your code if you have custom calls or dependencies:
                <ul><li><var>TouchFacadeInterface::bulkTouchActive()</var></li><li><var>TouchFacadeInterface::bulkTouchInactive()</var></li><li><var>TouchFacadeInterface::bulkTouchDeleted()</var></li><li><var>TouchQueryContainerInterface::queryTouchEntries()</var></li><li><var>TouchInterface::bulkUpdateTouchRecords()</var></li></ul>
                You can find additional details on <a href="https://github.com/spryker/touch/releases">Touch module release page</a>.
            </li>
            <li>
                The following methods have internal changes, please check if you have customized them:
                <ul><li><var>TouchQueryContainer::queryTouchDeleteStorageAndSearch()</var></li><li><var>TouchRecord::removeTouchEntriesMarkedAsDeleted()</var></li></ul>
                You can find additional details on <a href="https://github.com/spryker/touch/releases">Touch module release page</a>.
            </li>
            <li>Note: Module requires PHP 7.1 from now on.</li>
            <li>After these steps, your <var>Touch</var> module supports multi-store entities.</li>
        </ol>
        <p>&#160;</p>
        <p><b>See also:</b>
        </p>
        <ul>
            <li>Learn more about Touch</li>
        </ul>
        <p>&#160;</p>
        <p><i>Last review date: Jan. 31st, 2018 </i>
            <MadCap:conditionalText MadCap:conditions="General.Hidden Comment"><i>by Karoly Gerner</i>
            </MadCap:conditionalText>
        </p>
    </body>
</html>