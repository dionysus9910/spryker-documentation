<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="">
    <head>
    </head>
    <body>
        <h1>Query Container</h1>
        <p MadCap:conditions="General.Hidden Comment">Used to be: http://spryker.github.io/development-guide/zed/persistence-layer/query-container/</p>
        <p>A query container holds all the database queries of the current module.</p>
        <p>Each module has exactly one query container, which also acts as an entry point to the persistence layer. Internally it uses <a href="query_objects.htm" target="_blank">query objects</a> and returns unterminated queries.</p>
        <p>As you can see in the example below, the query container consists of <var>query-methods</var> which gets <a href="query_objects.htm" target="_blank">query objects</a> from the <a href="../../Resources and Developer Tools/factory.htm" target="_blank">factory</a>, adds some filters or joins and returns the unterminated query object. </p>
        <p>Unterminated means you don’t execute the query with <var>find()</var>, <var>findOne()</var> or <var>count()</var>.</p><pre><code class="language-PHP line-numbers">use Spryker\Zed\Kernel\Persistence\AbstractQueryContainer;

/**
 * @method \Pyz\Zed\MyBundle\Persistence\MyBundlePersistenceFactory getFactory()
 */
class MyBundleQueryContainer extends AbstractQueryContainer implements MyBundleQueryContainerInterface
{
    public function queryTemplateByPath($path)
    {
        $query = $this-&gt;getFactory()-&gt;createTemplateQuery();
        $query-&gt;filterByTemplatePath($path);

        return $query;
    }
}</code></pre>
        <hr />
        <h2>How to Use a Query Container</h2>
        <p>The query container of the current unterminated query is available via <var>$this-&gt;getQueryContainer()</var> in the <a href="../../Resources and Developer Tools/factory.htm">factory</a> of the communication and the business layer and can be injected into any model.</p>
        <p>
            <img src="../../Resources/Images/query-container-via-factory.png" title="Query container via factory" alt="Query container via factory" class="Thumbnail" />
        </p>
        <p MadCap:conditions="General.Image_Source">https://www.gliffy.com/go/html5/9809427</p>
        <h3>Execute the Query</h3>
        <p>You can adjust the query itself, but you should avoid to add more filters or joins because this is a responsibility of the query container only.</p><pre><code class="language-PHP line-numbers">&lt;?php
$templateQuery = $this-&gt;queryTemplateByPath($path);
$templateQuery-&gt;limit(100);
$templateQuery-&gt;offset(10);
$templateCollection = $templateQuery-&gt;find(); // or findOne()</code></pre>
        <p>You can also change the output format, e.g. to array instead of collection:</p><pre><code class="language-PHP line-numbers">&lt;?php
$formatter = new SimpleArrayFormatter();
$templateQuery-&gt;setFormatter();</code></pre>
        <hr />
        <h2>Implementing a Query Container</h2>
        <h3>Snippet to Create a New Query Container</h3>
        <p>To create a new query container you can copy and paste the following snippet and replace <var>Mymodule </var>with your module name.</p><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Zed\MyBundle\Persistence;

use Spryker\Zed\Kernel\Persistence\AbstractQueryContainer;

/**
 * @method MyBundlePersistenceFactory getFactory()
 */
class MyBundleQueryContainer extends AbstractQueryContainer implements MyBundleQueryContainerInterface
{
}</code></pre>
        <h3>Conventions for Query Containers</h3>
        <p>There are some conventions which should be followed here:</p>
        <ul>
            <li class="bullet_list">All methods have the prefix <var>query*()</var>.</li>
            <li class="bullet_list">All public methods are exposed in the related interface (e.g. <var>MyBundleQueryContainerInterface</var>).</li>
            <li class="bullet_list">Queries are returned unterminated, so that the user can add restrictions (limit, offset) and can choose how to terminate (<var>count()</var>, <var>find()</var>, <var>findAll()</var>).</li>
            <li class="bullet_list">Query containers do not access higher layers. So no usage of a facade here.</li>
            <li class="bullet_list">Query containers do not contain any logic which is not needed to build queries.</li>
        </ul>
        <h2>Related Spryks</h2>
        <p>You might use the following definitions to generate related code:</p>
        <ul>
            <li>Add Zed Persistence Propel Abstract Query</li>
        </ul>
        <p>See the <a href="https://documentation.spryker.com/capabilities/development/development_tools/spryk.htm">Spryk</a> documentation for details.</p>
        <p>&#160;</p>
        <p><b>See also:</b>
        </p>
        <ul>
            <li><a href="database_overview.htm">Database overview</a>
            </li>
            <li><a href="database_schema_definition.htm">Defining Database Schema</a>
            </li>
            <li><a href="entity.htm">Learn about Entities and their usage</a>
            </li>
            <li><a href="entity.htm">Saving Entities with transactions</a>
            </li>
            <li><a href="entity-manager.htm">Learn about Entity Manager and how to use it</a>
            </li>
            <li><a href="repository.htm">Learn about Repository class and how to use it
				</a>
            </li>
            <li><a href="query_objects.htm">Creating query objects</a>
            </li>
        </ul>
    </body>
</html>