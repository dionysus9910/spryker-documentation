<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title>Modular Frontend | Spryker</title>
        <link href="../../../../Spryker Tutorials/Content/Resources/TableStyles/PatternedRows2.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <meta name="description" content="You will read about Modular Frontend concept which includes pages and widgets. Also, there is information about Pages module and how it can be extended. " />
    </head>
    <body>
        <h1>Modular Frontend <img src="../../../../Spryker Tutorials/Content/Resources/Images/shoptype/B2B_Shop.png" /><img src="../../../../Spryker Tutorials/Content/Resources/Images/shoptype/B2C_Shop.png" /><img src="../../../../Spryker Tutorials/Content/Resources/Images/shoptype/MasterSuite.png" /><img src="../../../../Spryker Tutorials/Content/Resources/Images/shoptype/Demoshop.png" /></h1>
        <p>Th<MadCap:annotation MadCap:createDate="2019-02-06T19:18:27.2766013+02:00" MadCap:creator="oksana.karasyova" MadCap:initials="OK" MadCap:comment="need to clarify whether this info is Legacy Demoshop - compatible. If not - remove an icon.\r\n" MadCap:editor="oksana.karasyova" MadCap:editDate="2019-02-06T19:19:00.7811389+02:00">is tutoria</MadCap:annotation>l provides information on <a href="#Pages">Pages</a> and <a href="#Widgets">Widgets</a>, the Pages module and how the Pages module can be extended. Real-life examples included into the article will help you to understand the concept better.</p>
        <h2>General Information </h2>
        <h3><a name="Pages"></a>Pages</h3>
        <p><b>Pages</b> are the main concept of modular front-end (Yves) which splits code into modules. A <i>Page module</i> represents a set of pages displayed under some or similar URLs that logically belong together.</p>
        <div class="example">
            <p class="example">As an example, we consider <b>Product Detail Page</b> as one <i>Page module</i> which is responsible for displaying products and their basic information.</p>
            <p>
                <img src="../../../../Spryker Tutorials/Content/Resources/Images/Tutorial - Pages and Widgets/pdp-page.png" />
            </p>
        </div>
        <p class="example">Another <i>Page module</i> example would be any customer related pages, like <b>Login</b>, <b>Register</b>, <b>Profile</b>, <b>Addresses</b>. These are several different pages. Each page is responsible for something specific from the customer domain, so it's natural to group them under the same module.</p>
        <p>We group pages under a Page module when they are related to the same domain.</p>
        <h3><a name="Widgets"></a>Widgets</h3>
        <p>Meanwhile, <i>Page modules</i> implement only feature basics, while <b>Widgets</b> provide optional extensions for them.</p>
        <div class="example">
            <p class="example"><b>Product Detail Page</b> shows basic product information, like the <i>name</i>, <i>description</i> and <i>attributes</i> of the product. But there are lots of optional features that can appear on the same page. The most commonly used examples are <i>product image</i>, <i>price</i>, <i>availability</i>, <i>options</i>, <i>groups</i>, <i>rating</i>, <i>relations</i>, an much more.
</p>
            <p>
                <img src="../../../../Spryker Tutorials/Content/Resources/Images/Tutorial - Pages and Widgets/pdp-ratings.png" />
            </p>
        </div>
        <p>The <i>Pages</i> and <i>Widgets</i> concept offers a solution to tailor projects to their custom needs.</p>
        <p>When you get the general understanding of the <i>Pages</i>/<i>Widgets</i> concept, its time to investigate how the Pages module looks like, why and how the module can be extended.</p>
        <h3>Page Module Appearance and Pages Extension</h3>
        <p>A <b>Page</b> module typically contains a <var>ControllerProvider</var> plugin for routing (see <a href="https://documentation.spryker.com/yves/yves-url-routing.htm">URL Routing</a>) and some Controllers with their twig templates (see <a href="https://documentation.spryker.com/yves/controllers-actions.htm">Controllers and Actions</a>). The implementation scope of a <b>Page</b> module should be decided individually, depending on its need of re-usability. </p>
        <p class="info">The more generic a <b>Page</b> module is the more it can be reused, but also it needs more extension points this way.
		</p>
        <p>As more features you need to have on in your <b>Page</b> module, as much you need to extend it.</p>
        <p>To extend a Page with an additional functionality you use <b>Widgets</b>. When you extend the front-end by rendering a template fragment in a template of a controller action, you need to specify the exact place of each extension point on template level.</p>
        <p>
            <img src="../../../../Spryker Tutorials/Content/Resources/Images/product-details-page-schema-temlate.png" />
        </p>
        <div class="tip">
            <p>Before you start using the widget system, make sure to register the following plugins:</p>
            <MadCap:dropDown>
                <MadCap:dropDownHead>
                    <MadCap:dropDownHotspot>src/Pyz/Yves/EventDispatcher/EventDispatcherDependencyProvider.php</MadCap:dropDownHotspot>
                </MadCap:dropDownHead>
                <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php

/**
 * This file is part of the Spryker Suite.
 * For full license information, please view the LICENSE file that was distributed with this source code.
 */

namespace Pyz\Yves\EventDispatcher;

use Spryker\Yves\EventDispatcher\EventDispatcherDependencyProvider as SprykerEventDispatcherDependencyProvider;
use SprykerShop\Yves\ShopApplication\Plugin\EventDispatcher\ShopApplicationEventDispatcherPlugin;

class EventDispatcherDependencyProvider extends SprykerEventDispatcherDependencyProvider
{
    /**
     * @return \Spryker\Shared\EventDispatcherExtension\Dependency\Plugin\EventDispatcherPluginInterface[]
     */
    protected function getEventDispatcherPlugins(): array
    {
        return [
            new ShopApplicationEventDispatcherPlugin(),
        ];
    }
}</code></pre>
                </MadCap:dropDownBody>
            </MadCap:dropDown>
            <MadCap:dropDown>
                <MadCap:dropDownHead>
                    <MadCap:dropDownHotspot>src/Pyz/Yves/Twig/TwigDependencyProvider.php</MadCap:dropDownHotspot>
                </MadCap:dropDownHead>
                <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php

namespace Pyz\Yves\Twig;

use Spryker\Yves\Twig\TwigDependencyProvider as SprykerTwigDependencyProvider;
use SprykerShop\Yves\ShopApplication\Plugin\Twig\WidgetTagTwigPlugin;

class TwigDependencyProvider extends SprykerTwigDependencyProvider
{
    /**
     * @return \Spryker\Shared\TwigExtension\Dependency\Plugin\TwigPluginInterface[]
     */
    protected function getTwigPlugins(): array
    {
        return [
            new WidgetTagTwigPlugin(),
        ];
    }
}</code></pre>
                </MadCap:dropDownBody>
            </MadCap:dropDown>
        </div>
        <p>Learn how to implement a Widget <a href="https://documentation.spryker.com/tutorials/advanced/t-widgets-widget-plugins.htm#how-to-implement-a-widget-">here</a>. </p>
        <h3>Widget Twig Tag Reference</h3><pre><code class="language-xml line-numbers">{% widget WIDGET_EXPRESSION args WIDGET_ARGUMENTS use TWIG_TEMPLATE_PATH with TWIG_PARAMETERS only %}
	{% block WIDGET_BLOCK_N %}
		{{ parent() }}
	{% endblock %}
{% elsewidget ... %}
{% nowidget %}
	WIDGET_FALLBACK
{% endwidget %}</code></pre>
        <div class="table-wrap">
            <table style="mc-table-style: url('../../../../Spryker Tutorials/Content/Resources/TableStyles/PatternedRows2.css');border-top-left-radius: 4px;border-top-right-radius: 4px;border-bottom-right-radius: 4px;border-bottom-left-radius: 4px;border-left-style: solid;border-left-width: 1px;border-left-color: #e7ebef;border-right-style: solid;border-right-width: 1px;border-right-color: #e7ebef;border-top-style: solid;border-top-width: 1px;border-top-color: #e7ebef;border-bottom-style: solid;border-bottom-width: 1px;border-bottom-color: #e7ebef;margin-left: 0;margin-right: auto;width: 100%;" class="TableStyle-PatternedRows2" cellspacing="0">
                <col class="TableStyle-PatternedRows2-Column-Regular" />
                <col class="TableStyle-PatternedRows2-Column-Regular" />
                <col class="TableStyle-PatternedRows2-Column-Regular" />
                <thead>
                    <tr class="TableStyle-PatternedRows2-Head-Header1">
                        <th class="TableStyle-PatternedRows2-HeadE-Regular-Header1">Tag</th>
                        <th class="TableStyle-PatternedRows2-HeadE-Regular-Header1">Description</th>
                        <th class="TableStyle-PatternedRows2-HeadD-Regular-Header1">Additional Comments</th>
                    </tr>
                </thead>
                <tbody>
                    <tr class="TableStyle-PatternedRows2-Body-LightRows">
                        <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows"><var>{% widget ... %}...{% endwidget %}</var>
                        </td>
                        <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">Required twig tag to render a widget.
                            </td>
                        <td class="TableStyle-PatternedRows2-BodyD-Regular-LightRows">A widget is rendered only when it can be found in the local or global widget registry.
                            </td>
                    </tr>
                    <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                        <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows"><var>WIDGET_EXPRESSION</var>
                        </td>
                        <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows">Can be a string that represents the name of the widget or an instance of a widget.
					</td>
                        <td class="TableStyle-PatternedRows2-BodyD-Regular-DarkerRows">This argument is required.</td>
                    </tr>
                    <tr class="TableStyle-PatternedRows2-Body-LightRows">
                        <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows"><var>args WIDGET_ARGUMENTS</var>
                        </td>
                        <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">Array of arguments that the widget is initialized with (by <var>constructor() of new widgets or by initialize()</var> method of old widget plugins). This parameter is only available when <var>ЮWIDGET_EXPRESSION</var> was not an instance of a widget.
					</td>
                        <td class="TableStyle-PatternedRows2-BodyD-Regular-LightRows">This parameter is optional, depending if the widget object to be initialized requires any arguments or not.</td>
                    </tr>
                    <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                        <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows"><var>use TWIG_TEMPLATE_PATH</var>
                        </td>
                        <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows">Render the widget with a different template then defined by the widget. <var>TWIG_TEMPLATE_PATH</var> is a string that represents a valid path for a twig template that can be loaded.</td>
                        <td class="TableStyle-PatternedRows2-BodyD-Regular-DarkerRows">This parameter is optional.</td>
                    </tr>
                    <tr class="TableStyle-PatternedRows2-Body-LightRows">
                        <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows"><var>with TWIG_PARAMETERS</var>
                        </td>
                        <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">Pass an associative array of variables for the scope of the rendered widget twig blocks. 
							</td>
                        <td class="TableStyle-PatternedRows2-BodyD-Regular-LightRows">This parameter is optional.</td>
                    </tr>
                    <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                        <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows"><var>{% block WIDGET_BLOCK_N %}{% endblock %}</var>
                        </td>
                        <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows">Twig blocks to overwrite/customize blocks of the twig template to be rendered. <var>{{ parent() }}</var> can be used to render the original content of a block. </td>
                        <td class="TableStyle-PatternedRows2-BodyD-Regular-DarkerRows">This tag is optional.</td>
                    </tr>
                    <tr class="TableStyle-PatternedRows2-Body-LightRows">
                        <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows"><var>only</var>
                        </td>
                        <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">Optional argument to reduce the context of the template to be rendered to only the provided <var>TWIG_PARAMETERS</var>. </td>
                        <td class="TableStyle-PatternedRows2-BodyD-Regular-LightRows">By convention, in Spryker core we always provide this argument to prevent mixing template scopes.</td>
                    </tr>
                    <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                        <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows"><var>{% elsewidget ... %}</var>
                        </td>
                        <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows">Optional twig tag to render a widget when the previous widget(s) were not found. Has the same parameters as the base widget tag including <var>WIDGET_BLOCK_N</var>.                             </td>
                        <td class="TableStyle-PatternedRows2-BodyD-Regular-DarkerRows">Listing multiple <var>elsewidget</var> tags will render the first widget that is found.
                            </td>
                    </tr>
                    <tr class="TableStyle-PatternedRows2-Body-LightRows">
                        <td class="TableStyle-PatternedRows2-BodyB-Regular-LightRows"><var>{% nowidget %} WIDGET_FALLBACK</var>
                        </td>
                        <td class="TableStyle-PatternedRows2-BodyB-Regular-LightRows">Optional twig tag to render any content <var>(WIDGET_FALLBACK)</var>, when no widget is found by the widget tag.</td>
                        <td class="TableStyle-PatternedRows2-BodyA-Regular-LightRows">N/A
                            </td>
                    </tr>
                </tbody>
            </table>
        </div>
        <h3>findWidget() Twig Function Reference</h3><pre><code class="language-xml">{% set widget = findWidget(WIDGET_NAME, WIDGET_ARGUMENTS) %}
 
{{ widget.WIDGET_PARAMETER_N ?? null }}</code></pre>
        <div class="table-wrap">
            <table style="mc-table-style: url('../../../../Spryker Tutorials/Content/Resources/TableStyles/PatternedRows2.css');border-top-left-radius: 4px;border-top-right-radius: 4px;border-bottom-right-radius: 4px;border-bottom-left-radius: 4px;border-left-style: solid;border-left-width: 1px;border-left-color: #e7ebef;border-right-style: solid;border-right-width: 1px;border-right-color: #e7ebef;border-top-style: solid;border-top-width: 1px;border-top-color: #e7ebef;border-bottom-style: solid;border-bottom-width: 1px;border-bottom-color: #e7ebef;margin-left: 0;margin-right: auto;width: 100%;" class="TableStyle-PatternedRows2" cellspacing="0">
                <col class="TableStyle-PatternedRows2-Column-Regular" />
                <col class="TableStyle-PatternedRows2-Column-Regular" />
                <col class="TableStyle-PatternedRows2-Column-Regular" />
                <thead>
                    <tr class="TableStyle-PatternedRows2-Head-Header1">
                        <th class="TableStyle-PatternedRows2-HeadE-Regular-Header1">Tag</th>
                        <th class="TableStyle-PatternedRows2-HeadE-Regular-Header1">Description</th>
                        <th class="TableStyle-PatternedRows2-HeadD-Regular-Header1">Additional Comments</th>
                    </tr>
                </thead>
                <tbody>
                    <tr class="TableStyle-PatternedRows2-Body-LightRows">
                        <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows"><var>findWidget(WIDGET_NAME)</var>
                        </td>
                        <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">Find a widget by name and return it as an object. </td>
                        <td class="TableStyle-PatternedRows2-BodyD-Regular-LightRows">When a widget is not found, null will be returned instead. 
                            </td>
                    </tr>
                    <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                        <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows"><var>WIDGET_ARGUMENTS</var>
                        </td>
                        <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows">Array of arguments that the widget is initialized with <var>(by constructor()</var> of new widgets or by <var>initialize()</var> method of old widget plugins).</td>
                        <td class="TableStyle-PatternedRows2-BodyD-Regular-DarkerRows">This parameter is optional, depending if the widget object to be initialized requires any arguments or not.
</td>
                    </tr>
                    <tr class="TableStyle-PatternedRows2-Body-LightRows">
                        <td class="TableStyle-PatternedRows2-BodyB-Regular-LightRows"><var>widget.WIDGET_PARAMETER_N ?? null</var>
                        </td>
                        <td class="TableStyle-PatternedRows2-BodyB-Regular-LightRows">Get parameters of the widget through its <var>ArrayAccess</var> interface. </td>
                        <td class="TableStyle-PatternedRows2-BodyA-Regular-LightRows">The <var>??</var> check is required in all cases to prevent errors of non-existing widgets.</td>
                    </tr>
                </tbody>
            </table>
        </div>
        <h2>Deprecations</h2>
        <p>The Page and Widget concepts were introduced in <var>spryker/kernel: 3.16.0</var> module version and originally Widgets were implemented as Yves plugins. Later, in <b>3.24.0</b> version of the Kernel module the widget plugins were deprecated. They started to be used  in their own domain called <b>Widget</b>. Use the following documentation in case you are on a lower Kernel version.</p>
        <h3>Widget Plugins</h3>
        <p><b>Widget Plugins</b> are scoped to a single use case. It's the main difference to Widgets which could be called from different Pages.</p>
        <p>Before you start using the widget plugin system, make sure to register the <var>\SprykerShop\Yves\ShopApplication\Plugin\Provider\WidgetServiceProvider</var> in your <var>YvesBoostrap</var>.</p>
        <p><pre><code class="language-PHP line-numbers">&lt;?php
 
namespace Pyz\Yves\ShopApplication;
 
use SprykerShop\Yves\ShopApplication\Plugin\Provider\WidgetServiceProvider;
use SprykerShop\Yves\ShopApplication\YvesBootstrap as SprykerYvesBootstrap;
 
class YvesBootstrap extends SprykerYvesBootstrap
{
	/**
	 * @return void
	 */
	protected function registerServiceProviders()
	{
		$this-&gt;application-&gt;register(new WidgetServiceProvider());
	}
}</code></pre>
            <p>Learn how to create a Widget Plugin <a href="https://documentation.spryker.com/tutorials/advanced/t-pages-and-widgets.htm#how-to-implement-a-widget-plugin">here</a>. </p>
        </p>
    </body>
</html>