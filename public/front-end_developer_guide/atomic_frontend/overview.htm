<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="_Skins_HTML5___Top_Navigation" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../" data-mc-has-content-body="True" data-mc-conditions="Spryker.B2C,Spryker.B2B,Spryker.ShopSuite" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Front-End">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="msapplication-config" content="../../Skins/Favicons/browserconfig.xml" />
        <meta name="description" content="Spryker Frontend implements the atomic design design. Read about the basic principles of Spryker UI implementation. Spryker UI is based on the component model, atomic design and BEM methodology concepts." />
        <link rel="apple-touch-icon" sizes="180x180" href="../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../Skins/Favicons/favicon-16x16.png" />
        <meta charset="utf-8" />
        <meta name="description" content="" />
        <meta name="author" content="" /><title>Atomic Frontend | Spryker</title>
        <!-- Google Tag Manager -->
        <script>/* <![CDATA[ */(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
			new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
			j=d.createElement(s),dl=l!='dataLayer'?'&amp;l='+l:'';j.async=true;j.src=
			'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
		})(window,document,'script','dataLayer','GTM-NP24S2');/* ]]> */</script>
        <!-- End Google Tag Manager -->
        <script>/* <![CDATA[ */
			var s = document.createElement("script");
			s.type = "text/javascript";
			s.src = "https://www.googletagmanager.com/gtag/js?id==UA-56589105-4";
			document.getElementsByTagName('head').item(0).appendChild(s);
		/* ]]> */</script>
        <script>/* <![CDATA[ */
			window.dataLayer = window.dataLayer || [];
			function gtag(){dataLayer.push(arguments);}
			gtag('js', new Date());
			gtag('config', 'UA-56589105-4');
		/* ]]> */</script>
        <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" />
        <link href="../../Skins/Fluid/stylesheets/foundation.6.2.3.css" rel="stylesheet" />
        <link href="../../Skins/Fluid/stylesheets/styles.css" rel="stylesheet" />
        <link href="../../Skins/Fluid/stylesheets/tablet.css" rel="stylesheet" />
        <link href="../../Skins/Fluid/stylesheets/mobile.css" rel="stylesheet" />
        <link href="../../resources/stylesheets/perfect-scrollbar.css" rel="stylesheet" />
        <link href="../../resources/stylesheets/prism.css" rel="stylesheet" />
        <style>/*&lt;meta /&gt;*/

.button.previous-topic-button
{
	-pie-background: url('../../Skins/Default/Stylesheets/Images/navigate-previous.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.next-topic-button
{
	-pie-background: url('../../Skins/Default/Stylesheets/Images/navigate-next.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.print-button
{
	-pie-background: url('../../Skins/Default/Stylesheets/Images/printer.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.expand-all-button
{
	-pie-background: url('../../Skins/Default/Stylesheets/Images/expand.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.collapse-all-button
{
	-pie-background: url('../../Skins/Default/Stylesheets/Images/collapse.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.needs-pie
{
	behavior: url('../../resources/scripts/PIE-no-motw.htc');
}

</style>
        <link href="../../resources/stylesheets/mainstyles.css" rel="stylesheet" />
        <link href="../../resources/tablestyles/verticaltable.css" rel="stylesheet" />
        <script src="../../resources/scripts/custom.modernizr.js">
        </script>
        <script src="../../resources/scripts/jquery.min.js">
        </script>
        <script src="../../resources/scripts/require.min.js">
        </script>
        <script src="../../resources/scripts/require.config.js">
        </script>
        <script src="../../resources/scripts/foundation.6.2.3_custom.js">
        </script>
        <script src="../../resources/scripts/plugins.min.js">
        </script>
        <script src="../../resources/scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-right" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
                    <ul class="off-canvas-drilldown vertical menu off-canvas-list" data-drilldown="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-drilldown-submenu-parent" data-mc-css-tree-node-collapsed="is-drilldown-submenu-parent" data-mc-css-sub-menu="vertical menu slide-in-right is-drilldown-submenu" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="True" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.drilldown" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div data-sticky-container="" class="title-bar-container">
                        <nav class="title-bar tab-bar sticky" data-sticky="" data-options="marginTop:0" style="width:100%" data-sticky-on="small" data-mc-ignore="true">
                            <div class="middle title-bar-section outer-row clearfix">
                                <div class="menu-icon-container relative clearfix">
                                    <button class="menu-icon" data-toggle="offCanvas"><span></span>
                                    </button>
                                </div>
                            </div>
                            <div class="title-bar-layout outer-row">
                                <div class="logo-wrapper"><a class="logo" href="../../home.htm" alt="Logo"></a>
                                </div>
                                <div class="navigation-wrapper nocontent">
                                    <ul class="navigation clearfix" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                        <li class="placeholder" style="visibility:hidden"><a>placeholder</a>
                                        </li>
                                    </ul>
                                </div>
                                <div class="nav-search-wrapper">
                                    <div class="nav-search row">
                                        <form class="search" action="#">
                                            <div class="search-bar search-bar-container needs-pie">
                                                <input class="search-field needs-pie" type="search" placeholder="Search the Academy" />
                                                <div class="search-filter-wrapper">
                                                    <div class="search-filter">
                                                        <div class="search-filter-content">
                                                            <ul>
                                                                <li>All Files</li>
                                                            </ul>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="search-submit-wrapper" dir="ltr">
                                                    <div class="search-submit" title="Search">
                                                    </div>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </nav>
                    </div>
                    <section class="main-section">
                        <div class="row outer-row sidenav-layout">
                            <div class="sidenav-wrapper">
                                <div class="sidenav-container">
                                    <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                                </div>
                            </div>
                            <div class="body-container" data-mc-content-body="True">
                                <!-- Google Tag Manager (noscript) -->
                                <noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-NP24S2" height="0" width="0" style="display:none;visibility:hidden"></iframe>
                                </noscript>
                                <!-- End Google Tag Manager (noscript) -->
                                <div class="search-container">
                                    <form class="search" action="#">
                                        <div class="search-bar search-bar-container needs-pie _Skins_SearchTopics mc-component">
                                            <input class="search-field needs-pie" type="search" placeholder="Search" />
                                            <div class="search-filter-wrapper">
                                                <div class="search-filter">
                                                    <div class="search-filter-content">
                                                        <ul>
                                                            <li>All Files</li>
                                                        </ul>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="search-submit-wrapper" dir="ltr">
                                                <div class="search-submit" title="Search">
                                                </div>
                                            </div>
                                        </div>
                                    </form>
                                </div>
                                <div class="row collapse">
                                    <div class="top-bar">
                                        <div class="breadcrumbs-block">
                                            <div class="nocontent">
                                                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="3" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">You are here: </span>
                                                </div>
                                            </div>
                                        </div>
                                        <div>
                                        </div>
                                        <form class="search" action="#">
                                            <div class="search-bar search-bar-container needs-pie _Skins_SearchHome mc-component">
                                                <input class="search-field needs-pie" type="search" placeholder="Search" />
                                                <div class="search-filter-wrapper">
                                                    <div class="search-filter">
                                                        <div class="search-filter-content">
                                                            <ul>
                                                                <li>All Files</li>
                                                            </ul>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="search-submit-wrapper" dir="ltr">
                                                    <div class="search-submit" title="Search">
                                                    </div>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                    <div class="topic-layout">
                                        <div>
                                            <div class="side-menu">
                                                <div data-sticky-container="" id="gCkSBWr05E2_6XfrGjQ06g">
                                                    <div class="sticky sticky-menu" style="width:100%" data-sticky="" data-top-anchor="gCkSBWr05E2_6XfrGjQ06g:top" data-bottom-anchor="contentBody:bottom" data-sticky-on="small" data-scroll-container-on="small">
                                                        <ul class="nocontent menu _Skins_SideMenu mc-component" data-mc-is-context-sensitive="True" data-mc-linked-toc="Data/Tocs/master.js" data-mc-side-menu="True" data-mc-max-depth="1" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                                        </ul>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div>
                                            <div class="side-menu">
                                                <div class="toolbar-wrapper">
                                                    <div class="widget-github js-widget-github"><a class="widget-github-link js-widget-github-link" href="https://github.com/spryker/spryker-documentation" target="_blank"><svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="0 0 26 26"><path d="M13.5 0C6.057 0 0 6.057 0 13.5c0 5.888 3.791 10.905 9.058 12.745a.463.463 0 0 0 .258.088c1.316.43 2.724.667 4.184.667C20.943 27 27 20.943 27 13.5S20.943 0 13.5 0zm0 .931c6.93 0 12.569 5.639 12.569 12.569 0 5.428-3.459 10.061-8.287 11.818a1.903 1.903 0 0 1-.092-.527v-2.446c0-.975-.477-2.037-.946-2.75 2.584-.436 5.537-1.776 5.537-6.779 0-1.37-.429-2.58-1.275-3.598.186-.611.415-1.9-.225-3.52a.47.47 0 0 0-.291-.272c-.13-.04-1.326-.35-3.806 1.277a12.921 12.921 0 0 0-6.36 0c-2.481-1.63-3.68-1.319-3.809-1.277a.47.47 0 0 0-.29.273C5.582 7.319 5.811 8.607 6 9.218c-.85 1.018-1.279 2.227-1.279 3.598 0 4.957 2.9 6.323 5.463 6.778-.322.407-.66.934-.81 1.47-.661.184-2.018.19-2.929-1.37-.032-.06-.829-1.475-2.4-1.584-.25.002-.882.042-1.035.525-.169.537.424.944.679 1.117l.058.034c.029.015.707.371 1.213 1.644.105.333 1.03 2.84 4.353 2.399.002.367 0 .552-.004.7v.26c0 .15-.045.378-.096.525C4.386 23.558.931 18.924.931 13.5.931 6.57 6.57.931 13.5.931zm6.51 5.375c.5 1.471.158 2.537.035 2.839a.468.468 0 0 0 .089.49c.805.883 1.214 1.952 1.214 3.181 0 4.72-2.796 5.666-5.535 5.97a.464.464 0 0 0-.253.815c.368.314 1.199 1.68 1.199 2.744v2.446c0 .009.001.414.134.809a12.513 12.513 0 0 1-6.792-.002c.135-.396.139-.802.139-.81l.001-.248c.002-.211.006-.497 0-1.266a.473.473 0 0 0-.174-.362.47.47 0 0 0-.391-.09c-3.126.681-3.802-1.576-3.828-1.67l-.016-.047c-.448-1.135-1.037-1.713-1.388-1.975.759.267 1.182 1.007 1.193 1.024 1.231 2.107 3.264 2.162 4.328 1.685a.463.463 0 0 0 .27-.36c.095-.665.826-1.545 1.196-1.87a.464.464 0 0 0 .136-.488.461.461 0 0 0-.39-.324c-2.73-.31-5.524-1.266-5.524-5.98 0-1.228.41-2.3 1.219-3.181a.464.464 0 0 0 .087-.491c-.124-.302-.467-1.364.031-2.837.396.013 1.362.182 2.988 1.286.112.076.256.1.387.063.973-.27 2.058-.416 3.135-.421 1.08.005 2.166.15 3.14.421.131.037.273.013.386-.063 1.635-1.11 2.6-1.275 2.984-1.288z" /></svg></a>
                                                    </div>
                                                    <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolbar mc-component nocontent" style="mc-topic-toolbar-items: PreviousTopic NextTopic Print ExpandAll CollapseAll;">
                                                        <div class="button-group-container-left">
                                                            <button class="button needs-pie previous-topic-button" title="Navigate previous">
                                                                <img src="../../Skins/Default/Stylesheets/Images/transparent.gif" alt="previous topic" />
                                                            </button>
                                                            <button class="button needs-pie next-topic-button" title="Navigate next">
                                                                <img src="../../Skins/Default/Stylesheets/Images/transparent.gif" alt="next topic" />
                                                            </button>
                                                            <button class="button needs-pie print-button" title="Print">
                                                                <img src="../../Skins/Default/Stylesheets/Images/transparent.gif" alt="print" />
                                                            </button>
                                                            <button class="button needs-pie expand-all-button" data-state1-class="expand-all-button" data-state2-class="collapse-all-button" data-state2-title="Collapse all" title="Expand all" data-state1-title="Expand all">
                                                                <img src="../../Skins/Default/Stylesheets/Images/transparent.gif" alt="expand all" />
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="js-anchorer main-content">
                                                    <h1>Atomic Frontend <img src="../../resources/shoptype/mastersuite.png" /> <img src="../../resources/shoptype/b2b_shop.png" /> <img src="../../resources/shoptype/b2c_shop.png"> </img> </h1>
                                                    <p><strong>In this page</strong>:</p>
                                                    <p>To provide each customer with exactly the features they require, Spryker Commerce OS has been
    split into modules. Each customer can have a unique set of modules, and even module versions,
    specific to their business requirements. This fact combined with the possibility for customers
    to develop functionality on their own poses a big challenge for frontend developers. To ease
    the task, Spryker Frontend implements a design methodology called <strong>atomic design</strong>.
    Because of this, the UI layer of Spryker is called <em>Atomic Frontend</em>.</p>
                                                    <p>The following document describes the basic principles of Spryker UI implementation and
        explains how to perform the tasks required to design Spryker UI.
        </p>
                                                    <h1>Basic Concepts</h1>
                                                    <p>Spryker UI is based upon the following concepts:</p>
                                                    <h2>Component Model</h2>
                                                    <p><em>Atomic design</em> is an approach that allows you to develop user interface as a set of
    self-contained, independent and reusable functional units, or <strong>components</strong>.
    Within the approach, frontend design can be viewed as a process of bonding components together
    to fulfill
    a certain functional goal. By combination of various components, you can create powerful and
    flexible UI applications of any level of complexity.</p>
                                                    <p>The main idea of a component is that it should contain and carry in itself all the behavior and
    visual assets necessary to use it on a web page. Also, components
        should not manipulate DOM directly, they are always declarative.
    This makes integrating different components seamlessly and effortlessly regardless of where and
    how they are used.</p>
                                                    <p class="tip">For more details on the component module implemented by Spryker, and detailed
            specifications, see <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components">Web
                Components</a>.</p>
                                                    <p>The component model provides the following benefits:
        </p>
                                                    <ul>
                                                        <li value="1">decoupling of backend from frontend,
            </li>
                                                        <li value="2">support for Spryker modularity with a UI component library,
            </li>
                                                        <li value="3">possibility to define clear contracts between backend and frontend in terms of data,
            </li>
                                                        <li value="4">better atomicity and encapsulation of frontend,
            </li>
                                                        <li value="5">improved UI reusability,
            </li>
                                                        <li value="6">better code quality.
            </li>
                                                    </ul>
                                                    <p>The following peculiarities are characteristic of Spryker usage of Web Components:</p>
                                                    <ul>
                                                        <li value="1"><em>Shadow DOM</em> is not used. DOM implementation is always explicit.</li>
                                                        <li value="2">Web Components are used only for behavior management. No client side rendering or logic is
        implemented in the frontend.</li>
                                                        <li value="3">HTML rendering is done by Twig.</li>
                                                    </ul>
                                                    <h2>Atomic Design</h2>
                                                    <p>Based on their structure and use, all components are divided into the following logical and
    functional categories:</p>
                                                    <ul>
                                                        <li value="1"><strong>
            atom
        </strong>
         - These are the
            smallest, most basic building blocks of UI design. Typical examples of atoms are
            labels, input fields or buttons. Usually, atoms are very abstract in their essence and
            limited to a single functionality that can be included in many pages. They are not very
            useful by themselves. Being the smallest building block of atomic design, atoms cannot
            include other components.
    </li>
                                                        <li value="2"><strong>molecules</strong> - Molecules typically include
            two or more atoms or other molecules bonded together to serve a single purpose. These
        structures are already complex enough to have their own properties, however they should not
        be overcomplicated and built for wide reuse.</li>
                                                        <li value="3"><strong>organisms</strong> - Such components are rather specific and already provide
        sufficient context for the molecules and atoms they are composed of. Usually, organisms do
        not form a certain page, but they are rather specific as to what they do and what is their
        function. Typical
            examples of organisms can include a header, a footer, the sidebar etc. Such
        components are already complex enough to be used directly on a page.</li>
                                                        <li value="4"><strong>widgets</strong> - This
            is a special type of components that can be used to inject information from an external
            data source that might be unavailable  On the backend side, a widget must contain
            logic to access the data source and verify whether it is available. On the frontend
            side, a widget must provide means to show or hide information in such a way as not to
            break the functionality of the entire shop if the data source is not available. A
            typical use case for widgets is to show information from Spryker modules that can be
            missing in a specific customer implementation. For example, if the
        <em>
            Discounts
        </em>
         module is not used
            in a project, this should not break the calculation of the overall price, for which
            reason discounts information is injected as a widget. Generally, it is recommended to
            limit the use of widgets as much as possible in your projects.
    </li>
                                                        <li value="5">
                                                            <p><strong>templates</strong> - Templates can be viewed as combinations of components
            composed according to a specific graphic layout. They are used to define a visual
            schema for a set of pages. Typically, pages with a common template have the same
            structure and share most of content with the exception of a small portion of
            page-specific or widget-specific information that changes from page to page. Thus,
            a template serves as a backbone that defines a set of shared components and the
            overall layout. Examples of templates are the main site layout or the checkout layout.</p>
                                                        </li>
                                                        <li value="6">
                                                            <p><strong>views</strong> - This
                is the the highest point in the frontend hierarchy. A
            view is a template filled with specific content for use in a specific case. It
            represents a specific page or widget. Views are the only components that can be called
            by the backend directly which means that they also serve as a connection point
            between backend and frontend. On the backend side, views are always connected to
            controllers.
        </p>
                                                        </li>
                                                    </ul>
                                                    <p>For more details on the component model that inspired Spryker frontend,
    see <a href="http://bradfrost.com/blog/post/atomic-web-design/">Atomic Design</a>.</p>
                                                    <h2>BEM Methodology</h2>
                                                    <p>
    The styling of Spryker
        Shop UI components is based upon BEM methodology. It is applied on the
    <strong>
        SASS
    </strong>
     layer of the shop
        UI. For a detailed specification and recommended practices, see
    <a href="https://en.bem.info/methodology/css/">
        CSS with BEM
    </a>
    . For BEM conventions,
        see section <strong>Naming Conventions</strong>.
</p>
                                                    <h2>Technology stack</h2>
                                                    <p>The following technologies are used to enable Spryker Atomic Frontend:
        </p>
                                                    <ul>
                                                        <li value="1"><strong>Twig</strong> <br />Twig is the template engine behind the frontend. It allows easy
        integration of frontend with Spryker backend, which is PHP-based, and also deeply
        integrates with Symfony that is used as Spryker framework. For details, see <a href="https://twig.symfony.com/">here</a>.
        Spryker uses <strong>version 1</strong> of Twig,</li>
                                                        <li value="2"><strong>SASS</strong> <br />SASS is a very powerful superset of CSS that provides the
        benefit of using variables, mixins, functions, and conditions in CSS. <a href="https://sass-lang.com/">More
            information</a>.</li>
                                                        <li value="3"><strong>ES6 Javascript</strong> <br />The ES6 implementation of Javascript benefits
        from advanced features, such as class, array and object methods. It allows to have cleaner
        and more organized code, while simplifying it to a big degree. Detailed information on this
        implementation of Javascript can be found <a href="http://exploringjs.com/es6/">here</a>.</li>
                                                        <li value="4">
                                                            <p><strong>Typescript</strong> <br />Typescript is a superset of
            Javascript that allows to reinforce the object-oriented approach in programming
            behaviors. It is used to make Javascript strictly typed, increasing readability and
            maintainability, reducing the likelihood of type-related mistakes and enforces strong
            contracts in terms of data. Detailed information can be found <a href="https://www.typescriptlang.org/">here</a>.</p>
                                                            <p class="tip">If necessary, you can develop in pure Javascript. For details, see //How to Customize Spryker Frontend TODO:.
                </p>
                                                            <p>
                                                                <br />
                                                            </p>
                                                        </li>
                                                        <li value="5"><strong>Web Components</strong> <br />The Web Component standard was chosen as a reliable,
        high-performance and consistent approach to creating UI components. The
        main
        benefit of this approach is that any user interface created with the help of Web Components
        will be non-changeable across platforms and browsers. Also, it reduces the number of
        project dependencies required. Basically, everything that is needed to enable Web
        Components is a set of polyfills. <a href="https://www.webcomponents.org/">More details</a>.</li>
                                                        <li value="6"><strong>
            Webpack
        </strong>
                                                            <br />The frontend is based on
                    <strong><a href="https://webpack.js.org/">Webpack</a></strong>.
                    This
                        bundler is responsible for building
                            and compiling project assets.
                    It provides the benefit allows
                    using <em>Typescript</em> for manipulating behavior, <em>SASS</em> for designing styles,
                        and
                        <em>
                            Twig
                            
                        </em>
                        as
                            the template language, compiling them to native HTML,
                        Javascript and CSS that can be rendered by the browser. 
                    In
                        addition to that, it
                            provides <em>
                            Polyfills
                        </em>
                         to
                            enable support for older web browsers. It is
                        extremely flexible and totally configurable to the project needs.
                    
            </li>
                                                    </ul>
                                                    <h1>Implementation Details</h1>
                                                    <p>
    Spryker
    Shop is a modular system composed of several independent modules. The atomic frontend follows
    the general modular approach:
</p>
                                                    <p><strong>ShopUi</strong>
                                                    </p>
                                                    <p><em>ShopUi</em> is the main module that implements the core part of Spryker Shop frontend. It
    contains basic and shared code, such as global styles, main application bootstrap for
    Javascript, Twig models etc. Also, it implements all general purpose components that are not
    related to a specific feature and can be used in every other module. It is the main application
    of the atomic frontend.</p>
                                                    <p><strong>Feature Modules</strong>
                                                    </p>
                                                    <p>Besides the main application module, there are several other modules that define components,
    templates and views. Such modules are dedicated to a specific features, or distinctive parts of
    it, and contain only the assets that can be used within the framework of those features. The
    design of the components contained in such a module is very specific to the feature it
    implements and can hardly be used out of its context. Examples of such modules are <em>CartPage</em>
    or <em>ProductImageWidget</em>.</p>
                                                    <p>Although each feature module is a self-contained entity, there are some exceptions. Sometimes,
    it might happen that two or more modules are dependent on one another (this does not include
    the <em>ShopUi</em> module, on which all frontend modules are dependent). In this case, it is
    allowed to use components across modules. If you resort to such methodology, be sure to
    explicitly declare the module dependency in the <em>composer.json</em> files of the respective
    modules. As a general best practice, this behavior is not recommended unless really needed.</p>
                                                    <p>The naming and other conventions, as well as folder structure applied in the <em>ShopUi</em> module
    are also valid and applied in each and every module that implements user interface. This
    approach must be strictly followed to standardize the folder structure and ensure that Webpack
    can crawl into the all Spryker Shop folders and load every component. The same is also
    necessary for Twig managed by PHP.</p>
                                                    <h2>
    Folder Structure
</h2>
                                                    <p>Spryker frontend implementation is split into several folders depending on their usage and
    function:</p>
                                                    <table class="TableStyle-VerticalTable" style="width: 53.4247%;mc-table-style: url('../../resources/tablestyles/verticaltable.css');" cellspacing="0">
                                                        <colgroup>
                                                            <col style="width: 50.616%;" />
                                                            <col style="width: 49.384%;" />
                                                        </colgroup>
                                                        <tbody>
                                                            <tr class="TableStyle-VerticalTable-Body-Body1">
                                                                <td class="TableStyle-VerticalTable-BodyE-Column1-Body1"><strong>frontend</strong>
                                                                </td>
                                                                <td class="TableStyle-VerticalTable-BodyD-Column2-Body1">Contains Webpack implementation for Spryker frontend.</td>
                                                            </tr>
                                                            <tr class="TableStyle-VerticalTable-Body-Body2">
                                                                <td class="TableStyle-VerticalTable-BodyE-Column1-Body2"><strong>public</strong>
                                                                </td>
                                                                <td class="TableStyle-VerticalTable-BodyD-Column2-Body2">Folder where Webpack places compiled assets, such as Javascript files, CSS styles,
                images, fonts etc.</td>
                                                            </tr>
                                                            <tr class="TableStyle-VerticalTable-Body-Body1">
                                                                <td class="TableStyle-VerticalTable-BodyE-Column1-Body1"><strong>vendor/spryker-shop </strong>
                                                                </td>
                                                                <td class="TableStyle-VerticalTable-BodyD-Column2-Body1">
                Contains
                    the main application (ShopUi) as shipped by Spryker.
            </td>
                                                            </tr>
                                                            <tr class="TableStyle-VerticalTable-Body-Body2">
                                                                <td class="TableStyle-VerticalTable-BodyB-Column1-Body2"><strong>src/Pyz/Yves </strong>
                                                                </td>
                                                                <td class="TableStyle-VerticalTable-BodyA-Column2-Body2">
                In this
                    folder, you can place your own implementation of the Shop Suite and its modules
            </td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                    <h3>Shop UI</h3>
                                                    <p>The application is implemented by module <strong>ShopUI</strong>. It is located in the following
    folders:</p>
                                                    <table class="TableStyle-VerticalTable" style="width: 53.3151%;mc-table-style: url('../../resources/tablestyles/verticaltable.css');" cellspacing="0">
                                                        <colgroup>
                                                            <col style="width: 50.9259%;" />
                                                            <col style="width: 49.0741%;" />
                                                        </colgroup>
                                                        <tbody>
                                                            <tr class="TableStyle-VerticalTable-Body-Body1">
                                                                <td class="TableStyle-VerticalTable-BodyE-Column1-Body1"><strong>vendor/spryker-shop/shop-ui</strong>
                                                                </td>
                                                                <td class="TableStyle-VerticalTable-BodyD-Column2-Body1">Contains the default shop implementation as shipped by Spryker.</td>
                                                            </tr>
                                                            <tr class="TableStyle-VerticalTable-Body-Body2">
                                                                <td class="TableStyle-VerticalTable-BodyB-Column1-Body2"><strong>src/Pyz/Yves/ShopUi</strong>
                                                                </td>
                                                                <td class="TableStyle-VerticalTable-BodyA-Column2-Body2">This folder can be used to override certain parts of the default implementation, or
                the shop UI implementation as a whole, on the project level.</td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                    <p>
    Components, styles and
        templates will be loaded from the following folders:
</p>
                                                    <ul>
                                                        <li value="1"><strong>vendor/spryker-shop/shop-ui/src/SprykerShop/Yves/ShopUi/Theme/default</strong> - on
        the global level;</li>
                                                        <li value="2"><strong>src/Pyz/Yves/ShopUi/Theme/default</strong> - on the project level.</li>
                                                    </ul>
                                                    <p class="info">Note that project-level implementation has higher priority and loaded after the global
            implementation.</p>
                                                    <p>
    The structure of the
        <strong>default</strong> folder is as follows (both on the global and project level):
</p>
                                                    <table class="TableStyle-VerticalTable" style="width: 53.4247%;mc-table-style: url('../../resources/tablestyles/verticaltable.css');" cellspacing="0">
                                                        <colgroup>
                                                            <col style="width: 50.7187%;" />
                                                            <col style="width: 49.2813%;" />
                                                        </colgroup>
                                                        <tbody>
                                                            <tr class="TableStyle-VerticalTable-Body-Body1">
                                                                <td class="TableStyle-VerticalTable-BodyE-Column1-Body1">
                                                                    <p><strong>components</strong>
                                                                        <br /><strong>   /atoms</strong>
                                                                        <br /><strong> 
                         /molecules</strong>
                                                                        <br /><strong>   /organisms</strong>
                                                                    </p>
                                                                </td>
                                                                <td class="TableStyle-VerticalTable-BodyD-Column2-Body1">Folders for low-level components. Each component must be placed in its own folder.</td>
                                                            </tr>
                                                            <tr class="TableStyle-VerticalTable-Body-Body2">
                                                                <td colspan="1" class="TableStyle-VerticalTable-BodyE-Column1-Body2"><strong>models</strong>
                                                                </td>
                                                                <td colspan="1" class="TableStyle-VerticalTable-BodyD-Column2-Body2">
                Contains
                    the Twig models used in the frontend.
            </td>
                                                            </tr>
                                                            <tr class="TableStyle-VerticalTable-Body-Body1">
                                                                <td colspan="1" class="TableStyle-VerticalTable-BodyE-Column1-Body1"><strong>resources</strong>
                                                                </td>
                                                                <td colspan="1" class="TableStyle-VerticalTable-BodyD-Column2-Body1">
                Contains
                    application resources.
            </td>
                                                            </tr>
                                                            <tr class="TableStyle-VerticalTable-Body-Body2">
                                                                <td class="TableStyle-VerticalTable-BodyE-Column1-Body2"><strong>styles</strong>
                                                                </td>
                                                                <td class="TableStyle-VerticalTable-BodyD-Column2-Body2">
                                                                    <p>
                    
                        Holds
                            all 
                    
                    
                        SCSS-related
                            assets, such as 
                    utility classes, variables, reset for browser
                    styles, grids and so on.
                </p>
                                                                </td>
                                                            </tr>
                                                            <tr class="TableStyle-VerticalTable-Body-Body1">
                                                                <td colspan="1" class="TableStyle-VerticalTable-BodyE-Column1-Body1"><strong>templates</strong>
                                                                </td>
                                                                <td colspan="1" class="TableStyle-VerticalTable-BodyD-Column2-Body1">Folder for Twig files with templates. Each template must be placed in
                its own folder.</td>
                                                            </tr>
                                                            <tr class="TableStyle-VerticalTable-Body-Body2">
                                                                <td colspan="1" class="TableStyle-VerticalTable-BodyE-Column1-Body2"><strong>views</strong>
                                                                </td>
                                                                <td colspan="1" class="TableStyle-VerticalTable-BodyD-Column2-Body2">Folder for Twig files with views. Each
                    view must be placed in its own folder.
            </td>
                                                            </tr>
                                                            <tr class="TableStyle-VerticalTable-Body-Body1">
                                                                <td colspan="1" class="TableStyle-VerticalTable-BodyB-Column1-Body1">
                                                                    <p><strong>app.ts</strong>
                                                                        <br /><strong>es6-polyfill.ts</strong>
                                                                        <br /><strong>vendor.ts</strong>
                                                                    </p>
                                                                </td>
                                                                <td colspan="1" class="TableStyle-VerticalTable-BodyA-Column2-Body1">Typescript entry points.</td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                    <h3>Feature Components</h3>
                                                    <p>The feature components are located in folder <strong>vendor/spryker-shop</strong> alongside
    the <em>ShopUi</em> module. Regardless of their function and use, every module that has UI
    on its own contains folder <strong><em>ModuleName</em>/Theme/default</strong> that
    contains the UI implementation for the module. The folder structure is the same as that of
    the <em>ShopUi</em> application.</p>
                                                    <h2>Main Application (Shop UI)</h2>
                                                    <h3>Application Bootstrap</h3>
                                                    <p>When you build the shop application, the builder (<em>Webpack</em>) will find all entry
    points of all components. Entrypoints are the files that <em>Webpack</em> uses to create the
    output assets.</p>
                                                    <p>There are 3 entrypoints that will be loaded in the DOM in the following order:</p>
                                                    <ul>
                                                        <li value="1"><strong>es6-polyfill:</strong>
                                                            <br /><em>src/Pyz/Yves/ShopUi/Theme/default/es-polyfill.ts</em>
                                                            <br />Provides
        ES6 polyfills used for compatibility with older browsers.<br /><br /></li>
                                                        <li value="2"><strong>vendor:<br /></strong><em>src/Pyz/Yves/ShopUi/Theme/default/vendor.ts</em>
                                                            <br />Contains
        all external dependencies required for your project.<br /><br /></li>
                                                        <li value="3"><strong>app<br /></strong><em>src/Pyz/Yves/ShopUi/Theme/default/app.ts</em>
                                                            <br />Contains
        the initialization logic for the project and the bootstrap code for the shop application.<br /><br /><em>
            src/Pyz/Yves/ShopUi/Theme/default/styles/basic.scss
        </em><br />        Contains basic
            styles.<br /><br /><em>
            Components
        </em><br />        When basic styles
            are loaded, behavior logic and styles of every component is loaded. This ensures that
            styles of each component override the basic styles.<br /><br /><em>
            src/Pyz/Yves/ShopUi/Theme/default/styles/util.scss
        </em><br />Contains util styles for the project. It is loaded at the very end as the styles
        defined in it should must override all styles, even the styles defined in components.
    </li>
                                                    </ul>
                                                    <h3>Webpack</h3>
                                                    <p>The core Spryker frontend functionality is provided by
        <strong>Webpack</strong>. It serves as the main basis for the shop application
    and used to compile Typescript code and SASS into Javascript and CSS. In addition to that,
    Webpack collects static assets, such as images and fonts. </p>
                                                    <p>Out of the box, the Webpack implementation provided by Spryker is sufficient to satisfy the
    needs of supporting a shop with the help of a Spryker shop application. However, if necessary,
    you can configure it the way you need.</p>
                                                    <p>The Webpack implementation is located in the <strong>frontend</strong> folder and has the
    following structure:</p>
                                                    <table class="TableStyle-VerticalTable" style="width: 53.5342%;mc-table-style: url('../../resources/tablestyles/verticaltable.css');" cellspacing="0">
                                                        <colgroup>
                                                            <col style="width: 50.0%;" />
                                                            <col style="width: 50.0%;" />
                                                        </colgroup>
                                                        <tbody>
                                                            <tr class="TableStyle-VerticalTable-Body-Body1">
                                                                <td width="467" class="TableStyle-VerticalTable-BodyE-Column1-Body1">
                                                                    <p><strong>settings.js</strong>
                                                                    </p>
                                                                </td>
                                                                <td width="467" class="TableStyle-VerticalTable-BodyD-Column2-Body1">
                                                                    <p>Sets the main project settings</p>
                                                                </td>
                                                            </tr>
                                                            <tr class="TableStyle-VerticalTable-Body-Body2">
                                                                <td width="467" class="TableStyle-VerticalTable-BodyE-Column1-Body2">
                                                                    <p><strong>build.js</strong>
                                                                    </p>
                                                                </td>
                                                                <td width="467" class="TableStyle-VerticalTable-BodyD-Column2-Body2">
                                                                    <p>Webpack loader. This file is called by <strong>npm</strong> when running <em>npm
                        run yves</em>.</p>
                                                                </td>
                                                            </tr>
                                                            <tr class="TableStyle-VerticalTable-Body-Body1">
                                                                <td width="467" class="TableStyle-VerticalTable-BodyE-Column1-Body1">
                                                                    <p><strong>libs/alias.js</strong>
                                                                    </p>
                                                                </td>
                                                                <td width="467" class="TableStyle-VerticalTable-BodyD-Column2-Body1">
                                                                    <p>Takes the <em>paths</em> property defined in the <em>tsconfig.json</em> file and
                    transforms them into Webpack aliases. Using this file ensures that an alias
                    defined in Typescript is available not only everywhere in Typescript, but also
                    in SASS.</p>
                                                                </td>
                                                            </tr>
                                                            <tr class="TableStyle-VerticalTable-Body-Body2">
                                                                <td width="467" class="TableStyle-VerticalTable-BodyE-Column1-Body2">
                                                                    <p><strong>libs/compiler.js</strong>
                                                                    </p>
                                                                </td>
                                                                <td width="467" class="TableStyle-VerticalTable-BodyD-Column2-Body2">
                                                                    <p>Calls Webpack as a compiler and prints out a human-readable output of the build
                    process</p>
                                                                </td>
                                                            </tr>
                                                            <tr class="TableStyle-VerticalTable-Body-Body1">
                                                                <td width="467" class="TableStyle-VerticalTable-BodyE-Column1-Body1">
                                                                    <p><strong>libs/finder.js</strong>
                                                                    </p>
                                                                </td>
                                                                <td width="467" class="TableStyle-VerticalTable-BodyD-Column2-Body1">
                                                                    <p>Finder is a set of functions needed to locate the assets for the frontend. This
                    is necessary because of Spryker architecture. Spryker, being a modular
                    application, can contain various modules. Some of them have a frontend
                    implementation, and some do not. The finder locates all frontend assets in all
                    modules and passes them to Webpack to compile. For this purpose, a set of
                    <strong>glob</strong> operations on the file system are used.</p>
                                                                </td>
                                                            </tr>
                                                            <tr class="TableStyle-VerticalTable-Body-Body2">
                                                                <td width="467" class="TableStyle-VerticalTable-BodyE-Column1-Body2">
                                                                    <p><strong>configs/development.js</strong>
                                                                    </p>
                                                                </td>
                                                                <td width="467" class="TableStyle-VerticalTable-BodyD-Column2-Body2">
                                                                    <p>Webpack configuration for development environment.</p>
                                                                </td>
                                                            </tr>
                                                            <tr class="TableStyle-VerticalTable-Body-Body1">
                                                                <td width="467" class="TableStyle-VerticalTable-BodyE-Column1-Body1">
                                                                    <p><strong>configs/development-watch.js</strong>
                                                                    </p>
                                                                </td>
                                                                <td width="467" class="TableStyle-VerticalTable-BodyD-Column2-Body1">
                                                                    <p>Webpack configuration for development environment that also provides watchers.</p>
                                                                </td>
                                                            </tr>
                                                            <tr class="TableStyle-VerticalTable-Body-Body2">
                                                                <td width="467" class="TableStyle-VerticalTable-BodyE-Column1-Body2">
                                                                    <p><strong>configs/production.js</strong>
                                                                    </p>
                                                                </td>
                                                                <td width="467" class="TableStyle-VerticalTable-BodyD-Column2-Body2">
                                                                    <p>Webpack configuration for production environment.</p>
                                                                </td>
                                                            </tr>
                                                            <tr class="TableStyle-VerticalTable-Body-Body1">
                                                                <td width="467" class="TableStyle-VerticalTable-BodyB-Column1-Body1">
                                                                    <p><strong>assets/</strong>
                                                                    </p>
                                                                </td>
                                                                <td width="467" class="TableStyle-VerticalTable-BodyA-Column2-Body1">
                                                                    <p>Contains static assets (images and fonts) used in the project. This the place to
                    put static files used in your project. They will be copied to the <strong>public</strong>
                    folder automatically.</p>
                                                                </td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                    <p>The resulting compiled data is placed in the <strong>public</strong> folder of your Spryker code
    installation.</p>
                                                    <h3>SASS Layer</h3>
                                                    <p>The SASS layer is responsible for styling the frontend UI. It contains the styles, mixins,
    functions, variables etc necessary to provide visual styling for Shop UI components.</p>
                                                    <p>Depending on their location and function, SASS styles are divided into <strong>4</strong> types:</p>
                                                    <ul>
                                                        <li value="1"><strong>Basic</strong> Styles - comprise the most basic styles used everywhere.
        Typical examples include HTML reset, grid layouts or animations etc. Such styles are loaded
        by Webpack at the
            very beginning of application bootstrapping and can be
        easily overridden at the component level. They are located in the following files:<br /><em>vendor/spryker-shop/shop-ui/src/SprykerShop/Yves/ShopUi/Theme/default/styles/basic.scss</em>
        - on the global level;<br /><em>src/Pyz/Yves/ShopUi/Theme/default/styles/basic.scss</em> -
        on the project level.<br /><br />You can find default basic styles in the following
        folder: <em>vendor/spryker-shop/shop-ui/src/SprykerShop/Yves/ShopUi/Theme/default/styles/basics</em>.<br /><br /></li>
                                                        <li value="2"><strong>Component</strong> Styles - are styles of each specific component. These styles are
        defined for each component separately in its own <em>SCSS </em>file. Such styles
        are loaded after the <em>basic styles</em>, thus they can override them. Depending on
        where a component is located, the visibility of its styles is different. Mixins that define
        styles of core components located in the <em>vendor</em> folder are visible everywhere
        and shared across the whole application. Mixins of project components located in the <em>src/Pyz</em>
        folder are not shared and visible only within the component itself by default.<br /><br /></li>
                                                        <li value="3"><strong>Util</strong> Styles - this group includes utility styles for the Shop UI, like,
        for example, the spacing system, text helpers, <em>float-right</em>, <em>float-left </em>or <em>is-hidden</em>
        implementations. Such styles are typically used to modify or even override the default
        layout or behavior of the components whenever necessary. For example, <em>is-hidden</em>
        implementations can be used to hide elements that are usually visible. For this reason,
        such styles should not be overridden by any other styles. Because of this, they are
        loaded at the very
            end of application bootstrap, when all other styles are
        loaded. Utility styles are located in the following files:<br /><em>vendor/spryker-shop/shop-ui/src/SprykerShop/Yves/ShopUi/Theme/default/styles/util.scss</em>
        - on the global level;<br /><em>src/Pyz/Yves/ShopUi/Theme/default/styles/util.scss</em> -
        on the project level.<br /><br />You can find default util styles in the following
        folder: <em>vendor/spryker-shop/shop-ui/src/SprykerShop/Yves/ShopUi/Theme/default/styles/util</em>.<br /><br /></li>
                                                        <li value="4"><strong>
            Shared
        </strong> Styles - is the place to put global SASS variables, functions and mixins. Such
        style files are loaded automatically before loading each style file, and thus available in
        any style file in the project.<br /><br />The global implementation is located in the
        following file: <em>vendor/spryker-shop/shop-ui/src/SprykerShop/Yves/ShopUi/Theme/default/styles/shared.scss</em>.
        <br /><br />You can provide your global SASS components in the following file: <em><em>src/Pyz/Yves/ShopUi/Theme/default/style/shared.scss.<br /><br /></em></em>By
        default, global styles are imported from the <em>settings</em> and <em>helpers</em>
        folders. Any imports can be overridden directly in your <em>shared.scss</em> file. The
        folders contain the following:<br /><ul><li value="1"><strong>settings</strong> - contains only variables, organized by topic,</li><li value="2"><strong>helpers</strong> - contains all global functions and mixins used in
                the system.</li></ul></li>
                                                    </ul>
                                                    <h2>Naming Conventions</h2>
                                                    <p>The following naming conventions must be observed in Spryker Shop:</p>
                                                    <p><strong>Files and Folders</strong>:</p>
                                                    <p>Atomic frontend uses <strong>kebab-case</strong> as naming convention for every file/folder name
    within the <em>default</em> folder;</p>
                                                    <p><strong>Variables and Functions:</strong>
                                                    </p>
                                                    <ul>
                                                        <li value="1"><strong>Twig</strong>: everything related to atomic frontend follows <strong>camelCase</strong>;</li>
                                                        <li value="2"><strong>SASS:</strong> follows <strong>kebab-case</strong> and implements BEM
        methodology with the following syntax:<br /><ul><li value="1">block: <em>.component-name</em></li><li value="2">element: <em>.component-name__element</em></li><li value="3">modifier: <em>.component-name--modifier</em> or <em>.component-name__element--modifier</em></li><li value="4"><strong>Note: </strong>as block modfiers are the only parameters we can use to
                customize a component when using it (<strong>include</strong> or <strong>embed</strong>),
                sometimes, you will find open violations of BEM in Spryker code. In particular,
                some block modifiers might be in cascade with elements in order to customize them.</li></ul></li>
                                                        <li value="3"><strong>Typescript:</strong> follows <strong>camelCase</strong></li>
                                                    </ul>
                                                    <h2>Main Templates</h2>
                                                    <p>Templates are <strong>.twig</strong> files containing a structure of a page or widget. It
    defines how a component is visually organised and arranged in terms of spacing and positions.</p>
                                                    <p>The main templates in <em>ShopUi</em> are:</p>
                                                    <ul>
                                                        <li value="1"><strong>page-blank </strong>- defines a blank page. it does not contain any html in
        the <em>&lt;body&gt; </em>tag.<br />This template defines all basic assets for the
        frontend, such as the <em>&lt;head&gt;</em> content (meta info, styles, high priority
        scripts and page title), as well as the bottom part of the <em>&lt;body&gt;</em> content
        (vendor and application scripts).<br /><br /></li>
                                                        <li value="2"><strong>page-layout-main</strong>: extends the <em>page-blank</em> template and defines the
        main layout for every single page in Spryker Suite.<br />This template contains the header,
        footer, sidebars etc, but soes not predefine the content of the page. This part is left
        blank to be defined by specific views.</li>
                                                    </ul>
                                                    <h2>Components</h2>
                                                    <p>Every component is a self-contained entity that implements a
        certain functional purpose. It does not have parts that are executed in other components,
        nor it executes parts of code for them. However, a part of a component is executed on the
        server side (<em>Twig</em>), and the other part is run on the client side (<em>SCSS</em>
        and <em>Typescript</em>). For this reason, data required for a component should be
        retrieved via <em>Twig</em>, and then rendered into HTML code. As the data source, it is
        possible to use controller code or output of another component.
        </p>
                                                    <p>The following conventions are applied to components:</p>
                                                    <ul>
                                                        <li value="1">
                                                            <p>every component, template or view is always contained in a folder with the same name;</p>
                                                        </li>
                                                        <li value="2"><em>
            atoms
        </em>
        ,
        <em>
            molecules
        </em>
         and
        <em>
            organisms
        </em>
         are always placed
            in folder <strong>
            components
        </strong>
         of the module they
            belong to;
    </li>
                                                        <li value="3">
                                                            <p><em>templates</em> are always contained in folder <strong>templates</strong>;</p>
                                                        </li>
                                                        <li value="4">
                                                            <p>views are always contained in folder called <strong>views</strong>;</p>
                                                        </li>
                                                        <li value="5">every component extends a model defined in <em>vendor/spryker-shop/shop-ui/src/SprykerShop/Yves/ShopUi/Theme/default/models/component.twig</em>.</li>
                                                    </ul>
                                                    <h3>Component Loading</h3>
                                                    <p>
    For a component to be
        used by the shop application, it needs to be compiled by Webpack and provide a function to
        register it in the DOM. Thus, when DOM is loaded, the application checks which of the
        registered components are present there and mounts only those that are available at <em>
            DomContentLoaded
        </em>
        . For each
            component that is being mounted, Webpack calls the chunk related to a component and
            loads the code and assets. As soon as all components have finished mounting, the
            application calls the <em>
            app.ready
        </em>
         event indicating
            that each component has finished loading and ready to use.
    </p>
                                                    <p>
    Mounting of components
        is asynchronous, which means that several components can be loaded at the same time,
        reducing the overall load time.
</p>
                                                    <h3>Component Structure</h3>
                                                    <p>A typical component folder consists of the following files:</p>
                                                    <table class="TableStyle-VerticalTable" style="width: 53.589%;mc-table-style: url('../../resources/tablestyles/verticaltable.css');" cellspacing="0">
                                                        <colgroup>
                                                            <col style="width: 50.5629%;" />
                                                            <col style="width: 49.4371%;" />
                                                        </colgroup>
                                                        <tbody>
                                                            <tr class="TableStyle-VerticalTable-Body-Body1">
                                                                <td class="TableStyle-VerticalTable-BodyE-Column1-Body1"><strong>index.ts</strong>
                                                                </td>
                                                                <td class="TableStyle-VerticalTable-BodyD-Column2-Body1">Specifies the component entry point for Webpack. This file is necessary to locate
                the component styles
                    and Typescript code.</td>
                                                            </tr>
                                                            <tr class="TableStyle-VerticalTable-Body-Body2">
                                                                <td class="TableStyle-VerticalTable-BodyE-Column1-Body2"><strong>component-name.ts</strong>
                                                                </td>
                                                                <td class="TableStyle-VerticalTable-BodyD-Column2-Body2">Specifies the behavior for the component in Typescript.</td>
                                                            </tr>
                                                            <tr class="TableStyle-VerticalTable-Body-Body1">
                                                                <td class="TableStyle-VerticalTable-BodyE-Column1-Body1"><strong>component-name.scss</strong>
                                                                </td>
                                                                <td class="TableStyle-VerticalTable-BodyD-Column2-Body1">
                                                                    <p>Contains the SCSS style for the component, wrapped into a mixin.</p>
                                                                    <p><em><strong>Note:</strong> If a component contains the style.scss file, this
                        file only declares a mixin.</em>
                                                                    </p>
                                                                </td>
                                                            </tr>
                                                            <tr class="TableStyle-VerticalTable-Body-Body2">
                                                                <td colspan="1" class="TableStyle-VerticalTable-BodyE-Column1-Body2"><strong>style.scss</strong>
                                                                </td>
                                                                <td colspan="1" class="TableStyle-VerticalTable-BodyD-Column2-Body2">
                Imports the
                    style when <em>
                    component-name.scss
                </em>
                 contains
                    only mixin declaration.
            </td>
                                                            </tr>
                                                            <tr class="TableStyle-VerticalTable-Body-Body1">
                                                                <td class="TableStyle-VerticalTable-BodyB-Column1-Body1"><strong>component-name.twig</strong>
                                                                </td>
                                                                <td class="TableStyle-VerticalTable-BodyA-Column2-Body1">Defines a template for the component layout.</td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                    <p>The above structure contains a fully featured component, with styles and Typescript that defines
    the component behavior. Depending on what you are
        trying to achieve, you can have a component that includes both styles and behavior, or any
        of these separately. In addition to this, you can even create a component that has neither
        styles, nor behavior. In the latter case, the component will contain a template only
        consisting of a <strong>.twig</strong> file.</p>
                                                    <p><em>Views</em> and <em>templates</em> always consist of
        a <strong>.twig</strong> file only.
        </p>
                                                    <h3>Twig</h3>
                                                    <p>When defining a component template with Twig, you need to use the following default entities:</p>
                                                    <ul>
                                                        <li value="1">
                                                            <p><strong>config</strong>
                    variable: specifies
                    the following base information about a component:<br /><em>Example:</em></p><pre><code class="language-Twig line-numbers">
% define config = {
    name: 'new-component-counter',
    tag: 'new-component-counter'
} %}
            </code></pre>
                                                            <p><em>
                Attributes:
            </em>
                                                            </p>
                                                        </li>
                                                        <ul>
                                                            <li value="1"><strong>name</strong>: component name <em>(required)</em><br />Specifies the
                component name. This name is also used as the main class name for the component,
                therefore the HTML element and modifiers will have this name as the base.
                </li>
                                                            <li value="2"><em><strong>jsName</strong>:</em> Javascript name of the component <em>
                    (optional)
                </em><br />By convention, whenever Javascript behavior is added to a
                component, the DOM addressing for elements should be performed using dedicated
                classnames starting with the <em>
                    -js
                </em> prefix. This prevents confusion in who-does-what: a classname starting with
                <em>js-</em> will have no style attached to it, but only Javascript behaviour.
                On the other hand, any classname that does <em>not </em>start with <em>js-</em>
                will be pure style.<br />If <em>jsName</em> is not defined
                explicitly, it will be created automatically by prefing <em>js-</em> to the
                component name.
                </li>
                                                            <li value="3"><strong>tag</strong>: specifies the HTML tag name for the component <em>(optional)</em><br />Every
                component is defined in the DOM as an HTML class with its dedicated tag name<em>.
                </em>Therefore a tag name must be specified. You can use either a
                standard HTML5 tag name (e.g. <strong>p</strong> or <strong>td</strong>)
                or have a
                    custom element tag name in order to attach Javascript behavior.
                In case you want to create a component with custom behavior defined in Javascript,
                Web Component specification, you <strong>must</strong>
                specify a custom tag name.<br />If tag name is not specified, <strong>div</strong>
                is used by default.
                </li>
                                                        </ul>
                                                        <li value="2">
                                                            <p><strong>data</strong> variable: defines the data
                contract for the component.<br />This
                        variable is used the data contract for the component. The
                    contract consists of the attributes required for the component to function
                    properly. The attributes provided by this variable can be either <strong style="text-align: left;">required</strong> or <strong style="text-align: left;">optional</strong>. <em style="text-align: left;">Required</em> attributes
                    must always be defined whenever a component is used, while <em style="text-align: left;">optional </em>ones
                    can be left undefined. Nevertheless, by convention, attributes cannot have
                    their value undefined. For this reason, if you define an optional attribute in
                    your contract, you must set a default value for it. The default value will be
                    used if an attribute value is not set explicitly or via context.<br />Whenever
                possible, use primitive types (e. g. strings, numbers etc). Avoid complex objects
                as a change in the object might lead to a broken component outside the contract
                itself.<br /><em>Example:</em></p><pre><code class="language-Twig line-numbers">

% define data = {
    name: required,
    description: 'no description'
} %}
            </code></pre>
                                                            <p>
                                                                <br />
                                                            </p>
                                                        </li>
                                                        <li value="3">
                                                            <p><strong>attributes</strong> variable: defines
                HTML5 attributes for the component<br />If
                    not <strong>null</strong> or <strong>false</strong>, the specified
                    attributes will be rendered in the component's HTML5 tag. The same as <strong style="text-align: left;">data</strong> attributes, an
                        HTML5 attribute can be <strong>required<em> </em></strong>or
            <strong>optional</strong> with a default value.<br /><em>Example:<br /></em></p><pre><code class="language-Twig line-numbers">

% define attributes = {
    'element-selector': required
} %}
            </code></pre>
                                                        </li>
                                                        <li value="4"><strong>class</strong> variable: defines external class names that a component might
            receive from the context.
            </li>
                                                        <li value="5"><strong>modifiers</strong> array: defines a list of modifiers received from the
            context that can be applied to the main block.
            </li>
                                                        <li value="6"><strong>embed</strong> variable: defines a list of variables that a component might
            receive from the context, specifically to be used for <em>Twig</em> embedding.
            </li>
                                                        <li value="7"><strong>macros</strong>
                                                        </li>
                                                        <ul>
                                                            <li value="1"><strong>renderClass</strong>: renders the classnames for the component. According
                to BEM specifications, the following is rendered:
                    <ul><li value="1"><em>name</em> (as defined in the <em>config</em> variable),
                        </li><li value="2"><em>modifiers</em> (if passed via the <em>modifiers</em> array)
                        </li><li value="3"><em>external class names</em> (if passed via the <em>class</em>
                            varible).
                        </li></ul></li>
                                                            <li value="2"><strong>renderAttributes</strong>: renders the HTML5 attributes defined in the
                <em>attributes </em>variable.
                </li>
                                                        </ul>
                                                        <li value="8"><strong>blocks</strong>
                                                        </li>
                                                        <ul>
                                                            <li value="1"><strong>component</strong>: the main block that contains all the logic to render
                a component
                </li>
                                                            <li value="2"><strong>class</strong>: contains the class names for the component
                </li>
                                                            <li value="3"><strong>attributes</strong>: contains the HTML5 attributes for the component
                </li>
                                                            <li value="4"><strong>body</strong>: contains the body for the component. Use this block to
                fill a component with content
                </li>
                                                        </ul>
                                                        <li value="9"><strong>qa</strong>: Experimental custom HTML5 attribute that renders a list of items
            that can be used later in QA to address a specific component or part of it.
            </li>
                                                    </ul>
                                                    <p><strong>
        Builtin Twig
            Functions and Filters
    </strong>
                                                    </p>
                                                    <p>The following builtin twig functions and filters can be used in your components to enable them
    with builtin Shop Ui functionality:</p>
                                                    <p>
                                                        <h4>function model($modelName: string): string</h4>
                                                        <p>Returns a string in the following format: <em>@ShopUi/models/<strong>modelName</strong>.twig</em></p>
                                                        <p>The string is used internally to resolve the model location within the <strong>ShopUi</strong>
                module.
            </p>
                                                        <p><strong>$modelName</strong> - model name <em>(required)</em></p>
                                                    </p>
                                                    <p>
                                                        <br />
                                                    </p>
                                                    <p>
                                                        <h4>function atom($componentName: string, $componentModule: string = "ShopUi"): string</h4>
                                                        <p>The function is used to resolve <strong>atom</strong> paths. Returns a
                    string in the following format: <em>@componentModule/components/atoms/<strong>componentName</strong>/<strong>componentName</strong>.twig</em></p>
                                                        <p>The string is used internally to resolve the component location
                within the provided module.
            </p>
                                                        <p><strong>$componentName</strong> - component name <em>(required)</em></p>
                                                        <p><strong>$componentModule</strong> - Spryker module in which the component is
                located <em>(optional)</em></p>
                                                        <p>If <em>$componentModule </em>is not specified, then <strong>ShopUi</strong>
                is used.
            </p>
                                                    </p>
                                                    <p>
                                                        <br />
                                                    </p>
                                                    <p>
                                                        <h4>function molecule($componentName: string, $componentModule:
        string = "ShopUi"): string</h4>
                                                        <p>The function is used to resolve <strong>molecule </strong>paths. Returns
                    a string in the following format: <em>@componentModule/components/<em>molecules</em>/<strong>componentName</strong>/<strong>componentName</strong>.twig</em></p>
                                                        <p>The string is used internally to resolve the component location
                within the provided module.
            </p>
                                                        <p><strong>$componentName</strong> - component name <em>(required)</em></p>
                                                        <p><strong>$componentModule</strong> - Spryker module in which the component is
                located <em>(optional)</em></p>
                                                        <p>If <em>$componentModule </em>is not specified, then <strong>ShopUi</strong>
                is used.
            </p>
                                                    </p>
                                                    <p>
                                                        <br />
                                                    </p>
                                                    <p>
                                                        <h4>function organism($componentName: string, $componentModule:
        string = "ShopUi"): string</h4>
                                                        <p>The function is used to resolve <strong>organism </strong>paths. Returns
                    a string in the following format: <em>@componentModule/components/<em>organisms</em>/<strong>componentName</strong>/<strong>componentName</strong>.twig</em></p>
                                                        <p>The string is used internally to resolve the component location
                within the provided module.
            </p>
                                                        <p><strong>$componentName</strong> - component name <em>(required)</em></p>
                                                        <p><strong>$componentModule</strong> - Spryker module in which the component is
                located <em>(optional)</em></p>
                                                        <p>If <em>$componentModule </em>is not specified, then <strong>ShopUi</strong>
                is used.
            </p>
                                                    </p>
                                                    <p>
                                                        <br />
                                                    </p>
                                                    <p>
                                                        <h4>function template($templateName: string, $templateModule: string
        = "ShopUi"): string</h4>
                                                        <p>The function is used to resolve <strong>template </strong>paths. Returns
                    a string in the following format: <em>@templateModule/templates/<strong>templateName</strong>/<strong>templateModule</strong>.twig</em></p>
                                                        <p>The string is used internally to resolve the component location
                within the provided module.
            </p>
                                                        <p><strong>$templateName</strong> - template name <em>(required)</em></p>
                                                        <p><strong><strong>$template</strong>Module</strong> - Spryker
                module in which the template is located <em>(optional)</em></p>
                                                        <p>If <em>$templateModule </em>is not specified, then <strong>ShopUi</strong> is
                used.
            </p>
                                                    </p>
                                                    <p>
                                                        <br />
                                                    </p>
                                                    <p>
                                                        <h4>function view($viewName: string, $viewModule: string =
        "ShopUi"): string</h4>
                                                        <p>The function is used to resolve <strong>view </strong>paths. Returns
                    a string in the following format: <em>@viewModule/views/<strong>viewName</strong>/<strong>viewName</strong></em></p>
                                                        <p>The string is used internally to resolve the component location
                within the provided module.
            </p>
                                                        <p><strong>$viewName</strong> - view name <em>(required)</em></p>
                                                        <p><strong><strong>$<strong>view</strong></strong>Module</strong> -
                Spryker module in which the view is located <em>(optional)</em></p>
                                                        <p>If <em>$viewModule </em>is not specified, then <strong>ShopUi</strong> is
                used.
            </p>
                                                    </p>
                                                    <p>
                                                        <br />
                                                    </p>
                                                    <p>
                                                        <h4>function publicPath($relativePath: string): string</h4>
                                                        <p>The function is used to provide a safe way to access the <strong>public </strong>folder
                        where compiled assets are located. Returns a string in the
                    following format: <em>public/path/relative/path</em></p>
                                                        <p>The string is used internally to resolve the component location
                within the provided module.
            </p>
                                                        <p><strong>$relativePath</strong> - asset relative path <em>(required)</em></p>
                                                    </p>
                                                    <p>
                                                        <br />
                                                    </p>
                                                    <p>
                                                        <h4>function qa($qaValues: string[] = []): string</h4>
                                                        <p>Returns a string in the following format: <em>data-qa="qa values here"</em></p>
                                                    </p>
                                                    <p>
                                                        <br />
                                                    </p>
                                                    <p>
                                                        <h4>unction qa_*($qaName: string, $qaValues: string[] = []): string</h4>
                                                        <p>Returns a string in the following format: <em>data-qa-name="qa values here"</em></p>
                                                        <p><strong>$qaName</strong> - specifies the name to add in the left side of the data
            strucure.</p>
                                                    </p>
                                                    <p>
                                                        <br />
                                                    </p>
                                                    <p>
                                                        <h4>custom tag define</h4>
                                                        <p>This function can be used for the following purposes:</p>
                                                        <ul>
                                                            <li value="1">create a default object that can be changed from the incoming context;
                </li>
                                                            <li value="2">define tags used to pass properties and contract for a specific component.
                </li>
                                                        </ul>
                                                    </p>
                                                    <p>Typical implementation:</p><pre><code class="language-CSS line-numbers">
{% extends model('component') %}

{% define config = {
    name: 'component-name',
    tag: 'tag'
} %}

{% define data = {
    ...
} %}

{% block body %}
    ...
{% endblock %}
    </code></pre>
                                                    <h3>SCSS</h3>
                                                    <p>A typical <em>component-name.scss</em> file looks as follows:</p><pre><code class="language-CSS line-numbers">
@mixin module-name-component-name($name: '.component-name') {
    #{$name} {
        // BEM styles

        @content;
    }
}
    </code></pre>
                                                    <p>When defining styles for a component, you can include the global mixins, variables and styles as
    defined in the <em>ShopUi</em> module. They are exposed to every component by default. Also,
    you can use the styles and mixins of every built-in component, as they are exposed
    transparently to the poject level, for example:</p><pre><code class="language-CSS line-numbers">
@include shop-ui-side-drawer('.new-existing-component-side-drawer') { //Create component style based on mixin of a core component
    color: $setting-color-alt; // Use system-wide variables
 
    &amp;__overlay {
        background-color: $setting-color-main; // Use system-wide variables
    }
}
    </code></pre>
                                                    <p>A component can also contain a <em>style.scss </em>file that imports the component
    style. In this case, <em>component-name.scss </em>just <strong>defines </strong>the
    style, while <em>style.scss</em> <strong>imports</strong> it, producing an output once. This is
    useful when a mixin might be used multiple times or extended. In that case, import via a
    separate file prevents the content to be rendered in the output every time a mixin is called.</p>
                                                    <p class="tip">The use of a <em>style.scss </em>file is required for global components only,
            project-level components may ignore it.</p>
                                                    <h3>Behavior</h3>
                                                    <p>The <em>component-name.ts </em>file contains the typescript implementation defined as a
    custom element.</p>
                                                    <p>The component class must element a DOM callback. You can use any callback defined by the <a class="external-link" style="text-decoration: none;" href="https://developer.mozilla.org/en-US/docs/Web/Web_Components" rel="nofollow">Web Components Specification</a>. It is recommended to use <strong>ready </strong>callback.
    This callback is triggered when the component is ready and all other components have already
    been loaded in the DOM. It is the safest approach from the point of view of DOM
    manipulation.
    When the component receives the callback you define, it should execute the behavioral logic.</p>
                                                    <p>In your code, you can use keyword <em>this</em> to access the public API
    of the HTML element associated with the component.</p>
                                                    <p>Typical implementation:</p><pre><code class="language-Javascript line-numbers">
import Component from 'ShopUi/models/component';

export default class ComponentName extends Component {
    protected readyCallback(): void {
        // TODO: your code here
    }
} 
    </code></pre>
                                                    <p>The above example extend the default <strong>Component</strong> model defined in the <em>ShopUi</em>
    application. However, you can extend from any component both on the global and on the project
    level. In this case, your new component will inherit the logic and behavior of the component it
    is derived from. The following example shows a component inherited from the default side-drawer
    component of Spryker Shop:</p><pre><code class="language-Javascript line-numbers">
// Import class SideDrawer
import SideDrawer from 'ShopUi/components/organisms/side-drawer/side-drawer';
 
// Export the extended class
export default class ComponentName extends SideDrawer {
    protected readyCallback(): void {
        // TODO: your code here
    }
}
    </code></pre>
                                                    <h3>Index.ts</h3>
                                                    <p>The <em>index.ts </em>file is required to load the client-side of the component with Webpack.
    The latter globs the system looking for these files and bundles them into an output file.
    Create this file whenever you need to include a style and/or a Typescript/Javascript file as
    part of the component.</p>
                                                    <p style="text-align: left;">To register the component in the DOM,
        you need to use
        the <strong>register</strong> function of the shop application. It
        accepts <strong>2</strong> arguments:<br /></p>
                                                    <ul style="text-align: left;">
                                                        <li value="1"><strong>name</strong> - specifies the component's tag name. This name
        will be associated with the component and can be used in Twig to insert the component into
        a template. Also, it will be used in the DOM as a tag name. Whenever a tag with the
        specified name occurs in the DOM, the Shop Application will load the component.</li>
                                                        <li value="2">
                                                            <p><strong>importer</strong> - must be a call
            of Webpack's <strong>import</strong> function to import
            Typescript code for the component. The call must include a Webpack magic comment that
            specifies which type of import you want for the component, 'lazy' or 'eager'. For
            details, see <a class="external-link" style="text-decoration: none;" href="https://webpack.js.org/guides/code-splitting/#dynamic-imports" rel="nofollow">Dynamic Imports</a>.</p>
                                                        </li>
                                                    </ul>
                                                    <p>Typical implementation:</p><pre><code class="language-Javascript line-numbers">
import './component-name.scss';

// Import the 'register' function from the Shop Application
import register from 'ShopUi/app/registry';
 
// Export the component behavior
export default register(
    'component-name',
    () =&gt; import(/* webpackMode: "lazy" */'./component-name')
);
    </code></pre>
                                                    <p>See <a href="../../resources/pdf/modules_to_components_mapping.pdf">Modules to Components Mapping</a> for description of modules and their components. <br /></p>
                                                    <h1>What's Next</h1>
                                                    <p>The following topics will help you in developing Spryker Atomic Frontend step-by-step:<br /></p>
                                                    <ol>
                                                        <li value="1"><a href="../../tutorials/introduction/customizefrontend/t-customize-spryker-frontend.htm">Tutorial - Customize Spryker Frontend</a>
                                                        </li>
                                                        <li value="2"><a href="../../tutorials/introduction/customizefrontend/t-create-component.htm">Tutorial - Frontend - Create a Component</a>
                                                        </li>
                                                        <li value="3"><a href="../../tutorials/introduction/customizefrontend/t-override-component.htm">Tutorial - Frontend - Override a Component</a>
                                                        </li>
                                                        <li value="4"><a href="../../tutorials/introduction/customizefrontend/t-extend-component.htm">Tutorial - Frontend - Extend a Component</a>
                                                        </li>
                                                        <li value="5"><a href="https://documentation.spryker.com/tutorials/introduction/customizefrontend/t-integrate-jquery.htm">Tutorial - Frontend - Integrate JQuery into Atomic Frontend</a>
                                                        </li>
                                                        <li value="6"><a href="https://documentation.spryker.com/tutorials/introduction/customizefrontend/t-use-component.htm#tutorial---frontend---use-a-component">Tutorial - Frontend - Use a Component</a>
                                                        </li>
                                                    </ol>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div><a class="scroll-top js-scroll-top" href="#"><svg xmlns="http://www.w3.org/2000/svg" width="12" height="16" viewBox="0 0 12 16"><path fill="#FFF" fill-rule="nonzero" d="M11.82 5.22a.54.54 0 0 1 0 .806.636.636 0 0 1-.852 0L6.607 1.937v13.49a.587.587 0 0 1-.602.573c-.336 0-.611-.258-.611-.573V1.937L1.04 6.026a.647.647 0 0 1-.86 0 .54.54 0 0 1 0-.807L5.573.163a.636.636 0 0 1 .852 0L11.82 5.22z" /></svg></a>
                                <script>/* <![CDATA[ */
			function createGithubUrl() {
			var GITHUB_CONTENT_PATH = '/blob/master/public';
			var link = document.querySelector('.js-widget-github-link');
			var href =
			link.getAttribute('href')
			+ GITHUB_CONTENT_PATH
			+ window.location.pathname;
			link.setAttribute('href', href);
			}
			createGithubUrl();
		/* ]]> */</script>
                                <script>/* <![CDATA[ */
			requirejs.config({
				appDir: '',
				paths: {
					'clipboard': ['https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.1/clipboard.min']
					
				}
			});
			require(['clipboard'], function(Clipboard) {
				console.log(Clipboard);
				window.Clipboard = Clipboard;
			});
		/* ]]> */</script>
                                <script src="../../resources/scripts/perfect-scrollbar.js">
                                </script>
                                <script src="../../resources/scripts/imagemapster.js">
                                </script>
                                <script src="../../resources/scripts/script.js">
                                </script>
                                <script src="../../resources/scripts/prism.js">
                                </script>
                            </div>
                        </div>
                    </section><a data-close="true"></a>
                </div>
            </div>
            <script>/* <![CDATA[ */$(document).foundation();/* ]]> */</script>
        </div>
    </body>
</html>
