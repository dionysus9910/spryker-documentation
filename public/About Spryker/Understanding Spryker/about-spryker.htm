<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:conditions="General.Draft" style="">
    <head>
    </head>
    <body>
        <h1>About Spryker</h1>
        <p MadCap:conditions="General.Hidden Comment">New/Draft</p>
        <p>The Spryker Commerce Framework is a PHP based framework for creating sophisticated e-commerce web platforms.
</p>
        <p>This extendable framework is used build business-driven web applications such B2C shops, marketplaces, shopping clubs, B2B platforms and more.
</p>
        <p>Clear growth paths and modularity are the backbones of the Framework’s design and are reflected accordingly in the Framework’s architecture. Each piece of code that represents a granular functionality is published as an entity called a <b>module</b>.  A collection of modules together build functionality. Each module has its own release cycle therefore only when that specific functionality is changed will a newer version be released and in most cases, it will be released as a minor BC release. 
</p>
        <p>With a module based environment you can achieve a high level of modularity by allowing you as a developer to focus entirely on the essential module that you need to set-up your first environment. Then, once you are setup you can grow your functionality piece by piece allowing you to learn and adapt the Framework to your needs as you go.  With our continuous release cycle, you can decide what modules to take and when you want to update versions.
</p>
        <p>Our continuous release environment minimalizes the frequency of major releases and we only release them when there is a BC (backwards compatibility) issue.  In addition, when we release a major version it will come with an estimate that defines the time to implementation which could be a few hours for simple changes and a few days when new functionality is released. In this way, we ensure you have as much information as possible to plan when the best time will be for you to upgrade your module.
</p>
        <p>Another advantage of the module approach is that the entire platform never increments in version only parts of it do, so you can automatically see if a new version is or is not part of your implementation. This way you can focus on making changes only when it is relevant to your environment.
</p>
        <h2>ModuleTypes and Functionality
</h2>
        <p>The Spryker Framework functionality can be divided into four distinct categories; Framework Foundation modules, Functionality modules, Development modules and External Interface modules.
</p>
        <p>The following diagram visualizes the Framework Categories:
</p>
        <p>
            <img src="../../Resources/Images/bundle-types.png" style="width: 699px;height: 585px;" /> </p>
        <p MadCap:conditions="General.Image_Source">source Image:&#160;C:\Users\Deborah Bennun\Documents\Spryker\Documentation\Bundle Distribution.pptx<![CDATA[  
]]></p>
        <p>Each category is a collection of modules, some are unique to the category but most are shared between several categories.
</p>
        <p>The Framework Foundation modules are the essential modules without which there will be no OS. These modules provide the underlining tools, language and communication layers needed to build a scalable and extendable foundation for your project. 
</p>
        <p>The Functionality modules are implemented as a collection of modules where each module represents a different facet of the feature’s functionality.
</p>
        <ul>
            <li>Product Management
</li>
            <li>Customer Management
</li>
            <li>CMS
</li>
            <li>Checkout
</li>
            <li>Order Management
</li>
            <li>Rights Management
</li>
        </ul>
        <p>The rest of the modules are used for the following actions:
</p>
        <ul>
            <li>Development
</li>
            <li>Connectors: To reduce the amount of dependencies in the Framework, connector modules are used to create connections between the different functionalities.
</li>
            <li>External interfaces – These modules hold the code needed to set up connectivity to external services and interfaces.
</li>
        </ul>
        <p class="note">
            <br />This is a simplification of the module structure for introduction purposes and naturally there are dependencies in between the modules themselves to establish inter-connectivity.</p>
        <p>
            <img src="../../Resources/Images/internal-structure.png" title="Click Me" alt="Internal Structure" class="Thumbnail" />
        </p>
        <p MadCap:conditions="General.Image_Source">Image source: https://academy.spryker.com/display/CORE/Architecture+convention+overview</p>
    </body>
</html>