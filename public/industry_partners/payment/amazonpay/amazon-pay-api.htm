<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="_Skins_HTML5___Top_Navigation" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../../" data-mc-has-content-body="True" data-mc-conditions="Spryker.DemoShop,Spryker.B2C" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Technology Partners|Payment|Amazon Pay">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="msapplication-config" content="../../../Skins/Favicons/browserconfig.xml" />
        <link rel="apple-touch-icon" sizes="180x180" href="../../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../../Skins/Favicons/favicon-16x16.png" />
        <meta charset="utf-8" />
        <meta name="description" content="" />
        <meta name="author" content="" /><title>Amazon Pay - API</title>
        <!-- Google Tag Manager -->
        <script>/* <![CDATA[ */(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
			new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
			j=d.createElement(s),dl=l!='dataLayer'?'&amp;l='+l:'';j.async=true;j.src=
			'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
		})(window,document,'script','dataLayer','GTM-NP24S2');/* ]]> */</script>
        <!-- End Google Tag Manager -->
        <script>/* <![CDATA[ */
			var s = document.createElement("script");
			s.type = "text/javascript";
			s.src = "https://www.googletagmanager.com/gtag/js?id==UA-56589105-4";
			document.getElementsByTagName('head').item(0).appendChild(s);
		/* ]]> */</script>
        <script>/* <![CDATA[ */
			window.dataLayer = window.dataLayer || [];
			function gtag(){dataLayer.push(arguments);}
			gtag('js', new Date());
			gtag('config', 'UA-56589105-4');
		/* ]]> */</script>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/stylesheets/foundation.6.2.3.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/stylesheets/styles.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/stylesheets/tablet.css" rel="stylesheet" />
        <link href="../../../Skins/Fluid/stylesheets/mobile.css" rel="stylesheet" />
        <link href="../../../resources/stylesheets/perfect-scrollbar.css" rel="stylesheet" />
        <link href="../../../resources/stylesheets/prism.css" rel="stylesheet" />
        <style>/*&lt;meta /&gt;*/

.button.previous-topic-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/navigate-previous.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.next-topic-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/navigate-next.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.print-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/printer.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.expand-all-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/expand.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.collapse-all-button
{
	-pie-background: url('../../../Skins/Default/Stylesheets/Images/collapse.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.needs-pie
{
	behavior: url('../../../resources/scripts/PIE-no-motw.htc');
}

</style>
        <link href="../../../resources/stylesheets/mainstyles.css" rel="stylesheet" />
        <script src="../../../resources/scripts/custom.modernizr.js">
        </script>
        <script src="../../../resources/scripts/jquery.min.js">
        </script>
        <script src="../../../resources/scripts/require.min.js">
        </script>
        <script src="../../../resources/scripts/require.config.js">
        </script>
        <script src="../../../resources/scripts/foundation.6.2.3_custom.js">
        </script>
        <script src="../../../resources/scripts/plugins.min.js">
        </script>
        <script src="../../../resources/scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-right" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
                    <ul class="off-canvas-drilldown vertical menu off-canvas-list" data-drilldown="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-drilldown-submenu-parent" data-mc-css-tree-node-collapsed="is-drilldown-submenu-parent" data-mc-css-sub-menu="vertical menu slide-in-right is-drilldown-submenu" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="True" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.drilldown" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div data-sticky-container="" class="title-bar-container">
                        <nav class="title-bar tab-bar sticky" data-sticky="" data-options="marginTop:0" style="width:100%" data-sticky-on="small" data-mc-ignore="true">
                            <div class="middle title-bar-section outer-row clearfix">
                                <div class="menu-icon-container relative clearfix">
                                    <button class="menu-icon" data-toggle="offCanvas"><span></span>
                                    </button>
                                </div>
                            </div>
                            <div class="title-bar-layout outer-row">
                                <div class="logo-wrapper"><a class="logo" href="../../../home.htm" alt="Logo"></a>
                                </div>
                                <div class="navigation-wrapper nocontent">
                                    <ul class="navigation clearfix" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                        <li class="placeholder" style="visibility:hidden"><a>placeholder</a>
                                        </li>
                                    </ul>
                                </div>
                                <div class="nav-search-wrapper">
                                    <div class="nav-search row">
                                        <form class="search" action="#">
                                            <div class="search-bar search-bar-container needs-pie">
                                                <input class="search-field needs-pie" type="search" placeholder="Search the Academy" />
                                                <div class="search-filter-wrapper">
                                                    <div class="search-filter">
                                                        <div class="search-filter-content">
                                                            <ul>
                                                                <li>All Files</li>
                                                            </ul>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="search-submit-wrapper" dir="ltr">
                                                    <div class="search-submit" title="Search">
                                                    </div>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </nav>
                    </div>
                    <section class="main-section">
                        <div class="row outer-row sidenav-layout">
                            <div class="sidenav-wrapper">
                                <div class="sidenav-container">
                                    <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                                </div>
                            </div>
                            <div class="body-container" data-mc-content-body="True">
                                <!-- Google Tag Manager (noscript) -->
                                <noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-NP24S2" height="0" width="0" style="display:none;visibility:hidden"></iframe>
                                </noscript>
                                <!-- End Google Tag Manager (noscript) -->
                                <div class="search-container">
                                    <form class="search" action="#">
                                        <div class="search-bar search-bar-container needs-pie _Skins_SearchTopics mc-component">
                                            <input class="search-field needs-pie" type="search" placeholder="Search" />
                                            <div class="search-filter-wrapper">
                                                <div class="search-filter">
                                                    <div class="search-filter-content">
                                                        <ul>
                                                            <li>All Files</li>
                                                        </ul>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="search-submit-wrapper" dir="ltr">
                                                <div class="search-submit" title="Search">
                                                </div>
                                            </div>
                                        </div>
                                    </form>
                                </div>
                                <div class="row collapse">
                                    <div class="top-bar">
                                        <div class="breadcrumbs-block">
                                            <div class="nocontent">
                                                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="3" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">You are here: </span>
                                                </div>
                                            </div>
                                        </div>
                                        <div>
                                        </div>
                                        <form class="search" action="#">
                                            <div class="search-bar search-bar-container needs-pie _Skins_SearchHome mc-component">
                                                <input class="search-field needs-pie" type="search" placeholder="Search" />
                                                <div class="search-filter-wrapper">
                                                    <div class="search-filter">
                                                        <div class="search-filter-content">
                                                            <ul>
                                                                <li>All Files</li>
                                                            </ul>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="search-submit-wrapper" dir="ltr">
                                                    <div class="search-submit" title="Search">
                                                    </div>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                    <div class="topic-layout">
                                        <div>
                                            <div class="side-menu">
                                                <div data-sticky-container="" id="C1ufPYmueEa7uMMocCRslg">
                                                    <div class="sticky sticky-menu" style="width:100%" data-sticky="" data-top-anchor="C1ufPYmueEa7uMMocCRslg:top" data-bottom-anchor="contentBody:bottom" data-sticky-on="small" data-scroll-container-on="small">
                                                        <ul class="nocontent menu _Skins_SideMenu mc-component" data-mc-is-context-sensitive="True" data-mc-linked-toc="Data/Tocs/master.js" data-mc-side-menu="True" data-mc-max-depth="1" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                                        </ul>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div>
                                            <div class="side-menu">
                                                <div class="toolbar-wrapper">
                                                    <div class="widget-github js-widget-github"><a class="widget-github-link js-widget-github-link" href="https://github.com/spryker/spryker-documentation" target="_blank"><svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="0 0 26 26"><path d="M13.5 0C6.057 0 0 6.057 0 13.5c0 5.888 3.791 10.905 9.058 12.745a.463.463 0 0 0 .258.088c1.316.43 2.724.667 4.184.667C20.943 27 27 20.943 27 13.5S20.943 0 13.5 0zm0 .931c6.93 0 12.569 5.639 12.569 12.569 0 5.428-3.459 10.061-8.287 11.818a1.903 1.903 0 0 1-.092-.527v-2.446c0-.975-.477-2.037-.946-2.75 2.584-.436 5.537-1.776 5.537-6.779 0-1.37-.429-2.58-1.275-3.598.186-.611.415-1.9-.225-3.52a.47.47 0 0 0-.291-.272c-.13-.04-1.326-.35-3.806 1.277a12.921 12.921 0 0 0-6.36 0c-2.481-1.63-3.68-1.319-3.809-1.277a.47.47 0 0 0-.29.273C5.582 7.319 5.811 8.607 6 9.218c-.85 1.018-1.279 2.227-1.279 3.598 0 4.957 2.9 6.323 5.463 6.778-.322.407-.66.934-.81 1.47-.661.184-2.018.19-2.929-1.37-.032-.06-.829-1.475-2.4-1.584-.25.002-.882.042-1.035.525-.169.537.424.944.679 1.117l.058.034c.029.015.707.371 1.213 1.644.105.333 1.03 2.84 4.353 2.399.002.367 0 .552-.004.7v.26c0 .15-.045.378-.096.525C4.386 23.558.931 18.924.931 13.5.931 6.57 6.57.931 13.5.931zm6.51 5.375c.5 1.471.158 2.537.035 2.839a.468.468 0 0 0 .089.49c.805.883 1.214 1.952 1.214 3.181 0 4.72-2.796 5.666-5.535 5.97a.464.464 0 0 0-.253.815c.368.314 1.199 1.68 1.199 2.744v2.446c0 .009.001.414.134.809a12.513 12.513 0 0 1-6.792-.002c.135-.396.139-.802.139-.81l.001-.248c.002-.211.006-.497 0-1.266a.473.473 0 0 0-.174-.362.47.47 0 0 0-.391-.09c-3.126.681-3.802-1.576-3.828-1.67l-.016-.047c-.448-1.135-1.037-1.713-1.388-1.975.759.267 1.182 1.007 1.193 1.024 1.231 2.107 3.264 2.162 4.328 1.685a.463.463 0 0 0 .27-.36c.095-.665.826-1.545 1.196-1.87a.464.464 0 0 0 .136-.488.461.461 0 0 0-.39-.324c-2.73-.31-5.524-1.266-5.524-5.98 0-1.228.41-2.3 1.219-3.181a.464.464 0 0 0 .087-.491c-.124-.302-.467-1.364.031-2.837.396.013 1.362.182 2.988 1.286.112.076.256.1.387.063.973-.27 2.058-.416 3.135-.421 1.08.005 2.166.15 3.14.421.131.037.273.013.386-.063 1.635-1.11 2.6-1.275 2.984-1.288z" /></svg></a>
                                                    </div>
                                                    <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolbar mc-component nocontent" style="mc-topic-toolbar-items: PreviousTopic NextTopic Print ExpandAll CollapseAll;">
                                                        <div class="button-group-container-left">
                                                            <button class="button needs-pie previous-topic-button" title="Navigate previous">
                                                                <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="previous topic" />
                                                            </button>
                                                            <button class="button needs-pie next-topic-button" title="Navigate next">
                                                                <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="next topic" />
                                                            </button>
                                                            <button class="button needs-pie print-button" title="Print">
                                                                <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="print" />
                                                            </button>
                                                            <button class="button needs-pie expand-all-button" data-state1-class="expand-all-button" data-state2-class="collapse-all-button" data-state2-title="Collapse all" title="Expand all" data-state1-title="Expand all">
                                                                <img src="../../../Skins/Default/Stylesheets/Images/transparent.gif" alt="expand all" />
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="js-anchorer main-content">
                                                    <h1>Amazon Pay - API <img src="../../../resources/images/shoptype/b2c_shop.png" /> <img src="../../../resources/images/shoptype/demoshop.png" /></h1>
                                                    <p>So far we discussed the client side implementation provided by Amazon Pay. On the Spryker OS side, the module provides tools for rendering Amazon Pay widgets.</p>
                                                    <p>Another part of the implementation is the Amazon Pay API function wrapper, implemented as a Facade.</p>
                                                    <p><strong>Each API call involves similar classes from the module:</strong>
                                                    </p>
                                                    <ul>
                                                        <li class="bullet_list" value="1">An adapter for adapting Amazon SDK that makes the rest of the module independent of the external library;</li>
                                                        <li class="bullet_list" value="2">A converter from Amazon responses to Spryker OS transfer objects;</li>
                                                        <li class="bullet_list" value="3">A logger for logging information about API calls;</li>
                                                        <li class="bullet_list" value="4">A transaction for updating transfer objects.</li>
                                                    </ul>
                                                    <p>Since it is a standard Spryker OS practice, an entry point is a public method of the Facade, so the flow for a typical transaction includes the following steps:</p>
                                                    <div>
                                                        <ol style="list-style-type: lower-alpha;">
                                                            <li value="1">Logically grouping the affected order items, based on the transaction type:
                    <ul><li value="1">for authorize &amp; capture - by <var>AuthorizationReferenceId</var></li><li value="2">for refund &amp; capture status update - by <var>AmazonCaptureId</var></li><li value="3">no grouping is required for <i>close</i> and <i>cancel</i> since operations are performed for the whole order.</li></ul></li>
                                                            <li value="2"><i>The following steps are executed for each group separately</i>
                                                            </li>
                                                            <li value="3">Calling Facade method.</li>
                                                            <li value="4">Facade creates a related transaction handler or a collection of transaction handlers.</li>
                                                            <li value="5">The transaction handler has <b>execute</b> method expecting an <var>AmazonCallTransfer</var> object as a parameter.</li>
                                                            <li value="6">The transaction handler passes a transfer object to the adapter which is responsible for direct communication with the Amazon Pay API.
            Using the provided SDK it converts API responses into transfer objects using converters.
            Apart from adapters and converters, the rest of the code does not know anything about Amazon Pay API details and only works with Spryker OS transfer objects.</li>
                                                            <li value="7">If not all order items, belonging to a logical group, where requested for the update, a new group is created for affected order items.</li>
                                                            <li value="8">The transaction handler returns a modified transfer object. All information related to Amazon Pay is stored into <var>AmazonpayPaymentTransfer</var> transfer object and into the database.</li>
                                                        </ol>
                                                    </div>
                                                    <h2><strong>Additional Information</strong>:</h2>
                                                    <div class="MCDropDown MCDropDown_Closed dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Initializing Quote Transfer Objects</a></span>
                                                        <div class="MCDropDownBody dropDownBody">
                                                            <p>After a user signs in via Amazon Pay, we can make API calls against the order. The first step is to initialize order data and store it to a quote transfer object using the Quote updater classes. These classes work in a similar way to transaction handlers. However, they only retrieve information from Amazon (if necessary) and then save it to a Quote.</p>
                                                            <p><strong>There are three steps for initializing a new order</strong>:</p>
                                                            <div>
                                                                <ol>
                                                                    <li value="1">Retrieve and update buyer information.</li>
                                                                    <li value="2">Create payment transfer objects.</li>
                                                                    <li value="3">Update Shipment.</li>
                                                                </ol>
                                                            </div>
                                                            <p>Only the first step uses an API call while the other two are only about initializing.</p>
                                                            <p>The updater class for retrieving buyer data is called <var>GuestCustomerDataQuoteUpdater</var>. It uses a related adapter called <var>ObtainProfileInformationAdapter</var>, to make an API call and store data into the Quote transfer.</p>
                                                            <p>We have this call instead of taking current user data to create a separation between Spryker and Amazon accounts and enable the ability to make an order without a Spryker account.<br />If a logged in user places an order, the order would be still assigned to him and visible in the Customer area.</p>
                                                        </div>
                                                    </div>
                                                    <div class="MCDropDown MCDropDown_Closed dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Updating Shipment Address and Method</a></span>
                                                        <div class="MCDropDownBody dropDownBody">
                                                            <p>Once a buyer chooses a shipment address from the Address widget, a Javascript callback is triggered.</p>
                                                            <p>We notify the server side that the user has changed their shipping address.</p>
                                                            <p>Then we use the Facade method <var>addSelectedAddressToQuote</var> to return the updated quote object and save the updated quote.</p>
                                                            <p>Now the quote contains updated address information and it's possible to retrieve available shipment methods.</p>
                                                            <p>The Spryker OS provides a Shipment module and uses method <var>getAvailableMethods()</var> to retrieve the shipment methods list and send it back to the customer.</p>
                                                            <p>Once shipping options are updated a buyer can choose one. Usually, shipment methods affect the total price of the order and it must be recalculated using the Calculation module.
                </p>
                                                        </div>
                                                    </div>
                                                    <div class="MCDropDown MCDropDown_Closed dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Placing an Order</a></span>
                                                        <div class="MCDropDownBody dropDownBody">
                                                            <p>Once all necessary information is saved into Quote, an order is ready to be placed.</p>
                                                            <p>First, perform all related API calls and then persist an order in the database.</p>
                                                            <p>All API related jobs are covered by only one Facade method <var>confirmPurchase()</var> which encapsulates five Amazon Pay API calls to be executed one after another:</p>
                                                            <div>
                                                                <ol>
                                                                    <li value="1"><var>SetOrderReferenceDetails</var> for specifying order total amount</li>
                                                                    <li value="2"><var>ConfirmOrderReference</var> for confirming the order</li>
                                                                    <li value="3"><var>GetOrderReferenceDetails</var> for retrieving information about buyer (like name and shipping address)</li>
                                                                    <li value="4"><var>AuthorizeOrderTransaction</var> for authorizing and capturing a payment and decline handling if something goes wrong.</li>
                                                                    <li value="5"><var>CancelPreOrderTransaction</var> for canceling the order. It should be done in some cases of declined authorization.</li>
                                                                </ol>
                                                            </div>
                                                            <p>Each API call is handled by a transaction handler object. In order to call more than one transaction, the module provides <var>TransactionSequence</var> class. <var>TransactionSequence</var> encapsulates an array of transaction objects. A developer can easily replace single transaction with sequence or replace transaction objects within transaction sequence objects.</p>
                                                            <p>Here is an example of an execute method for the collection:</p><pre><code class="language-php line-numbers">foreach ($this-&gt;transactionHandlers as $transactionHandler) {
    $amazonpayCallTransfer = $transactionHandler-&gt;execute($amazonpayCallTransfer);

    if ($amazonpayCallTransfer-&gt;getAmazonpayPayment()-&gt;getResponseHeader() &amp;&amp;
        !$amazonpayCallTransfer-&gt;getAmazonpayPayment()-&gt;getResponseHeader()-&gt;getIsSuccess()) {
        break;
    }
}

return $amazonpayCallTransfer;</code></pre>
                                                            <p>Once a transaction is finished successfully, we pass the updated quote transfer to the next transaction. If the transaction fails, we return the current one and it contains all information about an error.</p>
                                                        </div>
                                                    </div>
                                                    <div class="MCDropDown MCDropDown_Closed dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Authorization in Asynchronous and Synchronous Modes. CaptureNow Setting</a></span>
                                                        <div class="MCDropDownBody dropDownBody">
                                                            <p>The authorization API call is configurable and it reflects the whole payment process.</p>
                                                            <p>The first important setting is the <var>transaction_timeout</var> that defines the maximum number of minutes allocated for the Authorize operation call to be processed, after which the authorization is automatically declined and you cannot capture funds against the authorization. </p>
                                                            <p>Zero value means that authorization result has to be returned immediately and it is synchronous authorization. For the asynchronous authorization, the value must be above zero but less than maximum possible 1440.</p>
                                                            <p> Another important setting is <var>CaptureNow</var>. It can only be true or false and if set to true then both requests - Authorization and Capture will be done in one step, within Authorize API call.</p>
                                                        </div>
                                                    </div>
                                                    <div class="MCDropDown MCDropDown_Closed dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Handling Declined payments - Synchronous Workflow</a></span>
                                                        <div class="MCDropDownBody dropDownBody">
                                                            <p>Amazon Pay documentation defines a workflow which has to be implemented on a merchant side.</p>
                                                            <p><a class="MCPopupThumbnailLink MCPopupThumbnailPopup" href="../../../resources/images/amazonpay/diagram_authorize_synchronous_capturenowfalse._v532314558_.svg" data-mc-popup-alt="Handling Declined Payments"><img class="MCPopupThumbnail img imgThumbnail" data-mc-width="1420" data-mc-height="1520" src="../../../resources/images/amazonpay/diagram_authorize_synchronous_capturenowfalse._v532314558__thumb_0_48.png" alt="Handling Declined Payments" title="Click Me" tabindex="" /></a>
                                                            </p>
                                                            <p>In some cases, declined payment involves additional API calls. This is why there is an additional transaction collection called <var>HandleDeclinedOrderTransaction</var>. This call goes after the Authorization step and encapsulates two transaction objects:</p>
                                                            <p><var>GetOrderReferenceDetailsTransaction</var> which was used previously and <var>CancelOrderTransaction</var>. </p>
                                                            <p>When all previous steps return a positive response and authorization is accepted it returns transfer object without any modifications. If payment is declined because of wrong payment method - there's nothing to do on a server side.</p>
                                                            <p>If the reason is different, we can check the state of an order using <var>GetOrderReferenceDetailsTransaction</var>.</p>
                                                            <p>If it is open, then the order must be canceled with a <var>CancelOrderTransaction</var> call.</p>
                                                            <p>The rest of decline flow includes logic determining where to redirect a buyer. In sandbox mode, for each test account, Amazon provides fake payment methods for emulating error API responses.</p>
                                                            <p class="important">Even if a response has status code 200 it still may contain Constraint(s) in the response body.</p>
                                                            <p>There is one special constraint related to selected payment method <var>PaymentMethodNotAllowed</var>. If it occurs (rarely) the buyer should be redirected to the same page with address and payment widgets and be able to choose a different payment method and all other order parameters as well.</p>
                                                        </div>
                                                    </div>
                                                    <div class="MCDropDown MCDropDown_Closed dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Handling Declined Payments - Asynchronous Workflow</a></span>
                                                        <div class="MCDropDownBody dropDownBody">
                                                            <p>Unlike synchronous authorization it is impossible to get the result of authorization in the response. Authorization objects stay in Pending state until authorized. Capture and Refund requests can also be processed in the same way and Amazon provides Internet Payment Notification (IPN) in order to notify the shop about the new status of any asynchronous request. IPN message is an HTTP request with some special Amazon-related headers and the body which is an XML string containing all data. The merchant has to specify URL for receiving and processing IPN messages. </p>
                                                            <p>The module provides two Facade's methods:</p>
                                                            <ul>
                                                                <li value="1"><var>convertAmazonPayIpnRequest(array $headers, $body)</var> for converting an Amazon request (which is HTTP headers and body) to the transfer object. For each type of IPN request, we provide a related transfer object and method. <var>convertAmazonPayIpnRequest()</var> returns one of them. </li>
                                                                <li value="2"><var>handleAmazonPayIpnRequest(AbstractTransfer $ipnRequestTransfer)</var> should be called. It has <var>AbstractTransfer</var> type for its argument and it works with all types of IPN related transfer objects. A typical flow of a successful flow usually involves pending statuses of authorization and capture requests.</li>
                                                            </ul>
                                                            <p>Therefore, related IPN messages have to be received and processed correctly. For retrieving the same information Amazon also provides <var>GetAuthorizationDetails</var> and <var>GetCaptureDetails</var> functions and in Spryker OS it is possible to update the pending statuses with State machine buttons. Once the button is clicked, the shop makes a related API call, receives a response and if the state is not pending then it updates order status according to the response message. The final status of a success flow is "capture completed". After that only Refund is available and refund workflow is asynchronous only and works in a similar way as asynchronous authorization.</p>
                                                            <p>The more tricky case is authorization declined workflow. It is similar to synchronous decline which was described above but everything goes asynchronously and involves additional IPN messages. First of all, Authorization IPN comes with "Declined" state of authorization status. Another important information here is <strong>ReasonCode</strong> and it affects all further steps of the process. For the reason codes <var>TransactionTimedOut</var> and <var>AmazonRejected</var> the order simply goes to <var>authorization declined</var> state but for the <var>InvalidPaymentMethod</var> the customer has to change the payment method to the correct one. In this case, order receives <var>authorization suspended</var> status and Amazon sends two additional IPN messages: <var>OrderNotification</var> with the state "Open" comes in after payment method is changed by buyer and Authorization notification as a result of authorization of a new payment method. If new payment method passes authorization successfully then order goes to the <var>auth open</var> state and it is possible to request a capture. In both decline cases, it is important to notify the buyer about it by email since it's the only one way for him to know that payment is not possible. The text of the email letter has to be different for <var>InvalidPaymentMethod</var> case.</p>
                                                            <p>Another tricky moment about asynchronous flow is "Authorization expired" situation. Each time the shop requests capture in asynchronous mode, it should check the current status of an authorization. Capture is only possible when the status of authorization is "Open". If authorization has status <var>Closed</var> and <var>ReasonCode</var> is either <var>ExpiredUnused</var> or <var>SellerClosed</var> then an order should be reauthorized with <var>CaptureNow</var> setting enabled.</p>
                                                            <p>&#160;</p>
                                                        </div>
                                                    </div>
                                                    <p><b>See also:</b>
                                                    </p>
                                                    <ul>
                                                        <li value="1"><a href="amazon-pay.htm"><li value="1">Get a general idea about Amazon Pay
            </li></a>
                                                        </li>
                                                        <li value="2"><a href="amazon-pay-configuration-demoshop.htm">Configure Amazon Pay</a><![CDATA[
            ]]></li>
                                                        <li value="3"><a href="amazon-pay-order-ref-info.htm">Obtaining Amazon Order Reference and Shipping Addresses details
            
</a>
                                                        </li>
                                                        <li value="4"><a href="amazon-pay-refund.htm">Learn how Amazon Pay Refund works
            
</a>
                                                        </li>
                                                        <li value="5"><a href="amazon-pay-rendering-pay.htm">Rendering the "Pay with Amazon" button on the Cart page
            
</a>
                                                        </li>
                                                        <li value="6"><a href="amazon-pay-simulations.htm">Learn how Amazon Pay Sandbox Simulations work
            
</a>
                                                        </li>
                                                        <li value="7"><a href="amazon-pay-state-machine.htm">Learn about Amazon Pay state machine for synchronous and asynchronous flows
            
</a><![CDATA[            ]]></li>
                                                        <li value="8"><a href="amazon-pay-email-notification.htm">Check out Amazon Pay example email notifications</a><![CDATA[
            ]]></li>
                                                        <li value="9"><a href="amazon-pay-support-bundled-products.htm">Check
				support of bundled products with Amazon</a>
                                                        </li>
                                                    </ul>
                                                    <p>&#160;</p>
                                                    <p><i>Last review date: Oct 17th, 2018 </i>
                                                    </p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div><a class="scroll-top js-scroll-top" href="#"><svg xmlns="http://www.w3.org/2000/svg" width="12" height="16" viewBox="0 0 12 16"><path fill="#FFF" fill-rule="nonzero" d="M11.82 5.22a.54.54 0 0 1 0 .806.636.636 0 0 1-.852 0L6.607 1.937v13.49a.587.587 0 0 1-.602.573c-.336 0-.611-.258-.611-.573V1.937L1.04 6.026a.647.647 0 0 1-.86 0 .54.54 0 0 1 0-.807L5.573.163a.636.636 0 0 1 .852 0L11.82 5.22z" /></svg></a>
                                <script>/* <![CDATA[ */
			function createGithubUrl() {
			var GITHUB_CONTENT_PATH = '/blob/master/public';
			var link = document.querySelector('.js-widget-github-link');
			var href =
			link.getAttribute('href')
			+ GITHUB_CONTENT_PATH
			+ window.location.pathname;
			link.setAttribute('href', href);
			}
			createGithubUrl();
		/* ]]> */</script>
                                <script>/* <![CDATA[ */
			requirejs.config({
				appDir: '',
				paths: {
					'clipboard': ['https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.1/clipboard.min']
					
				}
			});
			require(['clipboard'], function(Clipboard) {
				console.log(Clipboard);
				window.Clipboard = Clipboard;
			});
		/* ]]> */</script>
                                <script src="../../../resources/scripts/perfect-scrollbar.js">
                                </script>
                                <script src="../../../resources/scripts/imagemapster.js">
                                </script>
                                <script src="../../../resources/scripts/script.js">
                                </script>
                                <script src="../../../resources/scripts/prism.js">
                                </script>
                            </div>
                        </div>
                    </section><a data-close="true"></a>
                </div>
            </div>
            <script>/* <![CDATA[ */$(document).foundation();/* ]]> */</script>
        </div>
    </body>
</html>
