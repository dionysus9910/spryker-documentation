define({"346":{i:0.000663636114423444,u:"../administration_interface_guide/category.htm",a:"This tutorial provides step-by-step instructions on Spryker Commerce OS category creation and management. It provides information about ordering of categories and product assignment. ",t:"Category"},"347":{i:0.00254383381165791,u:"../administration_interface_guide/discount.htm",a:"Learn how to create two discount types - vouchers and cart rules. Generate codes to be redeemed by the customers as vouchers when entered in shopping cart. Use queries to create cart rules which are applied automatically when the conditions specified by the queries are fullfiled. Queries can be created using by an in-built tool - Query builder. Also, it is possible to specify the discount validity interval. ",t:"Discount | Spryker"},"348":{i:0.00254383381165791,u:"../administration_interface_guide/navigation.htm",a:"To open this page, go to Navigation. Spryker\u0027s Navigation allows to create complex navigation elements with cms pages, categories, and any other relevant links. You can even group certain items together into secondary menus and customise their look and feel. With the Navigation you can build and ...",t:"Navigation"},"349":{i:0.000381589984965369,u:"../administration_interface_guide/shipment.htm",a:"The carrier companies that you want to have integrated in the shop can be configured from the Zed Admin UI. For each carrier company you can add one or more shipment methods that you want to enable in the shop. A carrier company refers to a company that provides shipment services (e.g.: ...",t:"Shipment"},"350":{i:0.00231060886695574,u:"../administration_interface_guide/dashboard.htm",a:"The dashboard provides an overview of basic order-related statistics. This page presents you with a summary of order counts, order statuses, top products.",t:"Dashboard | Spryker"},"351":{i:0.00049391171933103,u:"../shop_user_guide/about-shop-guide.htm",a:"In this section you will find the instructions and guidelines on working with Demo Shop interface. Our main goal is to make user\u0027s interaction as simple, intuitive and efficient as possible. It has been proven that easy and understandable interface dramatically impacts the performance and leads to ...",t:"About Shop User Guide"},"352":{i:0.000346604489353183,u:"../shop_user_guide/searching-within-cms-pages.htm",a:"For the CMS pages in search results feature, the following details are provided: sorting options the number of results pagination Sorting by Relevance and Name For the convenience of shop visitors, they can easily change the way the search results of the CMS pages list will be displayed. For this, ...",t:"Searching within CMS Pages"},"353":{i:0.00231060886695574,u:"../shop_user_guide/quick-order-shop-guide.htm",a:"Shop Guide - Quick Order  Quick Order page allows your customers to quickly find and buy products in just a few clicks. Use this page to create orders quickly and efficiently. To open Quick Order Page, go to the header of the shop application -\u003e Quick Order. Here you can: Create a Quick Order Add ...",t:"Shop Guide - Quick Order | Spryker"},"354":{i:0.00231060886695574,u:"../shop_user_guide/business-on-behalf-shop-guide.htm",a:"Shop Guide - Business on Behalf  Your Business Unit page allows your customers to select company user account they are logged in. To open Your Business Unit page, go to Customer Account -\u003e Your Business Unit. Here you can: Select a company user to log in on behalf Graphic User Interface The Your ...",t:"Shop Guide - Business on Behalf | Spryker"},"355":{i:0.000346604489353183,u:"../shop_user_guide/checkout/checkout-shop-guide.htm",a:" ML Multi-language MS Multi-store MC Multi-currency Checkout is a multistep process that a buyer has to go through to check the products out in the cart and make an order.  Every buyer can select a cart they want to check out. To create a shopping cart, follow the guideline. A typical checkout ...",t:"Shop Guide - Checkout"},"356":{i:0.00215559184933485,u:"../shop_user_guide/checkout/delivery-address-step-shop-guide.htm",a:"Shop Guide - Delivery Address Step  ML Multi-language MS Multi-store MC Multi-currency Address step allows customers to fill or select the billing and shipping addresses. To open Address step during the Checkout, click Checkout in the corresponding shopping cart. Here you can: Create a new delivery ...",t:"Shop Guide - Delivery Address Step | Spryker"},"357":{i:0.00289114319972898,u:"../shop_user_guide/checkout/shipping-step-shop-guide.htm",a:"Shop Guide - Shipping Step  ML Multi-language MS Multi-store MC Multi-currency To open the Shipping step, you need to complete the  Delivery Address step . The Shipping step allows a customer to select the best option for shipping the order. Here you can: Select the appropriate shipping method ...",t:"Shop Guide - Shipping Step | Spryker"},"358":{i:0.00173066756777668,u:"../shop_user_guide/checkout/payment-step-shop-guide.htm",a:"Shop Guide - Payment Step  ML Multi-language MS Multi-store MC Multi-currency To open the Payment step, you need to complete the  Shipping step . The Payment step allows a customer to pay for the order. Here you can: Select the appropriate payment method Graphic User Interface The Payment page in ...",t:"Shop Guide - Payment Step | Spryker"},"359":{i:0.00115580945473624,u:"../shop_user_guide/checkout/confirmation-step-shop-guide.htm",a:"Shop Guide - Confirmation Step  ML Multi-language MS Multi-store MC Multi-currency To open the Confirmation step, you need to complete the  Payment step . The Confirmation step allows a customer to re-check the order information and confirm the order. Here you can: Confirm and submit the order ...",t:"Shop Guide - Confirmation Step | Spryker"},"360":{i:0.000346604489353183,u:"../developer-guide.htm",a:"In this section, you will find information on how to build the back-end side of your project. It covers such topics as installation, architecture concepts, database schema, API, search design, and maintenance.  Academy Navigation To navigate through content, click on an option from the right-hand ...",t:"Developer Guide"},"361":{i:0.000395706899345799,u:"../dev-getting-started.htm",a:"Developer Getting Started Guide Welcome to the Spryker Commerce OS getting started guide.  We structured this page to be a step-by-step checklist that you will be able to follow you through all the stages of working with Spryker. Step 1: Install Spryker Typical Spryker installation include ...",t:"Getting Started"},"362":{i:0.000346604489353183,u:"../installation/about-installation.htm",a:"Welcome to the installation area. Here you will find all the information you need to install the Spryker Commerce OS according to your needs. Check out the  Developer Getting Started Guide  for information regarding the installation process. There you will find information about choosing the right ...",t:"About Installation"},"363":{i:0.00248746169992706,u:"../installation/debugging/debugging-setup.htm",a:"Used to be: http://spryker.github.io/getting-started/installation/debugging-setup/ This article describes how to setup debugging in your development environment.  To configure debugging for old version of the VM prior 91,  click here . \n\nInstalling the Xdebug Module To install Xdebug run: sudo -i ...",t:"Debugging Setup"},"364":{i:0.00246109009691818,u:"../installation/debugging/debugging-setup-prior-vm91.htm",a:"To configure debugging for the current VM,  click here . This article describes how to setup debugging in your development environment for VM prior verion 91.\n\n Install Xdebug module\n If you donâ€™t have the file /etc/php5/mods-available/xdebug.ini then you might be missing the Xdebug module on the ...",t:"Debugging Setup for VM Prior Version 91"},"365":{i:0.000935736095267661,u:"../installation/composer.htm",a:"Spryker Commerce OS uses  Composer  as a dependency manager. Composer allows declaring the libraries your project depends on and the versions required as well as it will manage them for you. Composer is downloaded as composer.phar file (PHP archive). To start using Composer in your project, all you ...",t:"Composer"},"366":{i:0.000395706899345799,u:"../installation/configure-database-server.htm",a:"Used to be: http://spryker.github.io/getting-started/installation/database-configuration/ This article describes how you can change your database server.\n\n Spryker offers support for using MySQL or PostgreSQL as database servers. By default, the virtual machine is configured to use the PostgreSQL ...",t:"Configuring the Database Server"},"367":{i:0.00228710098201423,u:"../installation/installation-guide-b2b.htm",a:" To install the Demo Shop for B2B implementations, follow the steps below: Mac OS or Linux, with Development Virtual Machine 1. Install Prerequisites To set up your environment, install the following prerequisites: Git VirtualBox 5.2.2+ Vagrant 2.0.0+ vagrant-vbguest and vagrant-hostmanager ...",t:"B2B Demo Shop Installation Guide "},"368":{i:0.00228710098201423,u:"../installation/installation-guide-b2c.htm",a:" To install the Demo Shop for B2C implementations, follow the steps below: Mac OS or Linux, with Development Virtual Machine 1. Install Prerequisites To set up your environment, install the following prerequisites: Git VirtualBox 5.2.2+ Vagrant 2.0.0+ vagrant-vbguest and vagrant-hostmanager ...",t:"B2C Demo Shop Installation Guide "},"369":{i:0.00173634879068377,u:"../installation/installation-guide-chose-modules.htm",a:" Spryker allows you to change the modules included in a project at your will. You can add, remove, upgrade etc the modules a project consists of or even build a unique set of modules that suits specifically your needs. To do so: Start with an existing Spryker, such as the B2C, B2B boilerplates or ...",t:"Installing Spryker with Custom Set of Modules  "},"370":{i:0.00148541832936094,u:"../installation/installation-guide-legacy-demoshop.htm",a:" To install the Legacy Demoshop, use the following instructions: All customers using the Legacy Demoshop can make their project compatible with the new Spryker Commerce OS architecture available starting from the  November release . For details, see  Updating the Legacy Demoshop with SCOS . Mac OS ...",t:"Legacy Demoshop Installation Guide "},"371":{i:0.000346604489353183,u:"../installation/redis-configruation-201903.htm",a:"Learn about Redis configuration in Spryker. The article contains the standart configuration, advanced configuration for Redis key-value storage and session storage. ",t:"Redis Configuration | Spryker"},"372":{i:0.000443757131119971,u:"../installation/system-requirements.htm",a:"System Requirements Last review date: November 5th, 2018",t:"System Requirements"},"373":{i:0.0025450396034543,u:"../installation/troubleshooting.htm",a:" Click on an issue to see how to troubleshoot. Error on box image download If you get an error on downloading Spryker VM box image file, try running Vagrant with debug to see potential errors: vagrant up --debug. Also, you can go to  Spryker VM Releases  page and download the box manually. After ...",t:"Troubleshooting    "},"374":{i:0.000346604489353183,u:"../architecture_concepts/architecture-concepts.htm",a:"The following topics One of the main tasks of a commerce platform is the possibility to customize, extend and integrate it with external services, such as payment providers, order processors and the like. To provide clear path for Spryker Commerce OS development and extension, its architecture is ...",t:"Spryker Architecture Concepts"},"375":{i:0.00189688296287352,u:"../architecture_concepts/commerce-os-and-frontend-apps.htm",a:"User front-ends are not anymore the same as we used to have 10 years ago. We used to have our desktop displays as the main front-end for different applications, so applications were designed for that desktop display only. In the last few years, many new different front-ends have been evolving ...",t:"Commerce OS and Frontend Apps"},"376":{i:0.000346604489353183,u:"../architecture_concepts/concept-overview.htm",a:"Spryker is a Commerce Operating System composed of the following applications: Storefront (Yves), Backoffice (Zed), Storefront API (Glue).\n\n Storefront -\tFront-end-presentation layer for customers, provided by Yves Application Layer based on the  Symfony Components .\n Backoffice - an application ...",t:"Conceptual Overview"},"377":{i:0.0017083025357541,u:"../architecture_concepts/modularity-and-shop-suite.htm",a:"Everything built in Spryker is modular. Modular means that every shop functionality is built inside an independent software package. We call these software packages: modules. Every module in Spryker is a single functional unit that is responsible for only one thing. For instance, Spryker has a ...",t:"Modularity and Shop Suite"},"378":{i:0.0017083025357541,u:"../architecture_concepts/programming-concepts.htm",a:"After covering the main architectural concepts of the Sprykerâ€™s Commerce OS, front-end, modularity, and the application and software layers, we will dive deeper inside these approaches and explain the main software and coding concepts in Spryker. There are the 7 main software concepts in Spryker. ...",t:"Programming Concepts"},"379":{i:0.00232402153517723,u:"../architecture_concepts/publish_and_synchronization/publish-and-synchronization.htm",a:"Spryker implements a two-step process, called Publish and Synchronize. First, the data is published. Then, it is synchronized to Redis and Elasticsearch.",t:"Publish and Synchronization | Spryker"},"380":{i:0.00194686068093839,u:"../architecture_concepts/publish_and_synchronization/publish-and-synchronization-repeated-process.htm",a:"Automatic execution of Publish \u0026 Synchronize process does not always resolve all your tasks, as sometimes you might need to trigger some commands manually.",t:"Publish and Synchronize Repeated Export | Spryker"},"381":{i:0.000346604489353183,u:"../architecture_concepts/technology-stack.htm",a:"Spryker is an e-commerce Commerce OS developed in PHP, that promotes SOLID principles and clean code. Itâ€™s purpose is to facilitate rapid development in building a customized solution for an e-commerce business.\n\n Technologies Used\n Spryker uses a set of well known tools:\n\n Redis Redis is the most ...",t:"Technology Stack"},"382":{i:0.000346604489353183,u:"../running-reverting-db-migration.htm",a:"Database migration allows you to update your database with the last changes.",t:"Running and Reverting a Database Migration | Spryker"},"383":{i:0.000346604489353183,u:"../database_schema_guide/database-schema-guide.htm",a:"This section outlines the database schema in the Spryker Commerce OS. A schema contains schema objects, which could be tables, columns, data types, relationships, primary keys, foreign keys, etc. A database schema can be represented in a visual diagram, which shows the database objects and their ...",t:"Database Schema Guide"},"384":{i:0.000945777473388874,u:"../database_schema_guide/db-schema-catalog.htm",a:"Products Abstract and Concrete Products Spryker\u0027s product catalog is divided into Abstract Products that contain all common Attributes and Variants (~ Concrete Products). The Attributes which make the difference among the Variants are called Super-Attributes (e.g. Size of T-Shirts). Product ...",t:"Catalog Schema"},"385":{i:0.000367648379350018,u:"../database_schema_guide/db-schema-cms.htm",a:"CMS Glossary Every textual information can be provided in multiple languages. Languages are identified by a locale. For instance, the locale de_DE means \"German language in Germany\" which is different from de_CH \"German language in Switzerland\". The Glossary is used for the translation of all ...",t:"CMS Schema"},"386":{i:0.000367648379350018,u:"../database_schema_guide/db-schema-company-account.htm",a:"Company Company and Business Units Companies can contain many business units, which are made up of one or more company users. By providing this structure customer (buyers) on a Spryker system may accurately model their purchasing processes according to their real company structure. Structure: ...",t:"Company Account Schema"},"387":{i:0.000367648379350018,u:"../database_schema_guide/db-schema-customer-lists.htm",a:"Customer Lists Shopping List Company users use shopping lists to prepare and manage orders that they do regularly. For example, a restaurant can prepare lists for their regular orders of meat, vegetables, and drinks. These lists can be merged into one cart, adjusted and checked out by the chef on a ...",t:"Customer Lists Schema"},"388":{i:0.000367648379350018,u:"../database_schema_guide/db-schema-customer.htm",a:"Customer Schema Customer with Addresses Customers can register themselves directly or during the checkout. They can log in and log out to the shop and use the password forgotten mechanism. Structure: Customer: Here we save the basic information like the name and the preferred locale. ...",t:"Customer Schema"},"389":{i:0.000367648379350018,u:"../database_schema_guide/db-schema-discounts.htm",a:"Discounts Overview Discounts are applied during the checkout either manually by the customer via Voucher code or automatically as Cart Rule. In both cases, the discount can have a fixed or a percentage value which is applied for all items or a subset that can be defined with a query string (e.g. ...",t:"Discounts Schema"},"390":{i:0.000367648379350018,u:"../database_schema_guide/db-schema-gift-cards.htm",a:"Gift Cards Gift Card Code Enable your customers to buy gift cards with flexible amounts of money and to give it to friends as a gift. They can apply it like a voucher code during checkout and pay their whole orders or a part of it. Gift cards are not Discounts! Structure: A Gift Card has a name and ...",t:"Gift Cards Schema"},"391":{i:0.000367648379350018,u:"../database_schema_guide/db-schema-marketplace.htm",a:"Merchant Merchant and Merchant Relationships A Merchant is someone who sells Products on a Marketplace. Merchants sometimes have special agreements with their customers. This agreement is represented as Merchant Relationship in Spryker. This feature is being developed. Structure: A Merchant is ...",t:"Marketplace Schema"},"392":{i:0.000367648379350018,u:"../database_schema_guide/db-schema-navigation.htm",a:"Navigation Navigation Overview Every shop can have several independent navigation trees. For instance, there can be the main navigation that contains links to category pages or content pages. The main difference to Categories is that a Category Tree represents a hierarchical structure for the ...",t:"Navigation Schema"},"393":{i:0.000680150194647217,u:"../database_schema_guide/db-schema-sales.htm",a:"Orders Sales Order with Items Spryker saves orders with line items. There are three general approaches: There is one Sales Order Item for every sold product to the Sales Order. Even when the same product was sold several times. This way we can have a clear state per item. All data that is necessary ...",t:"Sales Schema"},"394":{i:0.000367648379350018,u:"../database_schema_guide/db-schema-shipment.htm",a:"Shipment Shipment carriers, method and price The customer can select a shipment method and a related carrier during the checkout. Each shipment method has a dedicated price and tax set. Structure: A Shipment Method has a name (e.g. \"Express\") and a Carrier (e.g. \"DHL\") Each Shipment Method has a ...",t:"Shipment Schema"},"395":{i:0.000367648379350018,u:"../database_schema_guide/db-schema-tax.htm",a:"Tax Tax Set and Rate Each product can be related to a tax set which contains the tax rates for each destination country. Structure: A Tax Set has a name (e.g. \"Food\") It represents a group of products which have the same tax rates The Rate (e.g. 19%) is stored in spy_tax_rate. There is one Rate per ...",t:"Tax Schema"},"396":{i:0.000367648379350018,u:"../database_schema_guide/db-schema-url.htm",a:"URL URLs Yves knows two types of URLs (see YvesBootstrap-\u003eregisterRouters()). URLs that are defined in the database (e.g. for Product Detail, CMS or Category Pages). URLs that are defined in the code (e.g. for Cart and Checkout). Structure: All URLs which are in the first category are stored in ...",t:"URL Schema"},"397":{i:0.000367648379350018,u:"../database_schema_guide/db-schema-zed-administration.htm",a:"Zed Administration Zed Users and ACL There can be multiple admin users with roles and permissions. Structure: Users belong to Groups (e.g. \"Operation Manager\"). Groups have Roles (e.g. \"Manage Orders\"). Roles have Rules which define what the Role is allowed or disallowed to do. A Rule is a URL. type ...",t:"Zed Administration Schema"},"398":{i:0.000346604489353183,u:"../guidelines/developer-guidelines.htm",a:"Developer Guidelines The developer Guidelines section is a collection of best practices and guidelines for developers.  Â ",t:"Developer Guidelines"},"399":{i:0.000346604489353183,u:"../guidelines/code-architecture-guide.htm",a:"We use our  Architecture Sniffer Tool  to assert a certain quality of Spryker architecture for both core and project.\n Running the Tool The sniffer can find a lot of violations and will report them: $ vendor/bin/console code:sniff:architecture\n\n// Sniff a specific subfolder of your project - with ...",t:"Code Architecture Guide"},"400":{i:0.000346604489353183,u:"../guidelines/code-quality.htm",a:"Spryker Commerce OSâ€™s code base receives very high scores in terms of quality measures, indicating significantly higher code quality than many other ecommerce solutions.\n \nCode Quality Spryker, PHPmetrics.org score in score points (x out of 100)\n\n The Results\n Maintainability: keeping code \u0026 ...",t:"Code Quality"},"401":{i:0.000346604489353183,u:"../guidelines/code_style_guide.htm",a:"We follow the  PSR-2 standards . To achieve a styled codebase, we integrated the well known  PHP-CS Fixer  and  PHPCodeSniffer .\n Code Sniffer and Fixer \nWe use a very powerful tool to help keeping the code clean and preventing simple mistakes. Automate Code Style Correction The sniffer can find all ...",t:"Code Style Guide"},"402":{i:0.000346604489353183,u:"../guidelines/coding-best-practices.htm",a:"\n            In this article we outline a few common PHP coding problems and the recommended solutions.\n         Merging Arrays \n            When merging arrays, one usually uses array_merge($defaults, $options).\n            However, when working with associative arrays (keys are all string ...",t:"Coding Best Practices"},"403":{i:0.000346604489353183,u:"../guidelines/guidelines-for-new-gdpr-rules.htm",a:"As of May, the 25th 2018 the new General Data Protection Regulations (GDPR) will take effect. This information describes the ways that the Spryker Commerce OS supports regulatory compliance with the GDPR. GDPR contains rules relating to the protection and control of personal data.  For more ...",t:"Guidelines for New GDPR Rules"},"404":{i:0.000346604489353183,u:"../guidelines/major-minor-patch-release.htm",a:"What is a release? A Pull Request can ship a new Feature, Improvements to existing features and Bugfixes. A PR contains one or multiple modules. Each module can be a major, minor or patch release. It is very important to understand, that Patch Release and Bugfix are not the same. A Bugfix can be ...",t:"Major vs. Minor vs. Patch Release"},"405":{i:0.000346604489353183,u:"../guidelines/performance-guidelines.htm",a:"Spryker is a fast application by design. This guideline explains how to optimize the server-side execution time. Hosting Recommendations CPU: Spryker\u0027s execution time depends on the CPU of the server. In general, we can say that more CPU capacity supports faster response times and allows a higher ...",t:"Performance Guidelines"},"406":{i:0.000346604489353183,u:"../guidelines/secure-coding-practices.htm",a:"Unsafe coding practices can make the software application vulnerable to theft of sensitive data.\n\nIn this article, weâ€™ll present a series of coding practices that we recommend using when developing an e-commerce application using Spryker Commerce OS, that will keep your software solution secured.\n\n ...",t:"Secure Coding Practices"},"407":{i:0.000346604489353183,u:"../guidelines/testing-concepts.htm",a:"Testing your project is one of the best ways to ensure that your software functions as it is supposed to. The role of testing is to find bugs during the early stages of development to minimize risks. QA is the process of assuring quality, not just verifying you will not get an error on some page. ...",t:"Testing Concepts"},"408":{i:0.000346604489353183,u:"../zed/zed.htm",a:"In this section you will find the following content: Business Layer: Business Layer Business Models Custom Exceptions Â  Communication Layer: Controllers and Actions Persistence Layer Database Schema Definition Entity Persistence Layer Entity Manager Repository Query Container Query Objects",t:"Back-End Zed"},"409":{i:0.000373387622076428,u:"../zed/business_layer/business-layer.htm",a:"Zedâ€™s business layer is responsible for the entire business logic.  Most classes exist in this layer and this is the primary area for development.  The business layer is used by the communication layer and by other bundles. Here you know how to save data objects, but you do not care about data ...",t:"Business Layer"},"410":{i:0.000401108232826861,u:"../zed/business_layer/facade/facade.htm",a:"The facade acts as an internal API. The main responsibility of the facade is to hide the internal implementation. The simply only delegates the calls to internal business models. Similar to a remote web service, the client should not care about how a specific task is done. This is also important for ...",t:"Facade"},"411":{i:0.000460252083679386,u:"../zed/business_layer/facade/zed-facade-design-by-contract.htm",a:"Every method in a facade contains an implicit promise. So a client expects that the behavior does not change in a minor update. Basically there are two types of possible changes. First there can be changes in the methodâ€™s signature for instance, when the name of the method or the order of the ...",t:"Design by Contract (DBC) - Facade"},"412":{i:0.000460252083679386,u:"../zed/business_layer/facade/zed-facade-how-to-implement.htm",a:"AbstractFacade Every facade extends Spryker\\Zed\\Kernel\\Business\\AbstractFacade which provides an important method: Methods Inside a facade, the methods tell a story about the module. They expose  the module\u0027s functions and delegate calls to internal models. A typical method looks like this: ...",t:"How to Implement a Facade"},"413":{i:0.000460252083679386,u:"../zed/business_layer/facade/zed-facade-how-to-use.htm",a:"1. How to use the facade from a controller or a plugin? In Zedâ€™s communication layer the facade of the same module is available with the getFacade() method from all controllers and plugins. A typical usage from a controller looks like this. The controller retrieves data from a submitted form and ...",t:"How to Use a Facade"},"414":{i:0.000373387622076428,u:"../zed/business_layer/business-models.htm",a:"Business models are classes where you program the business logic of your system. With business logic we mean all kinds of algorithms (e.g. cart calculation), storage procedures (e.g. checkout save workflow) and interactions with external providers (e.g. payment). Business models are not visible from ...",t:"Business Models"},"415":{i:0.000373387622076428,u:"../zed/business_layer/custom-exceptions.htm",a:"Custom Exceptions",t:"custom-exceptions"},"416":{i:0.000373387622076428,u:"../zed/persistence-layer.htm",a:"Zedâ€™s persistence layer is the owner of the schema, entities and queries. This layer knows the database structure and holds the connection to it.\n Integrated Technologies\n Propel\tFast and simple ORM Framework\nMySQL or PostgreSQL\tBoth databases are supported\n Persistence Layer Elements:\n The ...",t:"Persistence Layer"},"417":{i:0.00232885983418659,u:"../zed/persistence_layer/database_overview.htm",a:"ORM Directory The ORM directory contains two folders: Propel and Zed. The src/Orm/Propel is for: Configuration in Propel format (generated propel.json - donâ€™t touch). Copy of merged schema files (donâ€™t touch). Migration files (can be on gitignore or can be committed, the decision is made on the ...",t:"Database Overview"},"418":{i:0.00282256880204038,u:"../zed/persistence_layer/database_schema_definition.htm",a:"With Propel, a database schema is defined in an XML-file. Each module carries itâ€™s own part of the big schema that is collected and merged. Propelâ€™s documentation on defining the database schema:  Database schema Example Schema XML File This file can be copied into your module into ...",t:"Database Schema Definition"},"419":{i:0.00242457533489815,u:"../zed/persistence_layer/entity-manager.htm",a:"\n    Since Kernel version 3.2, it is possible to create an entity manager class in your persistence layer.\nIt will be responsible for saving, updating and deleting data. Using the class, you can separate data from persistence details (Propel). \nIt is important to not overuse the entity manager or ...",t:"Entity Manager"},"420":{i:0.00242457533489815,u:"../zed/persistence_layer/entity.htm",a:"In Spryker an entity represents one entry from a table in the database. Entities are an implementation of the  Active record design pattern , so their usage is very simple.\nFor a full documentation see  Propelâ€™s Active Record Reference .  Sprykerâ€™s entities are called Active Record classes or just ...",t:"Entity"},});