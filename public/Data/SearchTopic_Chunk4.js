define({"345":{i:0.000422066588768283,u:"../database_schema_guide/db-schema-navigation.htm",a:"Navigation Overview Every shop can have several independent navigation trees. For instance, there can be the main navigation that contains links to category pages or content pages. The main difference to Categories is that a Category Tree represents a hierarchical structure for the Products while a ...",t:"Navigation Schema"},"346":{i:0.000780824217703665,u:"../database_schema_guide/db-schema-sales.htm",a:"Orders Sales Order with Items Spryker saves orders with line items. There are three general approaches: There is one Sales Order Item for every sold product to the Sales Order. Even when the same product was sold several times. This way we can have a clear state per item. All data that is necessary ...",t:"Sales Schema"},"347":{i:0.000422066588768283,u:"../database_schema_guide/db-schema-shipment.htm",a:"Shipment Shipment carriers, method and price The customer can select a shipment method and a related carrier during the checkout. Each shipment method has a dedicated price and tax set. Structure: A Shipment Method has a name (e.g. \"Express\") and a Carrier (e.g. \"DHL\") Each Shipment Method has a ...",t:"Shipment Schema"},"348":{i:0.000422066588768283,u:"../database_schema_guide/db-schema-tax.htm",a:"Tax Tax Set and Rate Each product can be related to a tax set which contains the tax rates for each destination country. Structure: A Tax Set has a name (e.g. \"Food\") It represents a group of products which have the same tax rates The Rate (e.g. 19%) is stored in spy_tax_rate. There is one Rate per ...",t:"Tax Schema"},"349":{i:0.000422066588768283,u:"../database_schema_guide/db-schema-url.htm",a:"URL URLs Yves knows two types of URLs (see YvesBootstrap-\u003eregisterRouters()). URLs that are defined in the database (e.g. for Product Detail, CMS or Category Pages). URLs that are defined in the code (e.g. for Cart and Checkout). Structure: All URLs which are in the first category are stored in ...",t:"URL Schema"},"350":{i:0.000422066588768283,u:"../database_schema_guide/db-schema-zed-administration.htm",a:"Zed Administration Zed Users and ACL There can be multiple admin users with roles and permissions. Structure: Users belong to Groups (e.g. \"Operation Manager\"). Groups have Roles (e.g. \"Manage Orders\"). Roles have Rules which define what the Role is allowed or disallowed to do. A Rule is a URL. type ...",t:"Zed Administration Schema"},"351":{i:0.000397907830738641,u:"../guidelines/developer-guidelines.htm",a:"Developer Guidelines The developer Guidelines section is a collection of best practices and guidelines for developers.   ",t:"Developer Guidelines"},"352":{i:0.000397907830738641,u:"../guidelines/code-architecture-guide.htm",a:"We use our  Architecture Sniffer Tool  to assert a certain quality of Spryker architecture for both core and project.\n Running the Tool The sniffer can find a lot of violations and will report them: $ vendor/bin/console code:sniff:architecture\n\n// Sniff a specific subfolder of your project - with ...",t:"Code Architecture Guide"},"353":{i:0.000397907830738641,u:"../guidelines/code-quality.htm",a:"Spryker Commerce OS’s code base receives very high scores in terms of quality measures, indicating significantly higher code quality than many other ecommerce solutions.\n \nCode Quality Spryker, PHPmetrics.org score in score points (x out of 100)\n\n The Results\n Maintainability: keeping code \u0026 ...",t:"Code Quality"},"354":{i:0.000397907830738641,u:"../guidelines/code_style_guide.htm",a:"We follow the  PSR-2 standards . To achieve a styled codebase, we integrated the well known  PHP-CS Fixer  and  PHPCodeSniffer .\n Code Sniffer and Fixer \nWe use a very powerful tool to help keeping the code clean and preventing simple mistakes. Automate Code Style Correction The sniffer can find all ...",t:"Code Style Guide"},"355":{i:0.000397907830738641,u:"../guidelines/coding-best-practices.htm",a:"\n            In this article we outline a few common PHP coding problems and the recommended solutions.\n         Merging Arrays \n            When merging arrays, one usually uses array_merge($defaults, $options).\n            However, when working with associative arrays (keys are all string ...",t:"Coding Best Practices"},"356":{i:0.000397907830738641,u:"../guidelines/guidelines-for-new-gdpr-rules.htm",a:"As of May, the 25th 2018 the new General Data Protection Regulations (GDPR) will take effect. This information describes the ways that the Spryker Commerce OS supports regulatory compliance with the GDPR. GDPR contains rules relating to the protection and control of personal data.  For more ...",t:"Guidelines for New GDPR Rules"},"357":{i:0.000397907830738641,u:"../guidelines/major-minor-patch-release.htm",a:"What is a release? A Pull Request can ship a new Feature, Improvements to existing features and Bugfixes. A PR contains one or multiple modules. Each module can be a major, minor or patch release. It is very important to understand, that Patch Release and Bugfix are not the same. A Bugfix can be ...",t:"Major vs. Minor vs. Patch Release"},"358":{i:0.000397907830738641,u:"../guidelines/performance-guidelines.htm",a:"Spryker is a fast application by design. This guideline explains how to optimize the server-side execution time. Hosting Recommendations CPU: Spryker\u0027s execution time depends on the CPU of the server. In general, we can say that more CPU capacity supports faster response times and allows a higher ...",t:"Performance Guidelines"},"359":{i:0.000397907830738641,u:"../guidelines/secure-coding-practices.htm",a:"Unsafe coding practices can make the software application vulnerable to theft of sensitive data.\n\nIn this article, we’ll present a series of coding practices that we recommend using when developing an e-commerce application using Spryker Commerce OS, that will keep your software solution secured.\n\n ...",t:"Secure Coding Practices"},"360":{i:0.000397907830738641,u:"../guidelines/testing-concepts.htm",a:"Testing your project is one of the best ways to ensure that your software functions as it is supposed to. The role of testing is to find bugs during the early stages of development to minimize risks. QA is the process of assuring quality, not just verifying you will not get an error on some page. ...",t:"Testing Concepts"},"361":{i:0.000397907830738641,u:"../zed/zed.htm",a:"In this section you will find the following content: Business Layer: Business Layer Business Models Custom Exceptions   Communication Layer: Controllers and Actions Persistence Layer Database Schema Definition Entity Persistence Layer Entity Manager Repository Query Container Query Objects",t:"Back-End Zed"},"362":{i:0.000428655340958185,u:"../zed/business_layer/business-layer.htm",a:"Zed’s business layer is responsible for the entire business logic.  Most classes exist in this layer and this is the primary area for development.  The business layer is used by the communication layer and by other bundles. Here you know how to save data objects, but you do not care about data ...",t:"Business Layer"},"363":{i:0.000460479115108706,u:"../zed/business_layer/facade/facade.htm",a:"The facade acts as an internal API. The main responsibility of the facade is to hide the internal implementation. The simply only delegates the calls to internal business models. Similar to a remote web service, the client should not care about how a specific task is done. This is also important for ...",t:"Facade"},"364":{i:0.00052837730143741,u:"../zed/business_layer/facade/zed-facade-design-by-contract.htm",a:"Every method in a facade contains an implicit promise. So a client expects that the behavior does not change in a minor update. Basically there are two types of possible changes. First there can be changes in the method’s signature for instance, when the name of the method or the order of the ...",t:"Design by Contract (DBC) - Facade"},"365":{i:0.00052837730143741,u:"../zed/business_layer/facade/zed-facade-how-to-implement.htm",a:"AbstractFacade Every facade extends Spryker\\Zed\\Kernel\\Business\\AbstractFacade which provides an important method: Methods Inside a facade, the methods tell a story about the module. They expose  the module\u0027s functions and delegate calls to internal models. A typical method looks like this: ...",t:"How to Implement a Facade"},"366":{i:0.00052837730143741,u:"../zed/business_layer/facade/zed-facade-how-to-use.htm",a:"1. How to use the facade from a controller or a plugin? In Zed’s communication layer the facade of the same module is available with the getFacade() method from all controllers and plugins. A typical usage from a controller looks like this. The controller retrieves data from a submitted form and ...",t:"How to Use a Facade"},"367":{i:0.000428655340958185,u:"../zed/business_layer/business-models.htm",a:"Business models are classes where you program the business logic of your system. With business logic we mean all kinds of algorithms (e.g. cart calculation), storage procedures (e.g. checkout save workflow) and interactions with external providers (e.g. payment). Business models are not visible from ...",t:"Business Models"},"368":{i:0.000428655340958185,u:"../zed/business_layer/custom-exceptions.htm",a:"Custom Exceptions",t:"custom-exceptions"},"369":{i:0.000428655340958185,u:"../zed/persistence-layer.htm",a:"Zed’s persistence layer is the owner of the schema, entities and queries. This layer knows the database structure and holds the connection to it.\n Integrated Technologies\n Propel\tFast and simple ORM Framework\nMySQL or PostgreSQL\tBoth databases are supported\n Persistence Layer Elements:\n The ...",t:"Persistence Layer"},"370":{i:0.00267356285033625,u:"../zed/persistence_layer/database_overview.htm",a:"ORM Directory The ORM directory contains two folders: Propel and Zed. The src/Orm/Propel is for: Configuration in Propel format (generated propel.json - don’t touch). Copy of merged schema files (don’t touch). Migration files (can be on gitignore or can be committed, the decision is made on the ...",t:"Database Overview"},"371":{i:0.00324034574763849,u:"../zed/persistence_layer/database_schema_definition.htm",a:"With Propel, a database schema is defined in an XML-file. Each module carries it’s own part of the big schema that is collected and merged. Propel’s documentation on defining the database schema:  Database schema Example Schema XML File This file can be copied into your module into ...",t:"Database Schema Definition"},"372":{i:0.00278344407035611,u:"../zed/persistence_layer/entity-manager.htm",a:"\n    Since Kernel version 3.2, it is possible to create an entity manager class in your persistence layer.\nIt will be responsible for saving, updating and deleting data. Using the class, you can separate data from persistence details (Propel). \nIt is important to not overuse the entity manager or ...",t:"Entity Manager"},"373":{i:0.00278344407035611,u:"../zed/persistence_layer/entity.htm",a:"In Spryker an entity represents one entry from a table in the database. Entities are an implementation of the  Active record design pattern , so their usage is very simple.\nFor a full documentation see  Propel’s Active Record Reference .  Spryker’s entities are called Active Record classes or just ...",t:"Entity"},"374":{i:0.00288947312270656,u:"../zed/persistence_layer/query_container.htm",a:"A query container holds all the database queries of the current module. Each module has exactly one query container, which also acts as an entry point to the persistence layer. Internally it uses  query objects  and returns unterminated queries. As you can see in the example below, the query ...",t:"Query Container"},"375":{i:0.00317777446326843,u:"../zed/persistence_layer/query_objects.htm",a:"Query objects provide an object-oriented API for writing database queries which are used in  query containers .\n Please check the official  Propel Query Reference  for a complete documentation.\n\n How to Create a New Query Object\n Query object are created by Propel during the build model step. See ...",t:"Query Objects"},"376":{i:0.00317777446326843,u:"../zed/persistence_layer/repository.htm",a:"\n    Since Kernel version 3.2 it\u0027s possible to use a Repository class in your persistence layer.\n    The repository implements the  repository pattern , which means you have clear separation between business and persistence layers. \n    Propel entities are not allowed outside the persistence layer. ...",t:"Repository"},"377":{i:0.000491226625328249,u:"../zed/controllers-actions.htm",a:"Zed’s communication layer is the entry point to the system. Here are executed all of the external requests from users, the Yves-application and all command-line calls. The purpose of this layer is to retrieve the data, delegate to the business layer and to handover it to the presentation layer. The ...",t:"Controllers and Actions"},"378":{i:0.000397907830738641,u:"../yves/yves.htm",a:"Front-End Yves In this section you will find the following content: Client Controllers and Actions Frontend Translations Using Redis as a KV Storage Implementing URL Routing in Yves",t:"Front-End Yves"},"379":{i:0.000528123637591701,u:"../yves/client.htm",a:"Yves is divided into two:\n\n The part with controllers, forms, templates etc\n Client part which provides access to the search and storage engine and the Zed application.\n The purpose of the client is to encapsulate the logic which runs the shop independent from the overlying application. So in case ...",t:"Client"},"380":{i:0.000465552353221637,u:"../yves/controllers-actions.htm",a:"Controllers are placed inside the Controllers folder in Yves; they provide an entry point to the system for requests submitted by the front-end users.\n The methods inside of a controller are called actions. Usually an action reads the incoming request-data, maybe validates it with a form, delegates ...",t:"Controllers and Actions"},"381":{i:0.000465552353221637,u:"../yves/frontend-translations.htm",a:"Textual translations are handled by the Glossary-module. You can use the GlossaryFacade in Zed to add entries to Glossary (or you can use the Zed UI).\n\n \u003c?php\nclass GlossaryFacade extends AbstractFacade\n{\n    public function createTranslation($keyName, LocaleTransfer $locale, $value, $isActive = ...",t:"Frontend Translations"},"382":{i:0.000528123637591701,u:"../yves/redis-as-kv.htm",a:"This article describes how Redis is used within Spryker; the current functionality can be extended according to your needs.\n About Redis is a key-value data store and for the values it supports a large collection of data structures, such as strings, hashes, lists or sets.\n\n The following table shows ...",t:"Using Redis as a KV Storage"},"383":{i:0.000861273011893748,u:"../yves/yves-url-routing.htm",a:"Implementing URL Routing in Yves The words contained in an URL play a major factor for search engine to determine if the page is relevant for a specific search query. The URL routing is a mechanism used to map URLs to the code that gets executed when a specific request is being submitted. URL ...",t:"URL Routing"},"384":{i:0.000397907830738641,u:"../spryker-middleware.htm",a:"Spryker Middleware is a constructor that allows setting up a linear data processing flow, for import/export of data from system to shop, or vice versa.",t:"Spryker Middleware | Spryker"},"385":{i:0.000736130443153619,u:"../api/definition-api.htm",a:"According to  Semantic Versioning  the Spryker Commerce OS core team releases a major version “when there are incompatible API changes”. To make a sound decision about the type of the version, we need to define our internal APIs.\n \nIn Spryker Commerce OS’s core, all public methods in theses ...",t:"Definition of API"},"386":{i:0.000397907830738641,u:"../search_design/search-design-patterns.htm",a:" Search Design Patterns for E-Commerce: Schema Structure, Data Driven Ranking \u0026 More Source:  http://project-a.github.io/on-site-search-design-patterns-for-e-commerce/ By  Dr. Martin Loetzsch  ( Project A ) and Krešimir Slugan ( Contorion ) Providing users with a proper on-site search user ...",t:"On-Site Search "},"387":{i:0.000397907830738641,u:"../search_design/data-driven-ranking.htm",a:"When a query returns hundreds or thousands of results, it is absolutely crucial that the products at the top of the search result page are the ones that are most relevant to the user. Getting this right will lead to a higher conversion probability and increase customer happiness. Implementing proper ...",t:"Data-Driven Ranking"},"388":{i:0.000397907830738641,u:"../search_design/full-text-search.htm",a:"Full-text search is a feature where a user enters arbitrary text into a search field and then gets documents that are relevant for that query. It is normally combined with faceted navigation. In the example below, a user searched for “hammer” and then further filtered for hammer weights of 2000 gram ...",t:"Full-Text Search"},"389":{i:0.000397907830738641,u:"../search_design/generic-faceted-search.htm",a:"Faceted search (sometimes also called faceted navigation) allows users to navigate through a web site by applying filters for categories, attributes, price ranges and so on. It’s probably the most basic feature of a search and users expect this to work. Unfortunately, we observed that this is also ...",t:"Generic Faceted Search"},"390":{i:0.000397907830738641,u:"../search_design/multi-term-auto-completion.htm",a:"Term completion is a feature where a user gets suggestions for search terms and matching search results as he types the query. We call a completion multi-term when it is able to combine terms from different attributes in an open-ended fashion. In the below example, a user entered “fortis” (a brand) ...",t:"Multi-Term Auto Completion"},"391":{i:0.000397907830738641,u:"../search_design/naive-product-centric-approach.htm",a:"A Naive Product Centric Approach Finding products on e-commerce website can be tricky, even when you know exactly what you are looking for. Throughout this document, we will assume a customer wants to buy a hammer that weighs 2kg. A product that would meet his needs might be this “Fäustel” by ...",t:"A Naive Product-Centric Approach"},"392":{i:0.000397907830738641,u:"../search_design/other-best-practices.htm",a:"Finally, we want to provide you with a list of some additional and potentially useful principles regarding the setup of an on-site search experience.\n \nIndex Pages, Not Products\n\n Each document we put in Elasticsearch corresponds to an URL  The mapping type in our schema is called page, not product ...",t:"Other Best Practices"},"393":{i:0.000397907830738641,u:"../search_design/personalization-dymanic-pricing.htm",a:"Especially in businesses with a B2B focus, customers expect to get discounts after they have been using the service/website for a longer period of time. The search infrastructure should be able to handle such use cases and customers should be able to see their own discounted prices while browsing ...",t:"Personalization: Dynamic Pricing"},"394":{i:0.000397907830738641,u:"../search_design/simple-spelling-suggestions.htm",a:"Spelling suggestions provide the users with alternative search terms when the search query does not return any results:\n Translation: Unfortunately there were 0 results for your exact search term “hammer holk”. Did you possibly mean hammer holz? This is one of the simplest features you can build ...",t:"Simple Spelling Suggestions"},"395":{i:0.000397907830738641,u:"../search_design/usage-driven-schema-structure.htm",a:"Both the schema and the query generator should not need to know that there is such a thing as as the weight of a hammer. We will argue for a document structure and schema design that is not built around the original data but around the usage of attributes in search operations.\n\n At Contorion, this ...",t:"Usage-Driven Schema \u0026 Document Structure"},"396":{i:0.000397907830738641,u:"../state_machine_cookbook/state-machine-cookbook.htm",a:"State machines are a model of computation used to automate processes. In Spryker you can use the OMS module to automate the management of orders or the StateMachine module to automate other processes you define in your shop. Both behave similar, but the OMS one is a customized solution to manage the ...",t:"State Machine Cookbook - Part I - State Machine Fundamentals"},"397":{i:0.000397907830738641,u:"../state_machine_cookbook/state-machine-cookbook-2.htm",a:"\nThis chapter will help you model a state machine using Spryker to manage your sale orders.\n First of all, it’s important to know which tasks must be executed after an order is submitted and in which order. Keep in mind that you can define more than one state machine in your system to cover the use ...",t:"State Machine Cookbook - Part 2 -Building a State Machine"},"398":{i:0.000397907830738641,u:"../resources_and_developer_tools/about-resources.htm",a:"About Resources and Developer Tools This section contains general information and resources for developers. The topics covered in resources are general topics that do not pertain to a specific component or capability.",t:"About Resources and Developer Tools"},"399":{i:0.000460479115108706,u:"../resources_and_developer_tools/configuration-management.htm",a:"Default and Local Configuration Files\n Under config/Shared you’ll find several files that are used for the system’s configuration, that can be used by both Yves and Zed.\n The files are merged in a fixed order if they exist. So the entries of config_default.php are overwritten by the entries in ...",t:"Configuration Management"},"400":{i:0.00157168207375408,u:"../resources_and_developer_tools/console-commands.htm",a:"We provide an integrated mechanism to add command line calls. Technically this is based on Symfony’s Console Component.\n\t\t \n\t\t\tGet a list of all available commands\n\t\t You can see the list of all of the commands by running: vendor/bin/console. vagrant@spryker-vagrant ➜  current git:(develop) ✗ ...",t:"Console Commands"},"401":{i:0.000397907830738641,u:"../resources_and_developer_tools/container-globals.htm",a:"The ContainerGlobals is a way to inject dependencies which are available inside your  Factories . Every dependency added to the ContainerGlobals is available by using getProvidedDependency() in your factory.\n \nTo add something globally you need to create a service provider and add it to the ...",t:"Container Globals"},"402":{i:0.000397907830738641,u:"../resources_and_developer_tools/core-extension.htm",a:"We offer several ways like plugins to hook into the core’s behavior and extend this without modifications. But sometimes this is not enough, so you need to replace a method which is deep in the core.\n\n Before your proceed, double check if there is no other way to solve your requirement, maybe there ...",t:"Core Extension"},"403":{i:0.000846814289092082,u:"../resources_and_developer_tools/cronjob-scheduling.htm",a:"We use  Jenkins  for cronjob scheduling. Compared to Crontab, there are several benefits: Jobs are queued and can be manually executed Job definitions are under version control and can be changed by any developer Console output available for debugging Add a new job and run it Jobs are defined in ...",t:"Cronjob Scheduling"},"404":{i:0.000397907830738641,u:"../resources_and_developer_tools/data-importers-review-implementation.htm",a:"The article will walk you through use cases and the process of implementing the data importers in your project.",t:"Data Importers | Spryker"},"405":{i:0.000397907830738641,u:"../resources_and_developer_tools/dataimporter-speed-optimization.htm",a:"Importing big amount of data into a system can pose a real problem. When not optimized, the importing process will most likely be slow.",t:"Dataimporter Speed Optimization | Spryker"},"406":{i:0.000547543316856455,u:"../resources_and_developer_tools/dependency-provider.htm",a:"Each (Undefined variable: General.bundles/modules) ships with a DependencyProvider class which explicitly defines services and external dependencies to other (Undefined variable: General.bundles/modules). For instance when the Cms module requires the Glossary module this needs to be configured here. ...",t:"Dependency Provider"},"407":{i:0.00204027442374469,u:"../resources_and_developer_tools/factory.htm",a:"All (Undefined variable: General.bundles/modules) are shipped with a dedicated factory for each layer. The responsibility of the factory is to create new instances of the classes from the same layer and module.\n\n The following example shows a typical method from a factory. The method ...",t:"Factory"},"408":{i:0.000397907830738641,u:"../resources_and_developer_tools/flash-messenger.htm",a:"This tutorial describes how to show a message in the Zed GUI.\n In the controller you can use these shortcut methods to show a user message in the GUI. The messages will be translated later when they are rendered.\n\n \u003c?php\nclass IndexController extends AbstractController\n{\n    public function ...",t:"Flash Messenger"},"409":{i:0.000397907830738641,u:"../resources_and_developer_tools/internal-server-error-handling.htm",a:"This document describes how to configure the behavior when an internal server error occurs. Whether you need to show the details of the error or render a static page for any internal error, this is done through configuration.\n\n Configure Internal Server Error  Page\nDepending on the environment on ...",t:"Internal Server Error Handling"},"410":{i:0.000397907830738641,u:"../resources_and_developer_tools/performance-scalability.htm",a:"Spryker Commerce OS was built to enable the development of high performance e-commerce applications that are able to support an extremely high number of unique visitors. However, no application can be both, light and heavy, at the same time.\n\n Therefore, we have two applications: Yves and Zed. Both ...",t:"Performance and Scalability"},"411":{i:0.00164925429190488,u:"../resources_and_developer_tools/plugin.htm",a:"Plugins are small classes that are used to connect bundles in a flexible and configurable way. In contrast to a direct call to a facade of another module, there can be an array of provided (Undefined variable: General.bundles/modules).\n\n According to our conventions, plugins are the only classes ...",t:"Plugin"},"412":{i:0.000397907830738641,u:"../resources_and_developer_tools/plugin-overview.htm",a:"To see which Plugin can be used in which DependencyProvider we added a feature Plugin Overview. It gives you several ways of displaying our plugin usages.",t:"Plugin Overview | Spryker"},"413":{i:0.000397907830738641,u:"../resources_and_developer_tools/postgres-index-generator.htm",a:"Postgres doesn\u0027t automatically add indexes to foreign key columns. This can lead to performance issues with the database. In MySQL, you will get the indexes for the foreign key columns without the need to do something.  Most likely no one adds indexes for the foreign key columns manually when they ...",t:"Postgres Index Generator"},"414":{i:0.00248177405528067,u:"../resources_and_developer_tools/publish-and-synchronization-reference.htm",a:" To implement Publish and Synchronize in your code, you need to perform the following steps: 1. Add Publish Events Publish and Synchronize are event-driven. To start publishing data to the frontend, an event must be triggered. For this purpose, you need to add events for all changes you want to ...",t:"Publish and Synchronization Reference"},"415":{i:0.000460479115108706,u:"../resources_and_developer_tools/service.htm",a:"Service is a Spryker application layer shared by the Client application layer, the Zed application layer, and Yves application layer. This service layer provides the ability to register a service once and have it applied to both layers. Usage is focused on level details (infrastructure layer). For ...",t:"Service"},"416":{i:0.000397907830738641,u:"../resources_and_developer_tools/session-handlers.htm",a:"We provide a number of session handlers to work with different storages. By default, the demo-shop uses a locking Redis session handler for Yves and a non-locking Redis session handler for Zed in the development environment.\n\n The following session handlers are currently available:\n\n File\n ...",t:"Session Handlers"},"417":{i:0.000610114601226519,u:"../resources_and_developer_tools/transfer-objects.htm",a:"Transfer objects are simple data containers. Their purpose is to retrieve a standardized way to access data and to get more expressive method signatures. They are available everywhere in the system. How to Use Transfer Objects Simple usage The example shows a typical use case for a transfer object. ...",t:"Transfer Objects"},"418":{i:0.000397907830738641,u:"../maintenance/maintenance.htm",a:"Maintenance This section is dedicated to information on carrying out maintenance and maintenance-related questions.",t:"Maintenance"},"419":{i:0.00249618493295904,u:"../maintenance/post-installation-steps-and-additional-info.htm",a:" Git Configuration If you want to commit from within the VM, it is recommended to set the right Git preferences: git config --global user.email \"your.email@domain.tld\"\ngit config --global user.name \"Your Name\"\ngit config --global push.default simple\ngit config --global pull.rebase true\t\t VM ...",t:"Post-Installation Steps and Additional Info    "},"420":{i:0.000397907830738641,u:"../maintenance/vm-cleanup.htm",a:"Used to be: http://spryker.github.io/getting-started/installation/virtual-machine-cleanup/ If you need to cleanup the environment set up in the virtual machine, you can either do this by running a script or execute the cleanup steps manually.\n\n VM Cleanup - Automatic To cleanup the VM: Run the setup ...",t:"Virtual Machine Cleanup"},});