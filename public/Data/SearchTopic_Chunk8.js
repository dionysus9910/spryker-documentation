define({"617":{i:0.000870629750342191,u:"../module_migration_guides/mg-product-label.htm",a:"Upgrading from Version 1.* to Version 2.* The following list describes the Backward Compatibility breaking changes in this version and how to upgrade. Product Label Rendering \n            We\u0027ve changed spyProductLabels twig function to work based on a list of product label IDs.\n            It\u0027s ...",t:"Migration Guide - Product Label"},"618":{i:0.00111193646381232,u:"../module_migration_guides/mg-product-label-gui.htm",a:"Upgrading from Version 1.* to Version 2.* \n          In version 2 we have added multi-currency support.\n          First of all make sure you  migrated the Price module . \n          We have changed ZED tables to use PriceProductFacade instead of the database join to get price, because that requires ...",t:"Migration Guide - Product Label GUI"},"619":{i:0.00152304469470775,u:"../module_migration_guides/mg-product-management.htm",a:"Upgrading from Version 0.9.* to Version 0.10.* The new version provides support to manage \"abstract product-store\" relations per store. Update / install spryker/product to at least 6.0.0 version. You can find additional help for feature migration  here . Update / install spryker/productmanagement to ...",t:"Migration Guide - ProductManagement"},"620":{i:0.00176837249435723,u:"../module_migration_guides/mg-product-option.htm",a:"Upgrading from Version 5.* to Version 6.* Update spryker/product-option to at least version 6.0.0. Install/Update spryker/currency to at least version 3.0.0. You can find additional information to currency module upgrade:  here . Install/Update spryker/price to at least version 5.0.0. Update ...",t:"Migration Guide - Product Option"},"621":{i:0.00122668483223367,u:"../module_migration_guides/mg-product-option-cart-connector.htm",a:"Upgrading from Version 4.* to Version 5.* Update spryker/product-option to at least version 6.0.0. You can find additional information to product option module upgrade:  here . Install/Update spryker/price to at least version 5.0.0.  Update spryker/product-option-cart-connector to version 5.0.0. \n   ...",t:"Migration Guide - Product Option Cart Connector"},"622":{i:0.000474837825219955,u:"../module_migration_guides/mg-product-option-discount-connector.htm",a:"Upgrading from Version 2.* to Version 3.* The tax plugins are using the version 3.* of the Tax module. Upgrade  Migration Guide - Tax   .   See also: Learn how to migrate Product Learn how to migrate Product Bundle Learn how to migrate Product Label Learn how to migrate Product Label Gui  ",t:"Migration Guide - ProductOptionDiscountConnector"},"623":{i:0.000415914989747908,u:"../module_migration_guides/mg-product-option-exporter.htm",a:"Upgrading from version 2.* to version 3.* The ProductOptionExporter  module does not provide the tax functionality anymore. Upgrade  Migration Guide - Tax   .   See also: Learn how to migrate  Product Learn how to migrate Product Bundle Learn how to migrate Product Label Learn how to migrate Product ...",t:"Migration Guide - ProductOptionExporter"},"624":{i:0.0010339991207899,u:"../module_migration_guides/mg-product-relation.htm",a:"Upgrading from Version 1.* to Version 2.* \n          In version 2 we have added multi-currency support.\n          First of all make sure you  migrated the Price module . We have changed Zed table to use PriceProductFacade for retrieving product prices. We have also changed ...",t:"Migration Guide - Product Relation"},"625":{i:0.000725599416403849,u:"../module_migration_guides/mg-product-relation-collector.htm",a:"Upgrading from Version 1.* to Version 2.* \n            From version 2 we added support for multi-currency. \n          First of all make sure you  migrated the Price module . We have changed collector dependency to use PriceProduct module instead of price, please update your code accordingly if you ...",t:"Migration Guide - Product Relation Collector"},"626":{i:0.000415914989747908,u:"../module_migration_guides/mg-product-search.htm",a:"Upgrading from Version 3.* to Version 4.* Requires version ^4.0.0 of Product and ^5.0.0 of Search bundles. ProductSearchFacade::activateProductSearch() and ProductSearchFacade::deactivateProductSearch() are not connected to searchableProduct anymore. ...",t:"Migration Guide - ProductSearch"},"627":{i:0.000902367922819991,u:"../module_migration_guides/mg-product-set-gui.htm",a:"Upgrading from Version 1.* to Version 2.* \n            From version 2 we have support multi-currency. First of all make sure you  have migrated the Price module . We have changed collector dependency to use PriceProduct module instead of price, please update your code accordingly if you overwrote ...",t:"Migration Guide - Product Set GUI"},"628":{i:0.000415914989747908,u:"../module_migration_guides/mg-product-validity.htm",a:"Installing Version 1.* The Product Validity module is responsible for (de)activation of products for (or starting from) a certain period of time. Follow the instructions below to have the module up and running in your shop. Database Changes \n            We have added a new  spy_product_validity ...",t:"Migration Guide - Product Validity"},"629":{i:0.00371631451375367,u:"../module_migration_guides/mg-quote.htm",a:" Upgrading from Version 1.* to Version 2.* The new version of Quote module provides the ability to save customer quote into the database and get it. Quote storage strategy (session, database) can be changed in Spryker\\Shared\\Quote\\QuoteConfig::getStorageStrategy. If you’re migrating the Quote module ...",t:"Migration Guide - Quote  "},"630":{i:0.000415914989747908,u:"../module_migration_guides/mg-rabbitmq.htm",a:" Upgrading from Version 0.* to Version 1.* Version 1 of the RabbitMq module  Configuration \n            The configuration codes have moved from RabbitMqDependencyProvider to RabbitMqConfiguration.\n         RabbitMqOption TransferObject \n            RabbitMqOption transfer has changed: bindingQueue ...",t:"Migration Guide - RabbitMQ  "},"631":{i:0.000415914989747908,u:"../module_migration_guides/mg-refund.htm",a:" Upgrading from Version 4.* to Version 5.* Version 4 of the Refund module no longer uses SalesAggregatorFacade , it was replaced with SalesFacade. The RefundCalculator business class must now replace RefundToSalesAggregatorInterface with the RefundToSalesInterface bridge. To learn more see,  ...",t:"Migration Guide - Refund    "},"632":{i:0.00827608023005964,u:"../module_migration_guides/mg-sales.htm",a:" Upgrading from Version 7.* to Version 8.* \n            In Sales module version 8 we have added multi-currency support, this release added two new fields to spy_sales table to persist \"currency\" and \"store\". Also Order saver now stores currency and store where order is placed.\n\n            Run the ...",t:"Migration Guide - Sales    "},"633":{i:0.00322546606209001,u:"../module_migration_guides/mg-sales-aggregator.htm",a:" Upgrading from Version 4.* to Version 5.* SalesAggregator version 4 is last version to be released for this module. Apart from future bug fixes, it will no longer be developed and Core will no longer use it to get order totals anymore. There are two steps to the two migration process. The first is ...",t:"Migration Guide - SalesAggregator    "},"634":{i:0.000415914989747908,u:"../module_migration_guides/mg-search.htm",a:"Upgrading from Version 7.* to Version 8.* \n                    With this version of the Search module we have migrated to Elasticsearch 5.6. Please read the\n                     Elasticsearch\n                    Breaking Changes in 5.0  official documentation to adjust your custom implementation ...",t:"Migration Guide - Search"},"635":{i:0.000415914989747908,u:"../module_migration_guides/mg-session.htm",a:"Upgrading from Version 3.* to Version 4.* The previous version made use of the deprecated spryker/new-relic and the spryker/new-relic-api modules. To be able to use this version you need to install the spryker/monitoring module if you haven\u0027t done already by running: composer require ...",t:"Migration Guide - Session"},"636":{i:0.000415914989747908,u:"../module_migration_guides/mg-setup.htm",a:" Upgrading from Version 3.* to Version 4.*\n\n With this update the behavior of the setup:install command slightly changes. Instead of removing directories where generated files are stored, these directories will be kept and emptied.\n \nThe setup:install command utilizes two new commands for cleaning ...",t:"Migration Guide - Setup"},"637":{i:0.000725599416403849,u:"../module_migration_guides/mg-shipment.htm",a:"Upgrading from Version 5.* to Version 6.* In version 6, multi-currency prices are introduced for shipment methods, allowing to set up different net and gross price per shipment method for each preconfigured currency. The spy_shipment_method.default_price database column becomes deprecated. Shipment ...",t:"Migration Guide - Shipment"},"638":{i:0.000415914989747908,u:"../module_migration_guides/mg-step-engine.htm",a:" Upgrading from Version 2.* to Version 3.*\n \nIf you\u0027re migrating the StepEngine module from version 2 to version 3, you need to follow the steps described below.\n\n In Version 3 the StepCollectionInterface::getPreviousStep() has a new second optional argument (AbstractTransfer $dataTransfer). If you ...",t:"Migration Guide - Step Engine  "},"639":{i:0.00273905021239556,u:"../module_migration_guides/mg-tax.htm",a:" Upgrading from Version 4.* to Version 5.* In version 5, tax calculation logic changed, tax amount for options, expenses and items are now calculated in the Tax module.  The plugins: ExpenseTaxCalculatorPlugin, ItemTaxCalculatorPlugin and TaxTotalsCalculatorPlugin were removed, and replaced with: ...",t:"Migration Guide - Tax  "},"640":{i:0.00244365725134828,u:"../module_migration_guides/mg-touch.htm",a:" Upgrading from Version 3.* to Version 4.* Update/install spryker/touch to at least 4.0.0 version. Install the new database columns by running vendor/bin/console propel:diff. Propel should generate a migration file with the changes. Run vendor/bin/console propel:migrate to apply the database ...",t:"Migration Guide - Touch    "},"641":{i:0.000415914989747908,u:"../module_migration_guides/mg-transfer.htm",a:" Upgrading from Version 2.* to Version 3.* When upgrading to the new major version of the Transfer module, it is necessary to make sure that everywhere a $foo-\u003efromArray($bar-\u003etoArray()) statement is used the types are matching. From now on we are no longer silently ignoring when you try to set a ...",t:"Migration Guide - Transfer  "},"642":{i:0.000725599416403849,u:"../module_migration_guides/mg-wishlist.htm",a:" Upgrading from Version 5.* to Version 6.* With the implementation of the quote storage strategies, the new version 5.0.0 of the Cart module has been released. The Wishlist module is dependent on it, so make sure your Cart module\u0027s version is 5.0.0 or higher. CartClientInterface::storeQuote is ...",t:"Migration Guide - Wishlist "},"643":{i:0.000533760660692003,u:"../feature_integration_guides/about-integration.htm",a:"The integration guides provide step-by-step instructions on how to enable individual Spryker features for your project.  Please keep in mind, that since Spryker Commerce OS is a highly modular system, you have total freedom in choosing what features to add to your project. When making a decision to ...",t:"About Integration Guides"},"644":{i:0.000415914989747908,u:"../feature_integration_guides/agent-assist-feature-integration.htm",a:"Agent Assist enables agent users to log in to shop to perform actions on customers’ behalf. This guide describes how to install Agent Assist in your project.",t:"Feature Integration - Agent Assist | Spryker"},"645":{i:0.000415914989747908,u:"../feature_integration_guides/business-on-behalf-feature-integration.htm",a:"The Business on Behalf feature allows you to have multiple company users per customer account as well as to select one company user as a default company user. This guide will walk you through the process of integrating the Business on Behalf feature into your project.",t:"Business on Behalf feature Integration | Spryker "},"646":{i:0.000415914989747908,u:"../feature_integration_guides/cart_-integration.htm",a:" This article describes how to add product variants and product pictures to an existing cart Prerequisites: Before starting make sure you are familiar with the concept of Spryker Super Attributes.  UI Changes: Cart now supports changing the items in the cart by modifying their attributes. If we have ...",t:"Cart Integration   "},"647":{i:0.000415914989747908,u:"../feature_integration_guides/category-filter-feature-integration.htm",a:"The Category Filters Feature allows arranging items into categories and customizing filters. This guide describes how to integrate the feature into your project.",t:"Feature Integration - Category Filters | Spryker"},"648":{i:0.000415914989747908,u:"../feature_integration_guides/product-group-feature-integration.htm",a:"Prerequisites To prepare your project to work with Product groups: Require the Product Group bundles in your composer.json by running composer require spryker/product-group spryker/product-group-collector. Install the new database tables. By running vendor/bin/console propel:diff. Propel should ...",t:"Feature Integration - Product Group"},"649":{i:0.000415914989747908,u:"../feature_integration_guides/enabling-cms-widget.htm",a:" \n\t\t\tCMS content widgets is a CMS feature for adding  dynamic content to CMS pages/blocks.\n\t\t For example, you can list a single product, product lists, product groups or product sets.\n\t\t Integration First of all you need to install the cms-content-widget module with Composer (update composer.json ...",t:"Enabling the Content Widget  "},"650":{i:0.000415914989747908,u:"../feature_integration_guides/permissions-feature-integration.htm",a:"The Permissions feature is shipped with following modules: To install the feature, follow the steps below. 1. Install necessary modules using composer composer update \"spryker/*\" \"spryker-shop/*\" composer require spryker/permission-extension:\"^1.0.0\" spryker/permission:\"^1.0.0\" 2. Add plugins to ...",t:"Permissions Feature Integration"},"651":{i:0.000415914989747908,u:"../feature_integration_guides/enabling-gift-cards.htm",a:" The Gift Cards feature is shipped with the following modules: GiftCard: implements basic functionality of the Gift Cards feature as  well as the  Replacement value-checking strategy . GiftCardBalance: implements gift card  Balance value-checking strategy . GiftCardMailConnector: responsible for ...",t:"Enabling Gift Cards"},"652":{i:0.000415914989747908,u:"../feature_integration_guides/merchant-custom-prices-feature-integration.htm",a:"The Merchant Custom Price Feature allows setting specific prices for merchants. The guide describes the process of integrating the feature into your project.",t:"Merchant Custom Prices Feature Integration | Spryker"},"653":{i:0.000415914989747908,u:"../feature_integration_guides/merchant-product-restrictions-feature.htm",a:"Merchant Product Restrictions allows setting access to particular products. This guide describes the process of integrating the feature into a project.",t:"Merchant Product Restrictions Feature Integration | Spryker"},"654":{i:0.000415914989747908,u:"../feature_integration_guides/minimum-order-value-feature-integration.htm",a:"The Minimum Order Value Feature allows setting a minimum threshold for customer\u0027s orders. The guide describes how to integrate the feature into your project. ",t:"Minimum Order Value Feature Integration | Spryker"},"655":{i:0.000415914989747908,u:"../feature_integration_guides/multiple-carts-feature-integration.htm",a:"Multiple Carts allows customers to manage multiple shopping carts in one account. The guide describes how to integrate the feature into your project.",t:"Multiple Carts Feature Integration | Spryker"},"656":{i:0.000415914989747908,u:"../feature_integration_guides/multiple-carts-add-to-cart-integration.htm",a:"The Quick Order Feature allows ordering products by entering SKU and quantity in one page. The guide describes how to integrate the feature into your project. ",t:"Multiple Carts Add to Cart Feature Integration | Spryker"},"657":{i:0.000415914989747908,u:"../feature_integration_guides/multiple-carts-reorder-feature-integration.htm",a:"The Reorder Feature allows reordering previous orders. This guide will walk you through the process of integrating the feature into your project. ",t:"Multiple Carts Reorder Feature Integration | Spryker"},"658":{i:0.000415914989747908,u:"../feature_integration_guides/payment-provider-integration.htm",a:" The Spryker Commerce OS offers integrations with several payment providers that can be used in the checkout and order management. Easily define the availability of a provider based on customer preferences and local regulations and specify the order the providers are displayed in during checkout.\n",t:"Payment Provider Integration    "},"659":{i:0.000415914989747908,u:"../feature_integration_guides/product-lists-feature-integration.htm",a:"The Product Lists Feature allows defining access to particular items. The guide will walk you through the process of integrating this feature into your project. ",t:"Products Lists Feature Integration | Spryker"},"660":{i:0.000415914989747908,u:"../feature_integration_guides/product-measurement-units-feature-integration.htm",a:"The Measurement Units feature allows defining specific units of measure for products. The guide describes how to integrate the feature into your project.",t:"Feature Integration - Product Measurement Unit | Spryker"},"661":{i:0.000415914989747908,u:"../feature_integration_guides/product-packaging-unit-feature-integration.htm",a:"The Product Packaging Unit Feature allows defining packaging units per abstract product. This guide describes how to integrate the feature into your project.",t:"Product Packaging Unit Feature Integration | Spryker"},"662":{i:0.000769452002580192,u:"../feature_integration_guides/product-review-feature-configuration.htm",a:"Configuring the Maximum Rating To change the maximum allowed rating, alter the Client configuration by extending the \\Spryker\\Client\\ProductReview\\ProductReviewConfig class in your project directory. Override getMaximumRating method to return the desired selectable maximum rating value. \n        ...",t:"Feature Configuration - Product Reviews"},"663":{i:0.000415914989747908,u:"../feature_integration_guides/product-relation-integration.htm",a:"Register a new collector plugin. How to is in .\n Then register a new twig service plugin  \\Spryker\\Yves\\ProductRelation\\Plugin\\ProductRelationTwigServiceProvider inside the \\Pyz\\Yves\\Application\\YvesBootstrap::registerServiceProviders plugin stack.  This will allow to use the UI carousel component ...",t:"Product Relation Integration"},"664":{i:0.000415914989747908,u:"../feature_integration_guides/quick-add-to-cart-feature-integration.htm",a:"Quick Add to Cart allows customers to buy products in a few clicks. This guide will walk you through the process of integrating this feature into your project.",t:"Quick Add to Cart Feature Integration | Spryker"},"665":{i:0.000415914989747908,u:"../feature_integration_guides/product-review-feature-integration.htm",a:"Prerequisites To prepare your project to work with Product Reviews: Require the Product Review modules in your composer by running\n             composer require spryker/product-review composer require spryker/product-review-collector composer require spryker/product-review-gui Install the new ...",t:"Feature Integration - Product Reviews"},"666":{i:0.000415914989747908,u:"../feature_integration_guides/product-store-relation-feature-integration.htm",a:" General Information \n            By default abstract products are available in all stores. This feature provides additional configuration when:\n             you have multiple stores, and you want to manage the appearance of abstract products per store. Prerequisites To prepare your project to work ...",t:"Feature Integration - Multi-Store Products "},"667":{i:0.000415914989747908,u:"../feature_integration_guides/shared-carts-feature-integration.htm",a:"The Shared Carts Feature allows sharing shopping carts within an entire business unit. The guide describes how to integrate the feature into your project. ",t:"Shared Carts Feature Integration | Spryker"},"668":{i:0.000415914989747908,u:"../feature_integration_guides/shopping-lists-feature-integration.htm",a:"Shopping list is a list of items that buyers buy or plan to buy frequently. Shopping lists allow your customers to quickly order regualry bought items. This guide will walk you through the process of integrating the Shopping lists feature into your project.",t:"Shopping Lists Feature Integration | Spryker"},"669":{i:0.000415914989747908,u:"../feature_integration_guides/volume-prices-feature-integration.htm",a:"The Volume Prices Feature allows setting specific prices for units based on quantities. The guide describes how to integrate the feature into your project.",t:"Volume Prices Feature Integration | Spryker"},"670":{i:0.00277152659143541,u:"../feature_integration_guides/glue_api/glue-api-installation-and-configuration.htm",a:"This article describes the process of installing and enabling the GLUE API infrastructure and explains the details of integrating the REST API resources.",t:"API Installation and Configuration | Spryker"},"671":{i:0.000533760660692003,u:"../updating_the_legacy_demoshop_with_scos/about-updating.htm",a:"If you use Spryker Legacy Demoshop, you can enhance it with specific components of SCOS or make the Legacy Demoshop compatible with them. For example, you can  configure the Legacy Demoshop to use spryker-shop modules, Atomic Design and Publish \u0026 Synchronization ,  set up ShopUiCompatibility module ...",t:"Updating the Legacy Demoshop with SCOS"},"672":{i:0.00352726904092855,u:"../updating_the_legacy_demoshop_with_scos/demoshop-to-atomic-frontend.htm",a:" The following guide will help migrating an existing Demoshop project to Atomic Frontend. Update assets/Yves/default/app/index.js Append the following lines to the end of the file: var app = require(\u0027ShopUi/app\u0027);\napp.bootstrap(); Update assets/Yves/default/vendor.entry.js Lines to remove: // es6 ...",t:"Integrating Atomic Frontend Into the Legacy Demoshop "},"673":{i:0.00352726904092855,u:"../updating_the_legacy_demoshop_with_scos/demoshop-with-shop-app-atomic-design-and-ps.htm",a:"Infrastructure Preparation This has to be done only once for Demoshop (not for every feature.)   Shop App These steps are required to install features which use the new  shop pages and widgets  i.e. the shop app.   Add infrastructure modules To use the spryker-shop modules, you need to add new ...",t:"Making Demoshop Compatible with Shop App, Atomic Design, P\u0026S"},"674":{i:0.00352726904092855,u:"../updating_the_legacy_demoshop_with_scos/setting-up-shopuicompatibility.htm",a:"The ShopUiCompatibility module is the main module necessary for the  Atomic Frontend . This module is provided in SCOS by default. The following guide describes how to set up the ShopUICompatibility in the Legacy Demoshop.   To install ShopUiCompatibility module in the Legacy Demoshop, follow the ...",t:"Setting up ShopUiCompatibility Module in the Legacy Demoshop"},"675":{i:0.00352726904092855,u:"../updating_the_legacy_demoshop_with_scos/twig-compatibility-mode-demoshop-vs-suite.htm",a:"In the SCOS, all variables available in the Twig templates can be accessed from the _view variable. In the Demoshop we used a different technique and passed the Twig variables to the global Twig namespace directly. The following code examples will help to understand the difference. Demoshop ...",t:"Twig Compatibility: Legacy Demoshop vs SCOS"},"676":{i:0.000415914989747908,u:"../tutorials/about-tutorials.htm",a:" Welcome to Spryker Tutorials, in this section of the documentation you will find instructions on how to perform all types of tasks with Spryker Commerce OS If you are a PHP developer who is new to Spryker, visit our free online Bootcamp Training for a crash introduction course to Spryker. Check out ...",t:"About Tutorials "},"677":{i:0.000415914989747908,u:"../tutorials/introduction/introduction-tutorials.htm",a:"Introduction Tutorials Introduction tutorials describe how to perform basic tasks with the Spryker Commerce OS.",t:"Introduction Tutorials"},"678":{i:0.000415914989747908,u:"../tutorials/introduction/architectural-walkthrough.htm",a:"This is an architecture walkthrough as a coding exercise. Challenge Description Build a HelloSpryker module in Zed that will render the Hello Spryker! string, in reverse order, on the screen. The string must be retrieved from the config. Build a HelloSpryker module in Yves that will render the Hello ...",t:"Tutorial - Architectural Walkthrough"},"679":{i:0.000415914989747908,u:"../tutorials/introduction/boosting-cart-based-search.htm",a:"Challenge Description Based on the colors of the products that are in the cart of the user, the catalog should first display products that have the same color. Let’s say for example that there’s a red product in the cart, then the top results in the catalog should also contain red products. ...",t:"Tutorial - Boosting Cart Based Search"},"680":{i:0.000415914989747908,u:"../tutorials/introduction/checkout.htm",a:"Challenge Description Integrate an additional step into the checkout process; a Voucher step where a customer enters a voucher code and gets a discount. Add the Voucher step after the Payment one. To explore further before starting, you can read about the  Checkout  and the  StepEngine  modules. ...",t:"Tutorial - Checkout"},"681":{i:0.000415914989747908,u:"../tutorials/introduction/dynamic-content-page.htm",a:"Challenge Description Create a CMS page that displays some (marketing) text and a list of personalized products as offers. Challenge Solving Highlights Static page For creating a CMS page, follow these steps: Create a CMS template called personalized_products.twig under ...",t:"Tutorial - Dynamic Content Page"},"682":{i:0.000415914989747908,u:"../tutorials/introduction/hello-world.htm",a:" Challenge Description Build a HelloWorld  module in Yves that will render the Hello world! string on the page. Manually building the HelloWorld module in Yves  Using Code Generator To save even more time, you can use code generator from development tools shipped with Spryker Code Generator console ...",t:"Tutorial - Hello World "},"683":{i:0.000415914989747908,u:"../tutorials/introduction/oms-state-machine.htm",a:"Challenge Description Create a simple state machine that demonstrates an order process. The simple order process has the following states: new, paid, shipped, closed, returned, and invalid. We use the invalid state in case a payment is unauthorized (could be used with some other cases as well). In ...",t:"Tutorial - OMS State Machine"},"684":{i:0.000415914989747908,u:"../tutorials/introduction/setup-hello-world-queue.htm",a:"This Tutorial demonstrates a simple Hello, World queue use case. We will create a hello queue and send/receive our messages to/from this queue with Hello, World content.  For this purpose, we will be using our default queue engine RabbitMQ.\n\n Preparation\n Before you begin, check to see that the ...",t:"Tutorial - Set Up a \"Hello World\" Queue"},"685":{i:0.00115174110410563,u:"../tutorials/introduction/handling-data-publish-and-synchronization.htm",a:"Tutorial - Handling Data - Publish and Synchronization  Challenge Description Publish and Synchronization (P\u0026S) allows exporting data from Spryker backend (Zed) to external endpoints (by default, Redis and Elasticsearch). The endpoints are usually consumed by frontend applications (including Yves). ...",t:"Handling Data - Publish and Synchronization"},"686":{i:0.000415914989747908,u:"../tutorials/introduction/stores.htm",a:"Challenge Description Override a Zed core module on project level, and then override it on store level. You can also repeat the same challenge for a Yvesmodule Challenge Solving Highlights Project Level Let’s first override on the project level. Add an IndexController::indexAction() to ...",t:"Tutorial - Stores"},"687":{i:0.000415914989747908,u:"../tutorials/introduction/glue_api/glue-api-tutorials.htm",a:"The tutorials describe how to use and customize the Glue API for your application.",t:"Glue API tutorials | Spryker"},"688":{i:0.000504299242955979,u:"../tutorials/introduction/glue_api/documenting-glue-api-resources.htm",a:"This tutorial describes how to set up and use the means of writing documentation for your project and gives advice on how to describe your REST API.",t:"Documenting GLUE API Resources | Spryker"},"689":{i:0.000932965337835288,u:"../tutorials/introduction/glue_api/extending-a-rest-request-resource.htm",a:"This tutorial describes how to extend the Glue API modules to give you the possibility to customize them for your own needs.",t:"Extending a REST API Resource | Spryker"},"690":{i:0.000504299242955979,u:"../tutorials/introduction/glue_api/validating-rest-request-format.htm",a:"This tutorial describes the means used for validation of the requests sent to the REST endpoints and talks through the validation rule format.",t:"Validating REST Request Format | Spryker"},"691":{i:0.000504299242955979,u:"../tutorials/introduction/glue_api/versioning-rest-request-resources.htm",a:"This tutorial describes how to implement the versioning system for the REST API resources to provide backward compatibility. ",t:"Versioning REST API Resources | Spryker"},});