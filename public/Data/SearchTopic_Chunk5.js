define({"422":{i:0.000362747430527306,u:"../zed/persistence-layer.htm",a:"Zed’s persistence layer is the owner of the schema, entities and queries. This layer knows the database structure and holds the connection to it.\n Integrated Technologies\n Propel\tFast and simple ORM Framework\nMySQL or PostgreSQL\tBoth databases are supported\n Persistence Layer Elements:\n The ...",t:"Persistence Layer"},"423":{i:0.00226249557038797,u:"../zed/persistence_layer/database_overview.htm",a:"ORM Directory The ORM directory contains two folders: Propel and Zed. The src/Orm/Propel is for: Configuration in Propel format (generated propel.json - don’t touch). Copy of merged schema files (don’t touch). Migration files (can be on gitignore or can be committed, the decision is made on the ...",t:"Database Overview"},"424":{i:0.00274213554604558,u:"../zed/persistence_layer/database_schema_definition.htm",a:"With Propel, a database schema is defined in an XML-file. Each module carries it’s own part of the big schema that is collected and merged. Propel’s documentation on defining the database schema:  Database schema Example Schema XML File This file can be copied into your module into ...",t:"Database Schema Definition"},"425":{i:0.00235548349224843,u:"../zed/persistence_layer/entity-manager.htm",a:"\n    Since Kernel version 3.2, it is possible to create an entity manager class in your persistence layer.\nIt will be responsible for saving, updating and deleting data. Using the class, you can separate data from persistence details (Propel). \nIt is important to not overuse the entity manager or ...",t:"Entity Manager"},"426":{i:0.00235548349224843,u:"../zed/persistence_layer/entity.htm",a:"In Spryker an entity represents one entry from a table in the database. Entities are an implementation of the  Active record design pattern , so their usage is very simple.\nFor a full documentation see  Propel’s Active Record Reference .  Spryker’s entities are called Active Record classes or just ...",t:"Entity"},"427":{i:0.00244521017091592,u:"../zed/persistence_layer/query_container.htm",a:"A query container holds all the database queries of the current module. Each module has exactly one query container, which also acts as an entry point to the persistence layer. Internally it uses  query objects  and returns unterminated queries. As you can see in the example below, the query ...",t:"Query Container"},"428":{i:0.00268918496412992,u:"../zed/persistence_layer/query_objects.htm",a:"Query objects provide an object-oriented API for writing database queries which are used in  query containers .\n Please check the official  Propel Query Reference  for a complete documentation.\n\n How to Create a New Query Object\n Query object are created by Propel during the build model step. See ...",t:"Query Objects"},"429":{i:0.00268918496412992,u:"../zed/persistence_layer/repository.htm",a:"\n    Since Kernel version 3.2 it\u0027s possible to use a Repository class in your persistence layer.\n    The repository implements the  repository pattern , which means you have clear separation between business and persistence layers. \n    Propel entities are not allowed outside the persistence layer. ...",t:"Repository"},"430":{i:0.000415698012442965,u:"../zed/controllers-actions.htm",a:"Zed’s communication layer is the entry point to the system. Here are executed all of the external requests from users, the Yves-application and all command-line calls. The purpose of this layer is to retrieve the data, delegate to the business layer and to handover it to the presentation layer. The ...",t:"Controllers and Actions"},"431":{i:0.000336727520710235,u:"../yves/yves.htm",a:"Front-End Yves In this section you will find the following content: Client Controllers and Actions Frontend Translations Using Redis as a KV Storage Implementing URL Routing in Yves",t:"Front-End Yves"},"432":{i:0.00044692190422345,u:"../yves/client.htm",a:"Yves is divided into two:\n\n The part with controllers, forms, templates etc\n Client part which provides access to the search and storage engine and the Zed application.\n The purpose of the client is to encapsulate the logic which runs the shop independent from the overlying application. So in case ...",t:"Client"},"433":{i:0.000393971322307791,u:"../yves/controllers-actions.htm",a:"Controllers are placed inside the Controllers folder in Yves; they provide an entry point to the system for requests submitted by the front-end users.\n The methods inside of a controller are called actions. Usually an action reads the incoming request-data, maybe validates it with a form, delegates ...",t:"Controllers and Actions"},"434":{i:0.000393971322307791,u:"../yves/frontend-translations.htm",a:"Textual translations are handled by the Glossary-module. You can use the GlossaryFacade in Zed to add entries to Glossary (or you can use the Zed UI).\n\n \u003c?php\nclass GlossaryFacade extends AbstractFacade\n{\n    public function createTranslation($keyName, LocaleTransfer $locale, $value, $isActive = ...",t:"Frontend Translations"},"435":{i:0.00044692190422345,u:"../yves/redis-as-kv.htm",a:"This article describes how Redis is used within Spryker; the current functionality can be extended according to your needs.\n About Redis is a key-value data store and for the values it supports a large collection of data structures, such as strings, hashes, lists or sets.\n\n The following table shows ...",t:"Using Redis as a KV Storage"},"436":{i:0.000728847692529331,u:"../yves/yves-url-routing.htm",a:"Implementing URL Routing in Yves The words contained in an URL play a major factor for search engine to determine if the page is relevant for a specific search query. The URL routing is a mechanism used to map URLs to the code that gets executed when a specific request is being submitted. URL ...",t:"URL Routing"},"437":{i:0.000336727520710235,u:"../spryker-middleware.htm",a:"Spryker Middleware is a constructor that allows setting up a linear data processing flow, for import/export of data from system to shop, or vice versa.",t:"Spryker Middleware | Spryker"},"438":{i:0.000622946528698013,u:"../api/definition-api.htm",a:"According to  Semantic Versioning  the Spryker Commerce OS core team releases a major version “when there are incompatible API changes”. To make a sound decision about the type of the version, we need to define our internal APIs.\n \nIn Spryker Commerce OS’s core, all public methods in theses ...",t:"Definition of API"},"439":{i:0.000336727520710235,u:"../search_design/search-design-patterns.htm",a:" Search Design Patterns for E-Commerce: Schema Structure, Data Driven Ranking \u0026 More Source:  http://project-a.github.io/on-site-search-design-patterns-for-e-commerce/ By  Dr. Martin Loetzsch  ( Project A ) and Krešimir Slugan ( Contorion ) Providing users with a proper on-site search user ...",t:"On-Site Search "},"440":{i:0.000336727520710235,u:"../search_design/data-driven-ranking.htm",a:"When a query returns hundreds or thousands of results, it is absolutely crucial that the products at the top of the search result page are the ones that are most relevant to the user. Getting this right will lead to a higher conversion probability and increase customer happiness. Implementing proper ...",t:"Data-Driven Ranking"},"441":{i:0.000336727520710235,u:"../search_design/full-text-search.htm",a:"Full-text search is a feature where a user enters arbitrary text into a search field and then gets documents that are relevant for that query. It is normally combined with faceted navigation. In the example below, a user searched for “hammer” and then further filtered for hammer weights of 2000 gram ...",t:"Full-Text Search"},"442":{i:0.000336727520710235,u:"../search_design/generic-faceted-search.htm",a:"Faceted search (sometimes also called faceted navigation) allows users to navigate through a web site by applying filters for categories, attributes, price ranges and so on. It’s probably the most basic feature of a search and users expect this to work. Unfortunately, we observed that this is also ...",t:"Generic Faceted Search"},"443":{i:0.000336727520710235,u:"../search_design/multi-term-auto-completion.htm",a:"Term completion is a feature where a user gets suggestions for search terms and matching search results as he types the query. We call a completion multi-term when it is able to combine terms from different attributes in an open-ended fashion. In the below example, a user entered “fortis” (a brand) ...",t:"Multi-Term Auto Completion"},"444":{i:0.000336727520710235,u:"../search_design/naive-product-centric-approach.htm",a:"A Naive Product Centric Approach Finding products on e-commerce website can be tricky, even when you know exactly what you are looking for. Throughout this document, we will assume a customer wants to buy a hammer that weighs 2kg. A product that would meet his needs might be this “Fäustel” by ...",t:"A Naive Product-Centric Approach"},"445":{i:0.000336727520710235,u:"../search_design/other-best-practices.htm",a:"Finally, we want to provide you with a list of some additional and potentially useful principles regarding the setup of an on-site search experience.\n \nIndex Pages, Not Products\n\n Each document we put in Elasticsearch corresponds to an URL  The mapping type in our schema is called page, not product ...",t:"Other Best Practices"},"446":{i:0.000336727520710235,u:"../search_design/personalization-dymanic-pricing.htm",a:"Especially in businesses with a B2B focus, customers expect to get discounts after they have been using the service/website for a longer period of time. The search infrastructure should be able to handle such use cases and customers should be able to see their own discounted prices while browsing ...",t:"Personalization: Dynamic Pricing"},"447":{i:0.000336727520710235,u:"../search_design/simple-spelling-suggestions.htm",a:"Spelling suggestions provide the users with alternative search terms when the search query does not return any results:\n Translation: Unfortunately there were 0 results for your exact search term “hammer holk”. Did you possibly mean hammer holz? This is one of the simplest features you can build ...",t:"Simple Spelling Suggestions"},"448":{i:0.000336727520710235,u:"../search_design/usage-driven-schema-structure.htm",a:"Both the schema and the query generator should not need to know that there is such a thing as as the weight of a hammer. We will argue for a document structure and schema design that is not built around the original data but around the usage of attributes in search operations.\n\n At Contorion, this ...",t:"Usage-Driven Schema \u0026 Document Structure"},"449":{i:0.000336727520710235,u:"../state_machine_cookbook/state-machine-cookbook.htm",a:"State machines are a model of computation used to automate processes. In Spryker you can use the OMS module to automate the management of orders or the StateMachine module to automate other processes you define in your shop. Both behave similar, but the OMS one is a customized solution to manage the ...",t:"State Machine Cookbook - Part I - State Machine Fundamentals"},"450":{i:0.000336727520710235,u:"../state_machine_cookbook/state-machine-cookbook-2.htm",a:"\nThis chapter will help you model a state machine using Spryker to manage your sale orders.\n First of all, it’s important to know which tasks must be executed after an order is submitted and in which order. Keep in mind that you can define more than one state machine in your system to cover the use ...",t:"State Machine Cookbook - Part 2 -Building a State Machine"},"451":{i:0.000336727520710235,u:"../resources_and_developer_tools/about-resources.htm",a:"About Resources and Developer Tools This section contains general information and resources for developers. The topics covered in resources are general topics that do not pertain to a specific component or capability.",t:"About Resources and Developer Tools"},"452":{i:0.00157527798290211,u:"../resources_and_developer_tools/session_management/session-handlers.htm",a:"We provide a number of session handlers to work with different storages. By default, the demo-shop uses a locking Redis session handler for Yves and a non-locking Redis session handler for Zed in the development environment.\n\n The following session handlers are currently available:\n\n File\n ...",t:"Session Handlers"},"453":{i:0.00291425609216966,u:"../resources_and_developer_tools/session_management/session-management-201903.htm",a:"User, Customer and Customer Page modules support the session behaviour in Spryker. In Zed, it is managed by a javascript while in Yves it is managed by a widget. Configuration for both of them is located in the same confi file, depending on the environment. They both use the same formula for session timeout calculation. The use case scenarios which can be assumed using the formula are included.",t:"Session Management | Spryker"},"454":{i:0.000389678102625894,u:"../resources_and_developer_tools/configuration-management.htm",a:"Default and Local Configuration Files\n Under config/Shared you’ll find several files that are used for the system’s configuration, that can be used by both Yves and Zed.\n The files are merged in a fixed order if they exist. So the entries of config_default.php are overwritten by the entries in ...",t:"Configuration Management"},"455":{i:0.00133002701035048,u:"../resources_and_developer_tools/console-commands.htm",a:"We provide an integrated mechanism to add command line calls. Technically this is based on Symfony’s Console Component.\n\t\t \n\t\t\tGet a list of all available commands\n\t\t You can see the list of all of the commands by running: vendor/bin/console. vagrant@spryker-vagrant ➜  current git:(develop) ✗ ...",t:"Console Commands"},"456":{i:0.000336727520710235,u:"../resources_and_developer_tools/container-globals.htm",a:"The ContainerGlobals is a way to inject dependencies which are available inside your  Factories . Every dependency added to the ContainerGlobals is available by using getProvidedDependency() in your factory.\n \nTo add something globally you need to create a service provider and add it to the ...",t:"Container Globals"},"457":{i:0.000336727520710235,u:"../resources_and_developer_tools/core-extension.htm",a:"We offer several ways like plugins to hook into the core’s behavior and extend this without modifications. But sometimes this is not enough, so you need to replace a method which is deep in the core.\n\n Before your proceed, double check if there is no other way to solve your requirement, maybe there ...",t:"Core Extension"},"458":{i:0.000716612020564852,u:"../resources_and_developer_tools/cronjob-scheduling.htm",a:"We use  Jenkins  for cronjob scheduling. Compared to Crontab, there are several benefits: Jobs are queued and can be manually executed Job definitions are under version control and can be changed by any developer Console output available for debugging Add a new job and run it Jobs are defined in ...",t:"Cronjob Scheduling"},"459":{i:0.000336727520710235,u:"../resources_and_developer_tools/data-importers-review-implementation.htm",a:"The article will walk you through use cases and the process of implementing the data importers in your project.",t:"Data Importers | Spryker"},"460":{i:0.000336727520710235,u:"../resources_and_developer_tools/dataimporter-speed-optimization.htm",a:"Importing big amount of data into a system can pose a real problem. When not optimized, the importing process will most likely be slow.",t:"Dataimporter Speed Optimization | Spryker"},"461":{i:0.000463355687328441,u:"../resources_and_developer_tools/dependency-provider.htm",a:"Each (Undefined variable: General.bundles/modules) ships with a DependencyProvider class which explicitly defines services and external dependencies to other (Undefined variable: General.bundles/modules). For instance when the Cms module requires the Glossary module this needs to be configured here. ...",t:"Dependency Provider"},"462":{i:0.00172657234046008,u:"../resources_and_developer_tools/factory.htm",a:"All (Undefined variable: General.bundles/modules) are shipped with a dedicated factory for each layer. The responsibility of the factory is to create new instances of the classes from the same layer and module.\n\n The following example shows a typical method from a factory. The method ...",t:"Factory"},"463":{i:0.000336727520710235,u:"../resources_and_developer_tools/flash-messenger.htm",a:"This tutorial describes how to show a message in the Zed GUI.\n In the controller you can use these shortcut methods to show a user message in the GUI. The messages will be translated later when they are rendered.\n\n \u003c?php\nclass IndexController extends AbstractController\n{\n    public function ...",t:"Flash Messenger"},"464":{i:0.000336727520710235,u:"../resources_and_developer_tools/internal-server-error-handling.htm",a:"This document describes how to configure the behavior when an internal server error occurs. Whether you need to show the details of the error or render a static page for any internal error, this is done through configuration.\n\n Configure Internal Server Error  Page\nDepending on the environment on ...",t:"Internal Server Error Handling"},"465":{i:0.000336727520710235,u:"../resources_and_developer_tools/performance-scalability.htm",a:"Spryker Commerce OS was built to enable the development of high performance e-commerce applications that are able to support an extremely high number of unique visitors. However, no application can be both, light and heavy, at the same time.\n\n Therefore, we have two applications: Yves and Zed. Both ...",t:"Performance and Scalability"},"466":{i:0.0014176993783163,u:"../resources_and_developer_tools/plugin.htm",a:"Plugins are small classes that are used to connect bundles in a flexible and configurable way. In contrast to a direct call to a facade of another module, there can be an array of provided (Undefined variable: General.bundles/modules).\n\n According to our conventions, plugins are the only classes ...",t:"Plugin"},"467":{i:0.000336727520710235,u:"../resources_and_developer_tools/plugin-overview.htm",a:"To see which Plugin can be used in which DependencyProvider we added a feature Plugin Overview. It gives you several ways of displaying our plugin usages.",t:"Plugin Overview | Spryker"},"468":{i:0.000336727520710235,u:"../resources_and_developer_tools/postgres-index-generator.htm",a:"Postgres doesn\u0027t automatically add indexes to foreign key columns. This can lead to performance issues with the database. In MySQL, you will get the indexes for the foreign key columns without the need to do something.  Most likely no one adds indexes for the foreign key columns manually when they ...",t:"Postgres Index Generator"},"469":{i:0.00210017422316788,u:"../resources_and_developer_tools/publish-and-synchronization-reference.htm",a:" To implement Publish and Synchronize in your code, you need to perform the following steps: 1. Add Publish Events Publish and Synchronize are event-driven. To start publishing data to the frontend, an event must be triggered. For this purpose, you need to add events for all changes you want to ...",t:"Publish and Synchronization Reference"},"470":{i:0.000389678102625894,u:"../resources_and_developer_tools/service.htm",a:"Service is a Spryker application layer shared by the Client application layer, the Zed application layer, and Yves application layer. This service layer provides the ability to register a service once and have it applied to both layers. Usage is focused on level details (infrastructure layer). For ...",t:"Service"},"471":{i:0.0005163062692441,u:"../resources_and_developer_tools/transfer-objects.htm",a:"Transfer objects are simple data containers. The article provides information on the transfer object usage: simple usage, object nesting, transfer object creation, generation and transfer file expansion. ",t:"Transfer Objects | Spryker"},"472":{i:0.000336727520710235,u:"../maintenance/maintenance.htm",a:"Maintenance This section is dedicated to information on carrying out maintenance and maintenance-related questions. Specifically, it contains the following topics: Post-Installation Steps and Additional Info     Virtual Machine Cleanup",t:"Maintenance"},"473":{i:0.00234922217188592,u:"../maintenance/post-installation-steps-and-additional-info.htm",a:" Git Configuration If you want to commit from within the VM, it is recommended to set the right Git preferences: git config --global user.email \"your.email@domain.tld\"\ngit config --global user.name \"Your Name\"\ngit config --global push.default simple\ngit config --global pull.rebase true\t\t VM ...",t:"Post-Installation Steps and Additional Info    "},"474":{i:0.000479837024704124,u:"../maintenance/vm-cleanup.htm",a:"Used to be: http://spryker.github.io/getting-started/installation/virtual-machine-cleanup/ If you need to cleanup the environment set up in the virtual machine, you can either do this by running a script or execute the cleanup steps manually.\n\n VM Cleanup - Automatic To cleanup the VM: Run the setup ...",t:"Virtual Machine Cleanup"},"475":{i:0.000336727520710235,u:"../front-end_developer_guide/user-interface-guide.htm",a:"In this section, you will find an introduction about how to build the UI for your project, when working with Spryker. The documents under this section will help you get started on designing and implementing the UI for both the front-end(Yves) and back-end(Zed) application. Academy Navigation To ...",t:"User Interface Guide"},"476":{i:0.000336727520710235,u:"../front-end_developer_guide/atomic_frontend/overview.htm",a:"Spryker Frontend implements the atomic design design. Read about the basic principles of Spryker UI implementation. Spryker UI is based on the component model, atomic design and BEM methodology concepts. ",t:"Atomic Frontend | Spryker"},"477":{i:0.000336727520710235,u:"../front-end_developer_guide/demoshop/overview.htm",a:"Demoshop  TODO:",t:"Demoshop "},"478":{i:0.00524930320597335,u:"../front-end_developer_guide/demoshop/antelope_global_tool/overview.htm",a:" Antelope Deprecation Notice: As of 04/2017 Antelope will be replaced by  Oryx . You can still use Antelope however, no new development is planned for this component. Antelope is an  npm  global command line tool based upon  webpack  module bundler, designed to  build  the assets and  publish  ...",t:"Antelope Overview "},"479":{i:0.00227979469589983,u:"../front-end_developer_guide/demoshop/antelope_global_tool/asset-management-overview.htm",a:" Antelope Deprecation Notice: As of 04/2017 Antelope will be replaced by  Oryx . You can still use Antelope however, no new development is planned for this component. When using the term assets,\nwe refer to a set of resources used for building UI. These resources include; html, css (or less, sass, ...",t:"Asset Management - Overview "},"480":{i:0.00223600231801746,u:"../front-end_developer_guide/demoshop/antelope_global_tool/build-optimization-antelope.htm",a:" Antelope Deprecation Notice: As of 04/2017 Antelope will be replaced by  Oryx . You can still use Antelope however, no new development is planned for this component. We use Antelope for transpiling/building the assets and to optimize the resulting output.\n \nRead more about  antelope configuration ...",t:"Build and Optimization for Antelope "},"481":{i:0.00247357580043327,u:"../front-end_developer_guide/demoshop/antelope_global_tool/cli.htm",a:" Antelope Deprecation Notice: As of 04/2017 Antelope will be replaced by Oryx. You can still use Antelope however, no new development is planned for this component. Antelope is a command line interface tool available and ready for use from your terminal/console .\n\n Before you proceed with setup, ...",t:"CLI "},"482":{i:0.00247357580043327,u:"../front-end_developer_guide/demoshop/antelope_global_tool/configuration.htm",a:" Antelope Deprecation Notice: As of 04/2017 Antelope will be replaced by Oryx. You can still use Antelope however, no new development is planned for this component. A configuration file is a set of properties and methods that define how to process assets.\n\n Read more about  asset build and ...",t:"Configuration "},"483":{i:0.00220573815082435,u:"../front-end_developer_guide/demoshop/antelope_global_tool/development-antelope.htm",a:" Antelope Deprecation Notice: As of 04/2017 Antelope will be replaced by  Oryx . You can still use Antelope however, no new development is planned for this component. Development refers to writing your own assets, consuming external dependencies and linking resources to make them work together.\n ...",t:"Development with Antelope "},"484":{i:0.00199388898047259,u:"../front-end_developer_guide/demoshop/antelope_global_tool/download-structure-antelope.htm",a:"Download and Structure (Antelope)  Antelope Deprecation Notice: As of 04/2017 Antelope will be replaced by  Oryx . You can still use Antelope however, no new development is planned for this component. Here you will find out how to download external dependencies and where to place them, together with ...",t:"Download and Structure - Antelope"},"485":{i:0.00247357580043327,u:"../front-end_developer_guide/demoshop/antelope_global_tool/publishing.htm",a:" Antelope Deprecation Notice: As of 04/2017 Antelope will be replaced by  Oryx . You can still use Antelope however, no new development is planned for this component. To publish assets means to place them (or the build output files) in a place where they can be accessed and loaded by the browser.\n ...",t:"Publishing "},"486":{i:0.000336727520710235,u:"../front-end_developer_guide/demoshop/frontend/frontend-overview.htm",a:" To learn how to build your assets in our Demoshop, read the  Demoshop Guide .\n\n Asset Management\n A set of resources used to build the UI, that includes html, css (or less, sass, stylus, etc.) and js (or jsx, etc.) files, images, fonts and so on.\n Assets are files, a large collection of files; a ...",t:"Frontend Overview "},"487":{i:0.000393971322307791,u:"../front-end_developer_guide/demoshop/frontend/build-optimization.htm",a:"Build and Optimization  We use  Webpack  and  Oryx  for transpiling/building the assets and to optimize the resulting output. For more on Webpack build process and requirements see: Key Concepts Getting started Using a Configuration Configuration Details Learn more about Spryker Oryx frontend ...",t:"Build Optimization"},"488":{i:0.000393971322307791,u:"../front-end_developer_guide/demoshop/frontend/demoshop-guide.htm",a:" Bootstrap the project To install all frontend the external dependecies for Yves and Zed, run in the VM console: cd /path/to/project/root ./setup -i Yves To build assets for Yves, run in the console: cd /path/to/project/root\nnpm run yves # build assets in development mode\nnpm run yves:dev # build ...",t:"Demoshop Guide "},"489":{i:0.000587752426841222,u:"../front-end_developer_guide/demoshop/frontend/development.htm",a:" Development refers to writing your own assets, consuming external dependencies and linking resources to make them work together.\n \nEssentially, the code you’re going to produce can be html, css and javascript (in any of their forms: jade, sass, less, coffescript, ecma 6, react js, etc.).\n\n ...",t:"Development "},"490":{i:0.00142845805236946,u:"../front-end_developer_guide/demoshop/frontend/download-structure.htm",a:" Here you will find out how to download external dependencies and where to place them, together with your own asset files.\n\n This page contains references to the following tools:   Webpack ,  Oryx  (Our frontend helper tool)and Oryx for Zed (Zed\u0027s frontend full automation tool). Make sure you are ...",t:"Download and Structure "},"491":{i:0.000393971322307791,u:"../front-end_developer_guide/demoshop/frontend/public-folder.htm",a:" To publish means to place the built assets in a place where they can be accessed and loaded by the browser.\n In the whole project, the only place with such access rights is the @project/public folder.\n\n Application Folders\n @project/public/Yves @project/public/Zed These folders contain only ...",t:"Public Folder "},"492":{i:0.00325126553269495,u:"../front-end_developer_guide/demoshop/oryx/oryx.htm",a:"  As of April 2017, Oryx replaces  Antelope Introduction\n Oryx is the Spryker projects frontend helper. The purpose of Oryx is to simplify the asset building process, giving developers the freedom to choose and configure the preprocessors for the frontend.\n\n Oryx relies on webpack 2.\n\n Oryx for ZED ...",t:"Oryx "},"493":{i:0.00327989311136109,u:"../front-end_developer_guide/demoshop/oryx/oryx-for-zed.htm",a:"  As of April 2017, Oryx replaces  Antelope Introduction\n oryx-for-zed is an extension of Oryx that performs a full build for Spryker Zed UI applications. It also provides access to Zed settings and Zed webpack configuration, so you can extend/change the whole building process.\n\n Requirements\n ...",t:"Oryx for Zed "},"494":{i:0.000336727520710235,u:"../front-end_developer_guide/demoshop/twig_templates/twig-overview.htm",a:" Given that we are working on a web application, we need a proper way to generate HTML dynamically. The most common approach relies on templates and for this we decided to go with Twig Template Engine.\n\n \nYou can use other technology for the front-end of your application as well; this is just a ...",t:"Overview - Twig "},"495":{i:0.000622946528698013,u:"../front-end_developer_guide/demoshop/twig_templates/twig-best-practices.htm",a:" Include vs Macros vs Embed\n With includes, you can include an entire template. The template has access to any template variables that are currently in scope.\n\n With macros, you are defining a kind of function within Twig that can render a particular component given appropriate objects.\n\n So you ...",t:"Best Practices - Twig Templates "},});