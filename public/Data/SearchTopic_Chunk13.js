define({"1051":{i:0.000247615369722404,u:"../tutorials/howtos/ht-product-data-import-frontend.htm",a:"Product Customization This article describes flow of the product data from importing it to the SQL database to showing it in the front-end view.\n Importing Products to SQL Database\n Products are imported in the SQL database through the Importer module. The product details are parsed from CSV files, ...",t:"HowTo - Product Data from Import to Front-End View"},"1052":{i:0.000247615369722404,u:"../tutorials/howtos/ht-setup-schedulers-for-different-environment-201907.htm",a:"Problem Spryker applications demand performing repetitive background operation - jobs. Such operations are necessary for synchronizing denormalized data into Search engine, key-value store, etc. We recommend running a set of predefined jobs in order for Spryker applications to operate properly. ...",t:"HowTo - Set up Schedulers for Different Environments"},"1053":{i:0.000262649183933159,u:"../tutorials/howtos/ht-setup-spryker-with-mysql.htm",a:"Spryker supports MySQL database and for installing it with this database, follow these instructions to adjust the configuration. MySQL Version Currently Spryker works only with MySQL version 5.7 or higher.  Adjusting Spryker to Run with MySQL \n    For running the Spryker Demoshop with MySQL, it is ...",t:"HowTo - Setup Spryker with MySQL"},"1054":{i:0.000262649183933159,u:"../tutorials/howtos/ht-setup-stores-with-multiple-locales.htm",a:"Multiple Locales This article describes the steps that you need to consider when you have to setup stores with multiple locales.\n\t\t Configure Locales for Store\n\t\t The stores configuration can be found in the config/Shared/stores.php file. \n\n\t\t For each store you can define a set of locales; the ...",t:"HowTo - Setup Stores with Multiple Locales"},"1055":{i:0.000262649183933159,u:"../tutorials/howtos/ht-create-personalized-prices.htm",a:" Personalized Prices This article describes the steps that you need to consider when you need to implement personalized prices for customer groups.\n \nOverview\n When implementing special prices that are according to the group the customer is part of, several steps need to be considered.\n Extend ...",t:"HowTo - Create Personalized Prices  "},"1056":{i:0.000247615369722404,u:"../tutorials/howtos/ht-use-queue-data-importer-201903.htm",a:"This article will explain you how to use the Queue Data feature that adds the ability to import data with the help of message queues.",t:"HowTo - Use Queue Data Importer | Spryker"},"1057":{i:0.000247615369722404,u:"../tutorials/howtos/ht-use-transfer-objects-201903.htm",a:"This article describes how to use Transfer objects that are simple data containers for getting data and more expressive method signatures.",t:"HowTo - Use Transfer Objects | Spryker"},"1058":{i:0.000247615369722404,u:"../tutorials/howtos/ht-implement-dummy-payment-methods.htm",a:"How to Implement a New Dummy Payment Method A set of HowTo guides collected under this section will show the procedures needed to implement dummy payment methods. Depending on the payment method you would like to implement, navigate a specific HowTo guide from the table below.",t:"How to Implement a New Dummy Payment Method"},"1059":{i:0.000259308336330769,u:"../tutorials/howtos/how_to_implement_direct_debit/ht-implement-dd.htm",a:" This article describes the steps how to implement direct debit payment method without integrating with a third party payment service provider.\n For this example, we will add a new module called PaymentMethods.\n\n If it is your first time creating a new module, check out the  tutorial on creating a ...",t:"HowTo - Implement Direct Debit Payment   "},"1060":{i:0.000389351701501441,u:"../tutorials/howtos/how_to_implement_direct_debit/dd-fe-implementation.htm",a:" Form creation\n In Yves, the starting point is to build a form. Add a new module in Yves Add a Form folder where we will place the implementation for building the form 1. Adding the data provider The first step is to add the data provider, inside the Form/DataProvider/ folder: \u003c?php\nnamespace ...",t:"Direct Debit Front-end Implementation   "},"1061":{i:0.000303390824423778,u:"../tutorials/howtos/how_to_implement_direct_debit/dd-checkout-implementation.htm",a:" The next step is to integrate direct debit into Checkout. In the PaymentMethods/Dependency/Injector from in Yves add the CheckoutDependencyInjector, that will inject the direct debit form and handler into the Checkout module: Click to expand the code sample \u003c?php\n\nnamespace ...",t:"Integrate Direct Debit into Checkout    "},"1062":{i:0.000389351701501441,u:"../tutorials/howtos/how_to_implement_direct_debit/dd-be-implementation.htm",a:" \nPersist payment details\n The payment details for the direct debit payment method need to be persisted in the database.  1. Defining a new table to store payment details data  Inside the Persistence/Propel/Schema/ folder in Zed add the spy_directdebit_schema.xml file with the following content: ...",t:"Direct Debit Back-End Implementation "},"1063":{i:0.000389351701501441,u:"../tutorials/howtos/how_to_implement_direct_debit/dd-shared-implementation.htm",a:" This procedure will help us to identify a new payment type through some unique constants. We are going to define those constants under the Shared namespace, since they’re needed both by Yves and Zed.\n Create the PaymentMethodsConstants interface under the Shared namespace, where you’ll define these ...",t:"Direct Debit Shared Implementation   "},"1064":{i:0.000303390824423778,u:"../tutorials/howtos/how_to_implement_direct_debit/dd-test-implementation.htm",a:" When you have completed the instructions on  front end ,  back end  and  shared  implementation, you are able to test the payment method you just implemented.\n\n  This is the last step for this tutorial.\n\n All you need to do is to submit a new order from Yves. After that you can control the flow of ...",t:"Testing the Direct Debit Implementation   "},"1065":{i:0.000259308336330769,u:"../tutorials/howtos/how_to_implement_invoice_payment/ht-implement-invoice-payment.htm",a:" Invoice Payment This article describes the steps that you need to consider when you need to implement invoice payment method without integrating with a third party payment service provider.\n In this HowTo, we will add a new module called PaymentMethods.\n\n If this is you first time creating a new ...",t:"HowTo - Implement Invoice Payment   "},"1066":{i:0.000389351701501441,u:"../tutorials/howtos/how_to_implement_invoice_payment/ht-invoice-payment-fe.htm",a:" Form creation\n In Yves, the starting point is to build a form. Add a new module in Yves Add a Form folder where we will place the implementation for building the form 1. Adding the data provider The first step is to add the data provider, inside the Form/DataProvider/ folder: \u003c?php\nnamespace ...",t:"HowTo - Implement Invoice Payment Front End   "},"1067":{i:0.000303390824423778,u:"../tutorials/howtos/how_to_implement_invoice_payment/ht-invoice-payment-checkout.htm",a:" The next step is to integrate the invoice payment into Checkout. In the PaymentMethods/Dependency/Injector from in Yves add the CheckoutDependencyInjector that will inject the invoice form and handler into the Checkout module:\n Click here to expand the code sample \u003c?php\n\nnamespace ...",t:"HowTo — Integrate Invoice Payment into Checkout"},"1068":{i:0.000389351701501441,u:"../tutorials/howtos/how_to_implement_invoice_payment/ht-invoice-payment-be.htm",a:" Checkout Plugins\n To integrate the invoice payment method into the checkout, we need to provide implementations for these 2 plugins: CheckoutPreCondition PaymentSaveOrder Perform the following procedure: Add the following 2 plugins in Zed, inside the Communication/Plugin/Checkout/ folder of the new ...",t:"HowTo - Implement Invoice Payment Back End   "},"1069":{i:0.000389351701501441,u:"../tutorials/howtos/how_to_implement_invoice_payment/ht-invoice-payment-fe-be-shared.htm",a:" This procedure will help us to identify the new payment type through some unique constants. We are going to define those constants under the Shared namespace, since they’re needed both by Yves and Zed.\n Create the PaymentMethodsConstants interface under the Shared namespace, where you’ll define ...",t:"HowTo - Implement Invoice Payment - Shared Implementation   "},"1070":{i:0.000303390824423778,u:"../tutorials/howtos/how_to_implement_invoice_payment/ht-invoice-payment-test.htm",a:" When you have completed the instructions on  front end ,  back end  and  shared  implementation, you are able to test the payment method you just implemented.\n\n  This is the last step for this tutorial.\n\n All you need to do is to submit a new order from Yves. After that you can control the flow of ...",t:"HowTo - Implement Invoice Payment - Test   "},"1071":{i:0.000259308336330769,u:"../tutorials/howtos/how_to_implement_prepayment/ht-implement-prepayment.htm",a:" Prepayment\n This article describes the steps that you need to consider when you need to implement the prepayment method without integrating with a third party payment service provider.\n In this HowTo we will add a new module called PaymentMethods.\n\n If this is your first time creating a new module, ...",t:"HowTo - Implement Prepayment   "},"1072":{i:0.000389351701501441,u:"../tutorials/howtos/how_to_implement_prepayment/ht-prepayment-fe.htm",a:" Form creation\n In Yves, the starting point is to build a form. Add a new module in Yves Add a Form folder where we will place the implementation for building the form 1. Adding the data provider The first step is to add the data provider, inside the Form/DataProvider/ folder: \u003c?php\nnamespace ...",t:"HowTo - Implement Prepayment Front End   "},"1073":{i:0.000303390824423778,u:"../tutorials/howtos/how_to_implement_prepayment/ht-prepayment-checkout.htm",a:" The next step is to integrate prepayment into Checkout. In the PaymentMethods/Dependency/Injector from Yves add the CheckoutDependencyInjector that will inject the prepayment form and handler into the Checkout module:\n Click to expand the code sample \u003c?php\n\nnamespace ...",t:"HowTo — Integrate Prepayment into Checkout   "},"1074":{i:0.000389351701501441,u:"../tutorials/howtos/how_to_implement_prepayment/ht-prepayment-be.htm",a:" To integrate the prepayment method into the checkout, we need to provide implementations for these 2 plugins:\n\n CheckoutPreCondition PaymentSaveOrder Perform the following procedure: Add the following 2 plugins in Zed, inside the Communication/Plugin/Checkout/ folder of the new added module.\n\t\t\t ...",t:"HowTo - Implement Prepayment Back End   "},"1075":{i:0.000389351701501441,u:"../tutorials/howtos/how_to_implement_prepayment/ht-prepayment-shared.htm",a:" This procedure will help us to identify the new payment type through some unique constants. We are going to define those constants under the Shared namespace, since they’re needed both by Yves and Zed.\n Create the PaymentMethodsConstants interface under the Shared namespace, where you’ll define ...",t:"HowTo - Implement Prepayment Shared   "},"1076":{i:0.000303390824423778,u:"../tutorials/howtos/how_to_implement_prepayment/ht-prepayment-test.htm",a:" When you have completed the instructions on  front end ,  back end  and  shared  implementation, you are able to test the payment method you just implemented.\n\n  This is the last step for this tutorial.\n\n All you need to do is to submit a new order from Yves. After that you can control the flow of ...",t:"HowTo - Test Prepayment Implementation   "},"1077":{i:0.000247615369722404,u:"../tutorials/advanced/advanced-tutorials.htm",a:"Advanced Tutorials Advanced tutorials describe advanced Spryker OS activities. Academy Navigation To navigate through content, click on an option from the right-hand table of contents or use the search (above).  You can also use navigation buttons on the top right corner of page:  Navigate previous ...",t:"advanced_tutorials"},"1078":{i:0.000247615369722404,u:"../tutorials/advanced/glue_api/advanced-glue-api-tutorials.htm",a:"The tutorials provide information on how to accomplish advanced tasks related to Spryker Glue API.",t:"Advanced Glue API tutorials | Spryker"},"1079":{i:0.000458088768672982,u:"../tutorials/advanced/glue_api/t-interacting-with-third-party-payment-providers-via-glue-api.htm",a:"This tutorial describes how to implement plugins for interaction between Spryker Glue API and third party payment providers.",t:"Tutorial - Interacting with Third Party Payment Providers via Glue API | Spryker"},"1080":{i:0.000247615369722404,u:"../tutorials/advanced/t-add-button-table.htm",a:"Depending on the button type that needs to be added (Update/Create/Remove/View), the following operations can be called : \u003c?php\n$this-\u003egenerateCreateButton(\u0027destination_URL\u0027, \u0027Button title\u0027, array $buttonOptions);\n$this-\u003egenerateEditButton(\u0027destination_URL\u0027, \u0027Button title\u0027, array ...",t:"Tutorial - Adding Buttons to Tables"},"1081":{i:0.000824130133549304,u:"../tutorials/advanced/t-add-new-bundle.htm",a:"In this tutorial we will create a test module: HelloWorld module; the module’s functionality is to show a ‘Hello world!’ message to the user.\n\n When a new concept needs to be defined, a new module needs to be added on the project side to encapsulate that concept. The new module needs to follow the ...",t:"Tutorial - Adding a New Module"},"1082":{i:0.000247615369722404,u:"../tutorials/advanced/t-calculator-plugin.htm",a:"This tutorial explains how to add a new calculation plugin to the calculator stack. Requirement : display the tax amount per item. Right now, you can get the tax amount from grandTotal. For this, you have to add a new calculator to the existing stack for the  module. First, there are some data ...",t:"Tutorial - Calculator Plugin"},"1083":{i:0.000247615369722404,u:"../tutorials/advanced/t-console-commands.htm",a:"A console command is a PHP class that contains the implementation of a functionality that can get executed from the command line. Spryker offers a wrapper over Symfony’s Console component, that makes the implementation and configuration of a console command easier. Implementing a New Console Command ...",t:"Tutorial - Console Commands"},"1084":{i:0.000247615369722404,u:"../tutorials/advanced/t-create-table-view.htm",a:"This tutorial explains how to retrieve data from the database and render it in a table. Prerequisites: You have created a new  module . Create a QueryContainer Create the QueryContainer class in the HelloWorld module: mkdir -p src/Pyz/Zed/HelloWorld/Persistence/\ntouch ...",t:"Tutorial - Creating a Table View"},"1085":{i:0.000247615369722404,u:"../tutorials/advanced/t-customer-import.htm",a:"This tutorial describes the steps you need to follow in order to extend the Importer module functionality. In this example, we’ll import customer data; of course you can update the code in this tutorial to fit your need. Customer Data File In order to import customer data from a legacy system, the ...",t:"Tutorial - Customer Import"},"1086":{i:0.000247615369722404,u:"../tutorials/advanced/t-database-transactions.htm",a:"To reduce boilerplate code and properly handle database transactions you can use Spryker\\Zed\\PropelOrm\\Business\\Transaction\\DatabaseTransacti onHandlerTrait.\n\n Usage\n To use database transactions in the DatabaseTransactionHandlingExample class: Click to expand the code sample \u003c?php\n\nuse ...",t:"Tutorial - Database Transaction Handling"},"1087":{i:0.000247615369722404,u:"../tutorials/advanced/t-extend-db-schema.htm",a:"Fields can be added to the existing database tables, but they cannot be removed (removing fields from the tables could break the functionalities implemented in Spryker Core). As an example, we will add a description field to the spy_price_type table. The structure of this table is defined in the ...",t:"Tutorial - Extending the Database Schema"},"1088":{i:0.000247615369722404,u:"../tutorials/advanced/t-extend-spryker.htm",a:"To extend the Spryker-Core functionality and to use the Spryker Engine to develop a project, it’s important to understand the folder structure used in Spryker Commerce OS. The project consists of two parts : Spryker Core and Project implementation. They both follow the same structure and the project ...",t:"Tutorial - Extending Spryker"},"1089":{i:0.000247615369722404,u:"../tutorials/advanced/t-internationalization.htm",a:"Challenge When running international business it is important to fine tune the behavior of a shop depending on the country. Topics that differ: Design \u0026 Layout Currency \u0026 price Tax calculation Languages Expense calculation Available Stocks from a different ERP/client Availability of shipment methods ...",t:"Tutorial - Internationalization"},"1090":{i:0.00165072968935422,u:"../tutorials/advanced/t-widgets-widget-plugins.htm",a:"Depending on your version of spryker/kernel module, learn how to implement widgets or widget plugins.",t:"Tutorial - Implement Widgets and Widget Plugins"},"1091":{i:0.000247615369722404,u:"../tutorials/advanced/t-new-relic-monitoring.htm",a:"Installing the PHP agent When accessing your New Relic APM dashboard, you will be asked to download and set up the New Relic agent: It is important to generate a LICENSE KEY (which is different from the API KEY): Then, you\u0027ll be able to install the New Relic agent: Here is the instruction for a ...",t:"Tutorial - New Relic Monitoring"},"1092":{i:0.000613656734598725,u:"../tutorials/advanced/t-transfer-data-yves-zed.htm",a:"Yves gets most of its data from the client-side NoSQL data stores (data such as product details, product categories, prices, etc.). There are situations in which Yves needs to communicate with Zed either to submit data (e.g.: the customer has submitted a new order or subscribed to newsletter) or to ...",t:"Tutorial - Transfering Data Between Yves and Zed"},"1093":{i:0.000247615369722404,u:"../tutorials/advanced/t-twig-extensions.htm",a:"As an example on how to implement a Twig extension, we’ll build a filter which can be used on displaying prices. Implement the filter Add the Twig extension Register the new Twig extension Test your Twig extension Implement the filter Add the logic to a dedicated class, in the module you’re ...",t:"Tutorial - Twig Extensions"},"1094":{i:0.000247615369722404,u:"../tutorials/advanced/t-using-translations.htm",a:"The data stored in the key-value storage can be used for multiple purposes: URL mappings localized product details localized product categories details Translations - Using Twig Translator Twig Translator uses the data that comes from the Redis key-value storage. The glossary keys store static ...",t:"Tutorial - Using Translations"},"1095":{i:0.000247615369722404,u:"../tutorials/advanced/t-working-filter-facets.htm",a:" A search engine is one of the most important functionalities in online shops because it facilitates better navigation, allowing the user to get to the products that are in his interest. The search engine should return a small number of items that match the query. Facets provide aggregated data ...",t:"Tutorial - Working with Filter Facets "},"1096":{i:0.00305384400898603,u:"../tutorials/advanced/t-working-forms.htm",a:"Spryker uses Symfony forms; this tutorial will help you get started on working with forms. You will build a simple newsletter subscription form that contains a field for entering the email address and a submit button. Follow the steps described below to create the newsletter subscription form: ...",t:"Tutorial - Working with Forms"},"1097":{i:0.00165072968935422,u:"../tutorials/advanced/t-working-tables.htm",a:"Spryker has a dedicated component to help you build tables for the Zed UI. This tutorial will help you get started on working with tables. Creating a New Table Configure the Table Prepare the Data Render the Table Creating a New Table To get started defining the new table, create a new class in your ...",t:"Tutorial - Working with Tables"},"1098":{i:0.000247615369722404,u:"../tutorials/advanced/t-yves-bootstrap.htm",a:"Yves and Zed are both built upon the  Silex micro-framework . So most concepts about modern web frameworks apply here as well. In static/public/Yves/index.php you will find the entry for the front-end application. \u003c?php\n$errorHandlerEnvironment = new ...",t:"Tutorial - Yves Bootstrapping"},"1099":{i:0.00601033463241502,u:"../capabilities/payment/refund/refund-2-0.htm",a:" The latest version of this module can be found here  Refund     The Refund module manages the retours refund process. Overview Using  Refund  Extending  Refund  Overview RefundFacade contains the following methods: calculateRefund(array $salesOrderItems, SpySalesOrder $salesOrderEntity) calculates ...",t:"Refund 2.0    "},"1100":{i:0.00246971332577927,u:"../feature_integration_guides/shopping_lists_+_product_options_-_outdated/shopping-lists-product-options-feature-integration-2018-11-outdated.htm",a:" This is an old version of the integration guide. The latest version can be found  here . Install Feature Core Prerequisites To start feature integration, overview ad install the necessary features. 1) Install the Required Modules by Using Composer Run the following command to install the required ...",t:"Shopping Lists Product Options Feature Integration "},"1101":{i:0.000663107058006499,u:"../feature_integration_guides/glue_api/product_api_feature_integration/product-api-feature-integration-201812.htm",a:"This guide will navigate you through the process of installing and configuring the Product API feature in Spryker OS.",t:"Product API Feature Integration | Spryker"},"1102":{i:0.00165072968935422,u:"../feature_integration_guides/glue_api/order-history-api-feature-integration.htm",a:"This guide will navigate through the process of installing and configuring of the Order History API feature used in Spryker OS.",t:"Order History API Feature Integration"},"1103":{i:0.000291987186205073,u:"../capabilities/development/zed_api/zed-api-resources.htm",a:" Each module can have a “{module}Api” module(e.g. CustomerApi for Customer). Such an API module exposes CRUD facade methods (find, get, add, update, remove) that can be mapped to a URL via REST resource/action resolution.\n\n The main Api module contains a dispatcher that delegates to those API module ...",t:"Zed API Resources    "},"1104":{i:0.00189033614695462,u:"../feature_integration_guides/merchant_custom_prices/merchant-custom-prices-feature-integration-201903.htm",a:"The Merchant Custom Price Feature allows setting specific prices for merchants. The guide describes the process of integrating the feature into your project.",t:"Merchant Custom Prices Feature Integration | Spryker"},"1105":{i:0.00127998748206713,u:"../administration_interface_guide/sales/orders-2018_11.htm",a:"This tutorial provides step-by-step instructions for shop owners on how to manage, view all orders created by your customers, as well as create order claims.",t:"Orders v.2018_11 | Spryker"},"1106":{i:0.00165072968935422,u:"../feature_integration_guides/glue_api/inventory-management-feature-integration-201903.htm",a:"This guide will guide you through the process of installing and configuring the Inventory Management feature for your project.",t:"Inventory Management Feature Integration | Spryker"},"1107":{i:0.00240876033014422,u:"../capabilities/product_management/product_options/product-option-module-2.htm",a:"This module manages the product options. The product options are product additions that can be sold with the actual product. ",t:"Product Option Module | Spryker"},"1108":{i:0.00025440483420468,u:"../industry_partners/payment/ratenkauf_by_easycredit/ratenkauf-by-easycredit.htm",a:"Ratenkauf by Easycredit Delete this text and replace it with your own content.",t:"Ratenkauf by Easycredit"},"1109":{i:0.000552412116711091,u:"../feature_integration_guides/approval_process/approval-process-feature-integration-201903.htm",a:"Approval Process Feature Integration  This is an old version of the integration guide. The latest version can be found  here . Install Feature Core Prerequisites \n\t\t\tTo start feature integration, review and install the necessary features:\n\t\t",t:"Approval Process Feature Integration "},"1110":{i:0.00172436822442926,u:"../capabilities/cms/cms_block/cms-block-multistore.htm",a:" MS Multi-store Overview The multi-store CMS block feature enables you to manage CMS blocks display per stores through a store toggle element on CMS Block management pages in the Administration Interface. By default CMS Blocks are available in all stores. This feature provides additional ...",t:"Multi-store CMS Block   "},"1111":{i:0.000289710049512519,u:"../capabilities/product_management/product/product-domain-model.htm",a:" The following domain model shows abstract product and concrete product. One abstract product has at least one up to n different products. A product belongs exactly to one abstract product. Both abstract and concrete product can have 0 to n product attributes. Remember a product attribute table ...",t:"Product Domain Model    "},"1112":{i:0.000354506822109651,u:"../glue_rest_api/glue_api_storefront_guides/retrieving-navigation-trees-201903.htm",a:"The topic demonstrates how to retrieve navigation trees with the help of API endpoints.",t:"Retrieving Navigation Trees"},"1113":{i:0.000769323612892333,u:"../capabilities/search_and_filter/configure-search-features.htm",a:"In this section you’ll learn how to configure faceted navigation, filters, pagination and sorting. ",t:"Configure Search Features  | Spryker"},"1114":{i:0.00127999391546664,u:"../capabilities/company_account/business_on_behalf/business-on-behalf-feature-overview.htm",a:" The latest version of this feature can be found at  Business On Behalf Feature Overview  Business unit includes a number of company users that have certain permissions within the business unit. For more information about business units, see  Business Unit Management . This feature allows having ...",t:"Business on Behalf Feature Overview "},"1115":{i:0.000497493860613143,u:"../feature_integration_guides/glue_api/category-api-feature-integration.htm",a:"This guide will navigate you through the process of installing and configuring the Category API feature in Spryker OS.",t:"Category API Feature Integration"},"1116":{i:0.00226882008870134,u:"../capabilities/tax/tax-2-0.htm",a:"Spryker allows to define different tax sets that include one to many different tax rates.\r\n",t:"Tax Version 2.0 | Spryker"},"1117":{i:0.00165072968935422,u:"../capabilities/order_management/step_engine/step-engine-breadcrumb.htm",a:" To set up breadcrumb navigation for a step collection, first you’ll need to mark which steps you would like to have in your breadcrumb. To mark a step available for breadcrumb just implement \\Spryker\\Yves\\StepEngine\\Dependency\\Step\\StepWithBreadcrumbInterface in all the necessary steps. The ...",t:"Breadcrumb Navigation - Step Engine    "},"1118":{i:0.00127171436895922,u:"../feature_integration_guides/volume-prices-feature-integration.htm",a:"The Volume Prices Feature allows setting specific prices for units based on quantities. The guide describes how to integrate the feature into your project.",t:"Volume Prices Feature Integration | Spryker"},"1119":{i:0.00276781714696967,u:"../capabilities/checkout/multi-step_checkout/checkout-steps.htm",a:"This topic provides information about all checkout steps available for the customers.",t:"Checkout Steps | Spryker"},"1120":{i:0.00102836498159082,u:"../glue_rest_api/glue_api_storefront_guides/checking-out-purchases-and-getting-checkout-data.htm",a:"This article will help you set up the endpoint functionality for creating checkout experience, like placing orders and retrieving checkout information.",t:"Checking Out Purchases and Getting Checkout Data"},"1121":{i:0.00114473060643262,u:"../industry_partners/payment/arvato/v1_0/arvato-risk-check-1-0.htm",a:" \n    Accounted for by external credit agency data and internal existing customer- and order-details\n    the RiskCheck evaluates the probability of payment default for the customer orders.\n \n    The returned decision codes (Result – ActionCode – ResultCode) manage the definition of the eShop’s ...",t:"Arvato 1.0 - Risk Check"},"1122":{i:0.00192913076226682,u:"../capabilities/order_management/state_machine/state-machine-implementing-plugin.htm",a:"To start using state machine, create a new plugin by implementing the StateMachineHandlerInterface. You will find the interface methods to implement.",t:"Implementing the Plugin - State Machine | Spryker"},"1123":{i:0.00141333288146004,u:"../feature_integration_guides/shared_carts/shared-carts-feature-integration-201903.htm",a:"The Shared Carts Feature allows sharing shopping carts within an entire business unit. The guide describes how to integrate the feature into your project. ",t:"Shared Carts Feature Integration | Spryker"},"1124":{i:0.00192913076226682,u:"../capabilities/order_management/state_machine/state-machine-zed-presentation.htm",a:"To add manual trigger button or history for items, add some implementation. State machine provides methods for triggering events and retrieving history.",t:"Updating Presentation in Zed - State Machine | Spryker"},"1125":{i:0.000458088768672982,u:"../capabilities/product_management/product_group/product-group-under-the-hood.htm",a:" Database Schema The ProductGroup module provides spy_product_group table that stores product groups. Product group entities have only the id_product_group field, because we don’t need to display or refer to any groups in any way. The only necessary details for a group are the abstract products that ...",t:"Product Group - Under The Hood    "},});