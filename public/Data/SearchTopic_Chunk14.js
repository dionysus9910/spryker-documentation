define({"1114":{i:0.000246487835793854,u:"../tutorials/advanced/t-console-commands.htm",a:"A console command is a PHP class that contains the implementation of a functionality that can get executed from the command line. Spryker offers a wrapper over Symfony’s Console component, that makes the implementation and configuration of a console command easier. Implementing a New Console Command ...",t:"Tutorial - Console Commands"},"1115":{i:0.000246487835793854,u:"../tutorials/advanced/t-create-table-view.htm",a:"This tutorial explains how to retrieve data from the database and render it in a table. Prerequisites: You have created a new  module . Create a QueryContainer Create the QueryContainer class in the HelloWorld module: mkdir -p src/Pyz/Zed/HelloWorld/Persistence/\ntouch ...",t:"Tutorial - Creating a Table View"},"1116":{i:0.000246487835793854,u:"../tutorials/advanced/t-customer-import.htm",a:"This tutorial describes the steps you need to follow in order to extend the Importer module functionality. In this example, we’ll import customer data; of course you can update the code in this tutorial to fit your need. Customer Data File In order to import customer data from a legacy system, the ...",t:"Tutorial - Customer Import"},"1117":{i:0.000246487835793854,u:"../tutorials/advanced/t-database-transactions.htm",a:"To reduce boilerplate code and properly handle database transactions you can use Spryker\\Zed\\PropelOrm\\Business\\Transaction\\DatabaseTransacti onHandlerTrait.\n\n Usage\n To use database transactions in the DatabaseTransactionHandlingExample class: Click to expand the code sample \u003c?php\n\nuse ...",t:"Tutorial - Database Transaction Handling"},"1118":{i:0.000246487835793854,u:"../tutorials/advanced/t-extend-db-schema.htm",a:"Fields can be added to the existing database tables, but they cannot be removed (removing fields from the tables could break the functionalities implemented in Spryker Core). As an example, we will add a description field to the spy_price_type table. The structure of this table is defined in the ...",t:"Tutorial - Extending the Database Schema"},"1119":{i:0.000246487835793854,u:"../tutorials/advanced/t-extend-spryker.htm",a:"To extend the Spryker-Core functionality and to use the Spryker Engine to develop a project, it’s important to understand the folder structure used in Spryker Commerce OS. The project consists of two parts : Spryker Core and Project implementation. They both follow the same structure and the project ...",t:"Tutorial - Extending Spryker"},"1120":{i:0.000246487835793854,u:"../tutorials/advanced/t-internationalization.htm",a:"Challenge When running international business it is important to fine tune the behavior of a shop depending on the country. Topics that differ: Design \u0026 Layout Currency \u0026 price Tax calculation Languages Expense calculation Available Stocks from a different ERP/client Availability of shipment methods ...",t:"Tutorial - Internationalization"},"1121":{i:0.00164320776999446,u:"../tutorials/advanced/t-widgets-widget-plugins.htm",a:"Depending on your version of spryker/kernel module, learn how to implement widgets or widget plugins.",t:"Tutorial - Implement Widgets and Widget Plugins"},"1122":{i:0.000246487835793854,u:"../tutorials/advanced/t-new-relic-monitoring.htm",a:"Installing the PHP agent When accessing your New Relic APM dashboard, you will be asked to download and set up the New Relic agent: It is important to generate a LICENSE KEY (which is different from the API KEY): Then, you\u0027ll be able to install the New Relic agent: Here is the instruction for a ...",t:"Tutorial - New Relic Monitoring"},"1123":{i:0.000610862534108227,u:"../tutorials/advanced/t-transfer-data-yves-zed.htm",a:"Yves gets most of its data from the client-side NoSQL data stores (data such as product details, product categories, prices, etc.). There are situations in which Yves needs to communicate with Zed either to submit data (e.g.: the customer has submitted a new order or subscribed to newsletter) or to ...",t:"Tutorial - Transfering Data Between Yves and Zed"},"1124":{i:0.000246487835793854,u:"../tutorials/advanced/t-twig-extensions.htm",a:"As an example on how to implement a Twig extension, we’ll build a filter which can be used on displaying prices. Implement the filter Add the Twig extension Register the new Twig extension Test your Twig extension Implement the filter Add the logic to a dedicated class, in the module you’re ...",t:"Tutorial - Twig Extensions"},"1125":{i:0.000246487835793854,u:"../tutorials/advanced/t-using-translations.htm",a:"The data stored in the key-value storage can be used for multiple purposes: URL mappings localized product details localized product categories details Translations - Using Twig Translator Twig Translator uses the data that comes from the Redis key-value storage. The glossary keys store static ...",t:"Tutorial - Using Translations"},"1126":{i:0.000246487835793854,u:"../tutorials/advanced/t-working-filter-facets.htm",a:" A search engine is one of the most important functionalities in online shops because it facilitates better navigation, allowing the user to get to the products that are in his interest. The search engine should return a small number of items that match the query. Facets provide aggregated data ...",t:"Tutorial - Working with Filter Facets "},"1127":{i:0.00303992770419506,u:"../tutorials/advanced/t-working-forms.htm",a:"Spryker uses Symfony forms; this tutorial will help you get started on working with forms. You will build a simple newsletter subscription form that contains a field for entering the email address and a submit button. Follow the steps described below to create the newsletter subscription form: ...",t:"Tutorial - Working with Forms"},"1128":{i:0.00164320776999446,u:"../tutorials/advanced/t-working-tables.htm",a:"Spryker has a dedicated component to help you build tables for the Zed UI. This tutorial will help you get started on working with tables. Creating a New Table Configure the Table Prepare the Data Render the Table Creating a New Table To get started defining the new table, create a new class in your ...",t:"Tutorial - Working with Tables"},"1129":{i:0.000246487835793854,u:"../tutorials/advanced/t-yves-bootstrap.htm",a:"Yves and Zed are both built upon the  Silex micro-framework . So most concepts about modern web frameworks apply here as well. In static/public/Yves/index.php you will find the entry for the front-end application. \u003c?php\n$errorHandlerEnvironment = new ...",t:"Tutorial - Yves Bootstrapping"},"1130":{i:0.00598293894101256,u:"../capabilities/payment/refund/refund-2-0.htm",a:" The latest version of this module can be found here  Refund     The Refund module manages the retours refund process. Overview Using  Refund  Extending  Refund  Overview RefundFacade contains the following methods: calculateRefund(array $salesOrderItems, SpySalesOrder $salesOrderEntity) calculates ...",t:"Refund 2.0    "},"1131":{i:0.00199412502151364,u:"../shop_user_guide/checkout/payment-step-shop-guide.htm",a:"Shop Guide - Payment Step  ML Multi-language MS Multi-store MC Multi-currency To open the Payment step, you need to complete the  Shipping step . The Payment step allows a customer to pay for the order. Here you can: Select the appropriate payment method Graphic User Interface The Payment page in ...",t:"Shop Guide - Payment Step | Spryker"},"1132":{i:0.000397265445329959,u:"../industry_partners/payment/adyen/adyen_-_technical_details_and_howtos/adyen-notifications.htm",a:"Adyen notifications are webhooks informing you of important events related to your account. Notifications are crucial for a successful integration with Adyen, and the only way you\u0027ll receive automatic updates about: Events that are not triggered by a request from your side, for example when a ...",t:"Notifications"},"1133":{i:0.00245845668803058,u:"../feature_integration_guides/shopping_lists_+_product_options_-_outdated/shopping-lists-product-options-feature-integration-2018-11-outdated.htm",a:" This is an old version of the integration guide. The latest version can be found  here . Install Feature Core Prerequisites To start feature integration, overview ad install the necessary features. 1) Install the Required Modules by Using Composer Run the following command to install the required ...",t:"Shopping Lists Product Options Feature Integration "},"1134":{i:0.000866887906179746,u:"../feature_integration_guides/glue_api/product_api_feature_integration/product-api-feature-integration-201812.htm",a:"This guide will navigate you through the process of installing and configuring the Product API feature in Spryker OS.",t:"Product API Feature Integration | Spryker"},"1135":{i:0.00164320776999446,u:"../feature_integration_guides/glue_api/order-history-api-feature-integration.htm",a:"This guide will navigate through the process of installing and configuring of the Order History API feature used in Spryker OS.",t:"Order History API Feature Integration"},"1136":{i:0.000290657609289214,u:"../capabilities/development/zed_api/zed-api-resources.htm",a:" Each module can have a “{module}Api” module(e.g. CustomerApi for Customer). Such an API module exposes CRUD facade methods (find, get, add, update, remove) that can be mapped to a URL via REST resource/action resolution.\n\n The main Api module contains a dispatcher that delegates to those API module ...",t:"Zed API Resources    "},"1137":{i:0.00188172211373567,u:"../feature_integration_guides/merchant_custom_prices/merchant-custom-prices-feature-integration-201903.htm",a:"The Merchant Custom Price Feature allows setting specific prices for merchants. The guide describes the process of integrating the feature into your project.",t:"Merchant Custom Prices Feature Integration | Spryker"},"1138":{i:0.00133133752225285,u:"../administration_interface_guide/sales/orders-2018_11.htm",a:"This tutorial provides step-by-step instructions for shop owners on how to manage, view all orders created by your customers, as well as create order claims.",t:"Orders v.2018_11 | Spryker"},"1139":{i:0.00196427671013778,u:"../feature_integration_guides/glue_api/inventory-management-feature-integration-201903.htm",a:"This guide will guide you through the process of installing and configuring the Inventory Management feature for your project.",t:"Inventory Management Feature Integration | Spryker"},"1140":{i:0.0023977898239084,u:"../capabilities/product_management/product_options/product-option-module-2.htm",a:"This module manages the product options. The product options are product additions that can be sold with the actual product. ",t:"Product Option Module | Spryker"},"1141":{i:0.000253246384990657,u:"../industry_partners/payment/ratenkauf_by_easycredit/ratenkauf-by-easycredit.htm",a:"Ratenkauf by Easycredit Delete this text and replace it with your own content.",t:"Ratenkauf by Easycredit"},"1142":{i:0.00054989691475428,u:"../feature_integration_guides/approval_process/approval-process-feature-integration-201903.htm",a:"Approval Process Feature Integration  This is an old version of the integration guide. The latest version can be found  here . Install Feature Core Prerequisites \n\t\t\tTo start feature integration, review and install the necessary features:\n\t\t",t:"Approval Process Feature Integration "},"1143":{i:0.0017165100686242,u:"../capabilities/cms/cms_block/cms-block-multistore.htm",a:" MS Multi-store Overview The multi-store CMS block feature enables you to manage CMS blocks display per stores through a store toggle element on CMS Block management pages in the Administration Interface. By default CMS Blocks are available in all stores. This feature provides additional ...",t:"Multi-store CMS Block   "},"1144":{i:0.000288390840814032,u:"../capabilities/product_management/product/product-domain-model.htm",a:" The following domain model shows abstract product and concrete product. One abstract product has at least one up to n different products. A product belongs exactly to one abstract product. Both abstract and concrete product can have 0 to n product attributes. Remember a product attribute table ...",t:"Product Domain Model    "},"1145":{i:0.000352892580660715,u:"../glue_rest_api/glue_api_storefront_guides/retrieving-navigation-trees-201903.htm",a:"The topic demonstrates how to retrieve navigation trees with the help of API endpoints.",t:"Retrieving Navigation Trees"},"1146":{i:0.00076582087458059,u:"../capabilities/search_and_filter/configure-search-features.htm",a:"In this section you’ll learn how to configure faceted navigation, filters, pagination and sorting. ",t:"Configure Search Features  | Spryker"},"1147":{i:0.00127416643857099,u:"../capabilities/company_account/business_on_behalf/business-on-behalf-feature-overview.htm",a:" The latest version of this feature can be found at  Business On Behalf Feature Overview  Business unit includes a number of company users that have certain permissions within the business unit. For more information about business units, see  Business Unit Management . This feature allows having ...",t:"Business on Behalf Feature Overview "},"1148":{i:0.000495228697849936,u:"../feature_integration_guides/glue_api/category-api-feature-integration.htm",a:"This guide will navigate you through the process of installing and configuring the Category API feature in Spryker OS.",t:"Category API Feature Integration"},"1149":{i:0.00225848065397013,u:"../capabilities/tax/tax-2-0.htm",a:"Spryker allows to define different tax sets that include one to many different tax rates.\r\n",t:"Tax Version 2.0 | Spryker"},"1150":{i:0.00164320776999446,u:"../capabilities/order_management/step_engine/step-engine-breadcrumb.htm",a:" To set up breadcrumb navigation for a step collection, first you’ll need to mark which steps you would like to have in your breadcrumb. To mark a step available for breadcrumb just implement \\Spryker\\Yves\\StepEngine\\Dependency\\Step\\StepWithBreadcrumbInterface in all the necessary steps. The ...",t:"Breadcrumb Navigation - Step Engine    "},"1151":{i:0.00126591674303748,u:"../feature_integration_guides/volume-prices-feature-integration.htm",a:"The Volume Prices Feature allows setting specific prices for units based on quantities. The guide describes how to integrate the feature into your project.",t:"Volume Prices Feature Integration | Spryker"},"1152":{i:0.00275520313547672,u:"../capabilities/checkout/multi-step_checkout/checkout-steps.htm",a:"This topic provides information about all checkout steps available for the customers.",t:"Checkout Steps | Spryker"},"1153":{i:0.00102368298990232,u:"../glue_rest_api/glue_api_storefront_guides/checking-out-purchases-and-getting-checkout-data.htm",a:"This article will help you set up the endpoint functionality for creating checkout experience, like placing orders and retrieving checkout information.",t:"Checking Out Purchases and Getting Checkout Data"},"1154":{i:0.00113868014187824,u:"../industry_partners/payment/arvato/v1_0/arvato-risk-check-1-0.htm",a:" \n    Accounted for by external credit agency data and internal existing customer- and order-details\n    the RiskCheck evaluates the probability of payment default for the customer orders.\n \n    The returned decision codes (Result – ActionCode – ResultCode) manage the definition of the eShop’s ...",t:"Arvato 1.0 - Risk Check"},"1155":{i:0.0019128947981195,u:"../capabilities/order_management/state_machine/state-machine-implementing-plugin.htm",a:"To start using state machine, create a new plugin by implementing the StateMachineHandlerInterface. You will find the interface methods to implement.",t:"Implementing the Plugin - State Machine | Spryker"},"1156":{i:0.00140690374235897,u:"../feature_integration_guides/shared_carts/shared-carts-feature-integration-201903.htm",a:"The Shared Carts Feature allows sharing shopping carts within an entire business unit. The guide describes how to integrate the feature into your project. ",t:"Shared Carts Feature Integration | Spryker"},"1157":{i:0.0019128947981195,u:"../capabilities/order_management/state_machine/state-machine-zed-presentation.htm",a:"To add manual trigger button or history for items, add some implementation. State machine provides methods for triggering events and retrieving history.",t:"Updating Presentation in Zed - State Machine | Spryker"},"1158":{i:0.000456002860894746,u:"../capabilities/product_management/product_group/product-group-under-the-hood.htm",a:" Database Schema The ProductGroup module provides spy_product_group table that stores product groups. Product group entities have only the id_product_group field, because we don’t need to display or refer to any groups in any way. The only necessary details for a group are the abstract products that ...",t:"Product Group - Under The Hood    "},"1159":{i:0.000259821737561494,u:"../capabilities/development/logger.htm",a:" Spryker contains a  PSR-3  compatible logger which can be customized to any needs. You can use the logger everywhere in the system, as in the example below: \u003c?php\n\nuse Spryker\\Shared\\Log\\LoggerTrait;\n\nclass MyClass\n{\n\n    use LoggerTrait;\n\n    public function myFunction()\n    {\n        // This will ...",t:"Logger    "},"1160":{i:0.000472636610012907,u:"../capabilities/product_management/product_options/product-options.htm",a:"Product options can be used to create product additions that can be sold with the actual product. ",t:"Product Options | Spryker"},"1161":{i:0.000364749847890259,u:"../feature_integration_guides/glue_api/product_tax_sets/product-tax-sets-api-feature-integration.htm",a:"This guide will navigate you through the process of installing and configuring the Product Tax Sets API feature in Spryker OS.",t:"Product Tax Sets API Feature Integration | Spryker"},"1162":{i:0.000685848023806724,u:"../capabilities/cms/cms_widget/cms-widget-overview-201903.htm",a:" The CMS Widget feature allows shop administrators to manage content on a CMS, category or product pages from the content widget menu in the Administration interface. With the feature  integrated , the content widget menu with  available widgets  will appear in the Edit Placeholders page under the ...",t:"CMS Widget Overview   "},"1163":{i:0.00164320776999446,u:"../feature_integration_guides/product_label/product-label-feature-integration-1-0.htm",a:"The Product Label feature allows highlighting specific products in your online shop. The guide describes how to integrate the feature in the project.",t:"Product Label Feature Integration | Spryker"},"1164":{i:0.00087790621618034,u:"../feature_integration_guides/glue_api/category-api-feature-integration-201903.htm",a:"This guide will navigate you through the process of installing and configuring the Category API feature in Spryker OS.",t:"Category API Feature Integration | Spryker"},"1165":{i:0.000537867721839022,u:"../resources_and_developer_tools/cronjob-scheduling-guide.htm",a:"We use  Jenkins  for cronjob scheduling. Compared to Crontab, there are several benefits: Jobs are queued and can be manually executed Job definitions are under version control and can be changed by any developer Console output available for debugging Add a new job and run it Jobs are defined in ...",t:"Cronjob Scheduling"},"1166":{i:0.00126591674303748,u:"../feature_integration_guides/prices/prices-feature-integration-201903.htm",a:"The Volume Prices Feature allows setting specific prices for units based on quantities. The guide describes how to integrate the feature into your project.",t:"Prices Feature Integration | Spryker"},"1167":{i:0.000323486041074026,u:"../capabilities/search_and_filter/search-multi-currency.htm",a:" MC Multi-currency \n            If you don\u0027t have the multi-currency feature in you current project yet and want to migrate, you have to follow certain steps to migrate your system.\n\n            First  migrate Price  and  modules related to multi-currency  before proceeding with the search for ...",t:"Multi-Currency - Search  "},"1168":{i:0.0019128947981195,u:"../capabilities/order_management/state_machine/state-machine-cronjob.htm",a:"This topic provides and overview of thre console commands dedicated for the state machine.",t:"Cron Jobs - State Machine | Spryker"},"1169":{i:0.000692657040208836,u:"../feature_integration_guides/glue_api/catalog-search-api-feature-integration-201903.htm",a:"This guide will navigate you through the process of installing and configuring the Search API feature in Spryker OS.",t:"Search API Feature Integration | Spryker"},"1170":{i:0.000259821737561494,u:"../capabilities/development/installer.htm",a:" ML Multi-language MS Multi-store MC Multi-currency The Installer module is responsible of managing the installment process of required database data  in any environment. Plugin Stack You define the installer plugins of the bundles you want to include in the Pyz ImporterDependencyProvider: ...",t:"Installer    "},"1171":{i:0.00108369320283233,u:"../feature_integration_guides/shared_carts/shared-carts-feature-integration-201811.htm",a:"The Shared Carts Feature allows sharing shopping carts within an entire business unit. The guide describes how to integrate the feature into your project. ",t:"Shared Carts Feature Integration | Spryker"},"1172":{i:0.00051536558225749,u:"../feature_integration_guides/glue_api/product_labels_api_feature_integration/product-labels-api-feature-integration.htm",a:"This guide will navigate you through the process of installing and configuring the Product Labels API feature in Spryker OS.",t:"Product Labels API Feature Integration | Spryker"},"1173":{i:0.000546404841316623,u:"../feature_integration_guides/product-lists-catalog-integration-201903.htm",a:"Product Lists: Catalog Feature Integration  Install Feature Core Prerequisites To start feature integration, overview and install the necessary features:",t:"Product Lists: Catalog Feature Integration | Spryker"},"1174":{i:0.00236535084663781,u:"../capabilities/order_management/reclamations/reclamations-feature-overview.htm",a:"With the reclamations in place, you can do three things: create a new connected order, return money paid for the order, or close the reclamation.",t:"Reclamations Feature Overview | Spryker"},"1175":{i:0.00164320776999446,u:"../capabilities/order_management/step_engine/step-engine-workflow.htm",a:" When you need to define a multi-step process using the StepEngine feature, you need to implement the following interfaces: StepInterface - here you implement the logic that needs to get executed when the defined step takes place SubFormInterface - defines the name of the form and the pathProperty ...",t:"Step Engine Workflow    "},"1176":{i:0.00056258556601035,u:"../capabilities/search_and_filter/search-4-0.htm",a:" The latest version of this module can be found in  Search      section One of the most important features in an e-commerce application is to give the customer the ability to find the specific products. Depending on how easy it is to find the products the customer is searching for and how relevant ...",t:"Search 4.0"},"1177":{i:0.000316326177494151,u:"../capabilities/product_management/product_reviews/product-review-filter-and-sort.htm",a:" Prerequisites \n                Configure your product collector query which provides the product data for your product page map and add the required average rating value.\n             \n                Amend product page map to make it possible to filter and sort by rating value. Normalize the ...",t:"Filter \u0026 Sort by Average Rating - Product Reviews  "},"1178":{i:0.00164320776999446,u:"../feature_integration_guides/glue_api/navigation-api-feature-integration.htm",a:"This guide will navigate you through the process of installing and configuring the Navigation feature in Spryker OS.",t:"Navigation Feature Integration | Spryker"},"1179":{i:0.00299928440651158,u:"../feature_integration_guides/glue_api/customer-api-feature-integration.htm",a:"This guide will navigate through the process of installing and configuring of the Customer API feature used in Spryker OS.",t:"Customer API Feature Integration"},"1180":{i:0.000259821737561494,u:"../capabilities/development/zed-request.htm",a:" This module is used to handle requests from Yves to Zed and the responses from Zed. Internally it makes use of the well known  Guzzle  library. HandlerStackContainer Guzzle provides a way to add a so called middleware. It makes use of a handler stack where you can push a middleware to. For more ...",t:"Zed Request  "},"1181":{i:0.00205761610588726,u:"../capabilities/order_management/sales/sales-5-0.htm",a:" The latest version of this module can be found here  Sales     Getting Totals for Order Spryker does not store order grand total or subtotal amounts; all amounts are stored before calculation, order items store single item gross amounts, discounts store single item discount amount. To get the ...",t:"Sales 5.0    "},"1182":{i:0.00071390156546731,u:"../feature_integration_guides/glue_api/discontinued-products-api-feature-integration-201903.htm",a:"This guide will navigate you through the process of installing and configuring the Discontinued Products feature in Spryker OS.",t:"Discontinued Products API Feature Integration | Spryker"},"1183":{i:0.00153451356975773,u:"../capabilities/development/collector/collector-sched-collector-jobs.htm",a:" The cronjob file jobs.php stores the configuration related to collectors.\n\n \u003c?php\n$jobs[] = [\n    \u0027name\u0027 =\u003e \u0027export-search\u0027,\n    \u0027command\u0027 =\u003e \u0027$PHP_BIN vendor/bin/console collector:search:export\u0027,\n    \u0027schedule\u0027 =\u003e \u0027*/10 * * * *\u0027,\n    \u0027enable\u0027 =\u003e false,\n    \u0027stores\u0027 =\u003e $allStores,\n];\n?\u003e In the ...",t:"Scheduling Collector Jobs "},"1184":{i:0.00104191086689337,u:"../feature_integration_guides/glue_api/wishlist_api/wishlist-api-feature-integration-201903.htm",a:"This guide will navigate you through the process of installing and configuring the Wishlist API feature in Spryker OS.",t:"Wishlist API Feature Integration | Spryker"},"1185":{i:0.000489261798684431,u:"../capabilities/product_management/product_options/product-options-1.htm",a:"\n\t\t\t ML Multi-language MS Multi-store MC Multi-currency \n            Product options allow configuring a product further. You can define option types and each option type can have 1 to n option values.\n            Each option value has an associated price.\n             Example \n                    ...",t:"Product Options - Version 1 \n\t\t\t  "},"1186":{i:0.000622209159483049,u:"../feature_integration_guides/shopping_lists/shopping-lists-feature-integration-201903.htm",a:"Shopping Lists Feature Integration  This is an old version of the integration guide. The latest version can be found  here . Install Feature Core Prerequisites To start feature integration, overview and install the necessary features:",t:"Shopping Lists Feature Integration v.201903 | Spryker"},"1187":{i:0.000610281660700246,u:"../feature_integration_guides/glue_api/product_price_api/product-price-api-feature-integration.htm",a:"This guide will navigate you through the process of installing and configuring the Product Price API feature in Spryker OS.",t:"Product Price API Feature Integration | Spryker"},"1188":{i:0.00196929037070463,u:"../capabilities/development/collector/collector-development.htm",a:"The Collector module provides mechanisms to manage data consumed by front-end application. This article covers steps required to populate the data stores.",t:"Development - Collector | Spryker"},"1189":{i:0.000915808482582123,u:"../industry_partners/payment/arvato/v1_0/arvato-1-0.htm",a:" The purpose of developing the risk solution services is to provide a complete and comprehensive risk management\n    for the eCommerce/mail-order industry, contributing to a high level of modularization and automation. Besides the use\n    of pre-configured service modules for risk management, risk ...",t:"Risk Solution Services Integration - Arvato 1.0   "},"1190":{i:0.000456002860894746,u:"../capabilities/cms/cms_widget/cms-widget.htm",a:" CMS widget is the content snippet you can add and edit in the WYSIWYG editor. The CMS widget feature allows shop administrators to manage the way products, product groups, and products sets or other content, like charts and CMS blocks, is displayed on CMS pages. Therefore, with CMS widgets, the ...",t:"CMS Widget   "},"1191":{i:0.000318013752381175,u:"../feature_integration_guides/glue_api/alternative_products_api_feature_integration/alternative-products-api-feature-integration-201810.htm",a:"This guide will navigate you through the process of installing and configuring the Alternative Products API feature in Spryker OS.",t:"Alternative Products API Feature Integration | Spryker"},"1192":{i:0.000290657609289214,u:"../capabilities/development/zed_api/zed-api-crud-function.htm",a:" Filtering\n For find action we return a paginated collection that can be limited and customized based on query string input or headers. So using the provided FilterPreProcessors one can enable filtering (conditions), sorting (and multi-sorting) and pagination.\n\n Condition Filtering\n For the ...",t:"CRUD Functionality - Zed API    "},"1193":{i:0.001040784615883,u:"../capabilities/search_and_filter/search_query.htm",a:" Once we have all necessary data in Elasticsearch, it’s time to display them in Yves. In order to achieve this, we first need to query Elasticsearch, which will return raw data for us that we need to  Process Query Result  to display it in our templates. In the SearchClient you can find the search() ...",t:"Search Query  "},});