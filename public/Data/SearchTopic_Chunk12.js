define({"946":{i:0.000461734619091565,u:"../capabilities/payment/how_to_implement_prepayment/ht-implement-prepayment.htm",a:" Prepayment\n This article describes the steps that you need to consider when you need to implement the prepayment method without integrating with a third party payment service provider.\n In this HowTo we will add a new module called PaymentMethods.\n\n If this is you first time creating a new module, ...",t:"HowTo - Implement Prepayment   "},"947":{i:0.000369984312368655,u:"../industry_partners/payment/payone/legacy_demoshop/v1_0/payone-paypal-express-checkout.htm",a:" The payment using PayPal requires redirect to PayPal website. When the customer is redirected to PayPal’s website, he must authorize himself and he has the option to either cancel or validate the transaction. A concern regarding payment flows that require redirection on third party website pages is ...",t:"PayOne - PayPal Express Checkout Payment"},"948":{i:0.00304340625035679,u:"../capabilities/order_management/state_machine/state-machine-patterns.htm",a:" MS Multi-store Process Patterns The State Machine Cook Book describes how to build a state machine with the elements state, transition and event. However there are some recurring design problems that are needed in many processes. In this article common problems and their solution with state machine ...",t:"State Machine Patterns    "},"949":{i:0.000690609018683973,u:"../capabilities/development/event/event-asynch.htm",a:"Asynchronous Events  An asynchronous event can be created by using the addListenerQueued method instead of addListener. The difference is that it queues the event to be processed later by another process/consumer. You must have queue configured before using this feature, see bellow.",t:"Asynchronous Events  "},"950":{i:0.00296274725790496,u:"../capabilities/order_management/state_machine/state-machine-persistence.htm",a:" MS Multi-store To persist the state of the item and make the connection with the state machine, you need to store related data into the database. For example, you can create two fields (idStateMachineState(int) and idStateMachineProcess(int)) and store their id’s when itemStateUpdated is being ...",t:"Persistence - State Machine    "},"951":{i:0.000690609018683973,u:"../capabilities/development/event/event-priority.htm",a:" The Event Collector \\Spryker\\Service\\Event\\Dependency\\EventCollectionInterface uses a priority queue store events so each that event can have different priority and will be executed in correct order when triggered. For example: \u003c?php\n$eventCollection\n    ...",t:"Listener Priority  "},"952":{i:0.000657071257575625,u:"../resources/gluepublicspec/swagger-ui/oauth2-redirect.html",a:"\r\n    \u0027use strict\u0027;\r\n    function run () {\r\n        var oauth2 = window.opener.swaggerUIRedirectOauth2;\r\n        var sentState = oauth2.state;\r\n        var redirectUrl = oauth2.redirectUrl;\r\n        var isValid, qp, arr;\r\n        if (/code|token|error/.test(window.location.hash)) {\r\n            qp = window.location.hash.substring(1);\r\n        } else {\r\n            qp = location.search.substring(1);\r\n        }\r\n        arr = qp.split(\"\u0026\")\r\n        arr.forEach(function (v,i,_arr) { _arr[i] = \u0027\"\u0027 + v.replace(\u0027=\u0027, \u0027\":\"\u0027) + \u0027\"\u0027;})\r\n        qp = qp ? JSON.parse(\u0027{\u0027 + arr.join() + \u0027}\u0027,\r\n                function (key, value) {\r\n                    return key === \"\" ? value : decodeURIComponent(value)\r\n                }\r\n        ) : {}\r\n        isValid = qp.state === sentState\r\n        if ((\r\n          oauth2.auth.schema.get(\"flow\") === \"accessCode\"||\r\n          oauth2.auth.schema.get(\"flow\") === \"authorizationCode\"\r\n        ) \u0026\u0026 !oauth2.auth.code) {\r\n            if (!isValid) {\r\n                oauth2.errCb({\r\n                    authId: oauth2.auth.name,\r\n                    source: \"auth\",\r\n                    level: \"warning\",\r\n                    message: \"Authorization may be unsafe, passed state was changed in server Passed state wasn\u0027t returned from auth server\"\r\n                });\r\n            }\r\n            if (qp.code) {\r\n                delete oauth2.state;\r\n                oauth2.auth.code = qp.code;\r\n                oauth2.callback({auth: oauth2.auth, redirectUrl: redirectUrl});\r\n            } else {\r\n                let oauthErrorMsg\r\n                if (qp.error) {\r\n                    oauthErrorMsg = \"[\"+qp.error+\"]: \" +\r\n                        (qp.error_description ? qp.error_description+ \". \" : \"no accessCode received from the server. \") +\r\n                        (qp.error_uri ? \"More info: \"+qp.error_uri : \"\");\r\n                }\r\n                oauth2.errCb({\r\n                    authId: oauth2.auth.name,\r\n                    source: \"auth\",\r\n                    level: \"error\",\r\n                    message: oauthErrorMsg || \"[Authorization failed]: no accessCode received from the server\"\r\n                });\r\n            }\r\n        } else {\r\n            oauth2.callback({auth: oauth2.auth, token: qp, isValid: isValid, redirectUrl: redirectUrl});\r\n        }\r\n        window.close();\r\n    }\r\n",t:"oauth2-redirect"},"953":{i:0.00361252596422273,u:"../capabilities/checkout/multi-step_checkout/checkout-stepengine.htm",a:" The latest version of this feature can be found at  Checkout StepEngine    Yves Step Processing Checkout in Spryker  demoshop  uses a StepEngine step process to navigate customer step by step through checkout. The checkout process creates a generic approach for step processing; each step knows how ...",t:"Checkout StepEngine   "},"954":{i:0.00102824899211223,u:"../capabilities/cart/quick_order/quick-order.htm",a:"The Quick Order feature enables customers to buy their commonly ordered products in just a few clicks, encouraging them to come back and buy more.",t:"Quick Order | Spryker"},"955":{i:0.000416560763885565,u:"../capabilities/payment/how_to_implement_prepayment/ht-prepayment-checkout.htm",a:" The next step is to integrate prepayment into Checkout. In the PaymentMethods/Dependency/Injector from Yves add the CheckoutDependencyInjector that will inject the prepayment form and handler into the Checkout module:\n Click to expand the code sample \u003c?php\n\nnamespace ...",t:"HowTo — Integrate Prepayment into Checkout   "},"956":{i:0.000690609018683973,u:"../capabilities/development/event/event-adding.htm",a:" When adding an event, make sure you first decide what kind of events you want to trigger in your code. Events are stored in a class for later use, by adding its literal string value (ModuleName.subject.action). This value uniquely identifies an event in the event module, and all listeners attached ...",t:"Adding Events  "},"957":{i:0.00395874228780163,u:"../capabilities/navigation/module-navigation-1-0.htm",a:" Overview The Navigation module manages multiple navigation menus that can be displayed on the frontend (Yves). Every navigation section can contain its own nested structure of navigation nodes. Navigation nodes have types that help define what kind of link they represent. The following node types ...",t:"Navigation Module Version 1.*  "},"958":{i:0.000590263893071821,u:"../capabilities/development/event/event-listen.htm",a:" There are two ways to listen to events, using direct listeners or subscribers. The difference between these two is that a subscriber allows the module providing the subscriber to wire up the handlers in the module that owns it without touching the EventDependencyProvider exception’s initial ...",t:"Listening to Events  "},"959":{i:0.000677839255112966,u:"../capabilities/mailing_and_notifications/mail.htm",a:" Sending mail is a standard web application task. There are many cases where an action triggers an email to be sent. These actions can be newsletter subscriptions, order placement, refunds, customer account registration, etc. The Mail module helps you to create emails to be sent. To send an email ...",t:"Mail   "},"960":{i:0.000416560763885565,u:"../capabilities/payment/how_to_implement_prepayment/ht-prepayment-shared.htm",a:" As you can see, we need to identify the new payment type through some unique constants which we’re going to define under the Shared namespace, since they’re needed both by Yves and Zed.\n\n Create the PaymentMethodsConstants interface in the Shared namespace, where you’ll define these constants.\n\n ...",t:"HowTo - Implement Prepayment Shared   "},"961":{i:0.00237560210818397,u:"../capabilities/development/install-tool.htm",a:" Spryker offers an install tool which can be used to install the system as described in the install recipe file(s). Installation Install the module with composer by running the following command: \n        composer require spryker/install\n         After the installation you can run the command with ...",t:"Install Tool    "},"962":{i:0.000416560763885565,u:"../capabilities/payment/how_to_implement_prepayment/ht-prepayment-be.htm",a:" To integrate the prepayment method into the checkout, we are required to provide implementations for these 2 plugins:\n\n CheckoutPreCondition  PaymentSaveOrder  Add the following 2 plugins in Zed, inside the Communication/Plugin/Checkout folder of the new added module.\n\nPrepaymentPreCheckPlugin:\n ...",t:"HowTo - Implement Prepayment Back End   "},"963":{i:0.00289100024433246,u:"../capabilities/order_management/state_machine/state-machine-events.htm",a:" MS Multi-store There are two main triggers: first one StateMachineFacade::triggerForNewStateMachineItem() is used when first time triggering the state machine for an item; this trigger will initialize the state machine and start transition through states until a decision without event, timeout or ...",t:"Triggering Events - State Machine    "},"964":{i:0.000534586581906648,u:"../capabilities/payment/how_to_implement_invoice_payment/ht-invoice-payment-fe.htm",a:" Creating the Form\n In Yves, we’ll start by building the form. Add the new module also in Yves and add a Form/ folder where we’ll place the implementation for building the form.\n\n First add the data provider, inside the Form/DataProvider/ folder:\n Click to expand the code sample \u003c?php\nnamespace ...",t:"HowTo - Implement Invoice Payment Front End   "},"965":{i:0.000395536987888204,u:"../capabilities/product_management/product/product-lifecycle.htm",a:" The touch tables are able create the snapshot of what’s currently loaded into the Yves data storages ( both key-value and search data storages) If a product was added into the Zed database after the last export, then there’s no corresponding entry in the touch table for that product. Once it’s ...",t:"Product Lifecycle    "},"966":{i:0.00162874284573396,u:"../capabilities/development/file_system/filesystem-api.htm",a:" Read API  getMetadata(FileSystemQueryTransfer $fileSystemQueryTransfer) Return FileSystemResourceMetadataTransfer, null on failure \u003c?php\n$fileSystemQueryTransfer = new ...",t:"File System API  "},"967":{i:0.000534586581906648,u:"../capabilities/payment/how_to_implement_invoice_payment/ht-invoice-payment-be.htm",a:" Checkout Plugins\n To integrate the invoice payment method into the checkout, we need to provide implementations for these 2 plugins: CheckoutPreCondition PaymentSaveOrder Add the following 2 plugins in Zed, under the Communication/Plugin/Checkout/ folder of the new added module.\n\n ...",t:"HowTo - Implement Invoice Payment Back End   "},"968":{i:0.00328386661979901,u:"../capabilities/product_management/product-store_relation/product-store-relation-under-the-hood.htm",a:" Database Schema \n            The Product module introduces a new table: spy_product_abstract_store. The table stores all abstract product-store relations. An abstract product is available in a store when it has a\n            spy_product_abstract_store row for the given abstract product and store ...",t:"Under the Hood - Multi-Store Products  "},"969":{i:0.000923003040283255,u:"../capabilities/order_management/url-handling-new-entity.htm",a:" The following information describes how to handle URLs for other types of entities that Spryker core provides. Prerequisites Before you begin, make sure the target entity is already in your database (the one to you would like to assign URLs to). In the examples below we\u0027ll call this entity ...",t:"Handling New Types of Entity URLs "},"970":{i:0.000413063430634653,u:"../industry_partners/payment/payone/legacy_demoshop/v1_0/payone-v1-0.htm",a:" Partner Information We integrate with a wide range of payment methods that can be configured according to your needs and convenience. Payment method flows are configured using state machines.\n\n Payone provides seven main methods of payment:\n\n Credit Card Direct Debit\n Online Transfer Paypal ...",t:"Payment Integration - BS PayOne - 1.0"},"971":{i:0.00314247615551953,u:"../capabilities/development/collector/collector-running.htm",a:" Each Collector is executed once for each Locale that’s configured in the Store. To see the currently configured locales, check the stores.php configuration file.\n\nThere are three commands which handle collectors related tasks.\n\n console collector:search:export\nconsole ...",t:"Running Collectors "},"972":{i:0.00346478703558454,u:"../capabilities/product_management/product-store_relation/product-store-relation.htm",a:" \n            In a multi-store environment it might be necessary to configure the abstract product appearance per store (by default, all abstract products are available in all stores).\n            A dedicated partial form in Zed Admin UI allows to manage abstract product-store relations.\n            ...",t:"Product-Store Relation  "},"973":{i:0.00382832174854659,u:"../capabilities/cart/quick_order/quick-order-feature-overview.htm",a:"On the Quick Order form in the web-shop, a customer can enter product SKU and Quantity and proceed by adding it to cart or by creating an order right away.",t:"Quick Order Feature Overview | Spryker"},"974":{i:0.00225368868208857,u:"../capabilities/checkout/multi-step_checkout/checkout-process.htm",a:"In order to use checkout in Yves it should be correctly configured and dependencies should be provided.",t:"Checkout Process | Spryker"},"975":{i:0.00335090951694715,u:"../capabilities/order_management/reclamations/reclamations-feature-overview-201903.htm",a:"With the reclamations in place, you can do three things: create a new connected order, return money paid for the order, or close the reclamation.",t:"Reclamations Feature Overview | Spryker"},"976":{i:0.000416560763885565,u:"../capabilities/payment/how_to_implement_direct_debit/dd-shared-implementation.htm",a:" \nAs you can see, we need to identify the new payment type through some unique constants which we’re going to define under the Shared namespace, since they’re needed both by Yves and Zed.\n\n Create the PaymentMethodsConstants interface under the Shared namespace, where you’ll define these constants.\n ...",t:"Direct Debit Shared Implementation   "},"977":{i:0.00289222967709865,u:"../capabilities/product_management/product_reviews/product-review-under-the-hood.htm",a:" Database Schema The Product Review module adds a new table: spy_product_review. The table stores all product review related information such as description, rating, locale, customer, product, etc. Product Reviews in Search product-review type is defined under the already existing index in Search. ...",t:"Under the Hood - Product Reviews  "},"978":{i:0.000416560763885565,u:"../capabilities/payment/how_to_implement_direct_debit/dd-fe-implementation.htm",a:" Create a form\n In Yves, we start by building the form.  Add the new module also in Yves and add a Form/ folder where we’ll place the implementation for building the form.\n\n First add the data provider, inside the Form/DataProvider/ folder:\n Click to expand the code sample \u003c?php\nnamespace ...",t:"Direct Debit Front-end Implementation   "},"979":{i:0.000416560763885565,u:"../capabilities/payment/how_to_implement_prepayment/ht-prepayment-fe.htm",a:" Creating the Form\n In Yves, we’ll start by building the form. Add the new module also in Yves and add a Form/ folder where we’ll place the implementation for building the form.\n\n First add the data provider, under Form/DataProvider:\n Click to expand the code sample \u003c?php\nnamespace ...",t:"HowTo - Implement Prepayment Front End   "},"980":{i:0.000610337613775489,u:"../capabilities/company_account/product_restrictions_from_merchant_to_buyer/product-restrictions-from-merchant-to-buyer.htm",a:"Product Restrictions from Merchant to Buyer provides clients with access to the products and information without overwhelming them with non-essential data.",t:"Product Restrictions from Merchant to Buyer | Spryker"},"981":{i:0.000894575846207858,u:"../capabilities/navigation/t-add-navigation-zed.htm",a:" This tutorial describes how to make your new controller action accessible in the navigation bar. There are two locations where you can define the navigation config : In the global config/Zed/navigation.xml config file Within your module in src/Pyz/Zed/{moduleName}/Communication/navigation.xml ...",t:"Tutorial - Adding Navigation in Zed  "},"982":{i:0.0004436712566706,u:"../capabilities/search_and_filter/dynamic-filters-functionality.htm",a:" ML Multi-language In Zed there’s a section (Search and Filters -\u003e Filter Preferences) for managing the product attributes that you’d like to filter by in the shop. There are several filter types that the framework supports at the moment: single-select: filter for one value at a time (e.g. radio ...",t:"Dynamic Filters Functionality"},"983":{i:0.000416560763885565,u:"../capabilities/payment/how_to_implement_invoice_payment/ht-invoice-payment-checkout.htm",a:" The next step is to integrate the invoice payment into Checkout. In the PaymentMethods/Dependency/Injector from Yves add the CheckoutDependencyInjector that will inject the invoice form and handler into the Checkout module:\n Click here to expand the code sample \u003c?php\n\nnamespace ...",t:"HowTo — Integrate Invoice Payment into Checkout"},"984":{i:0.000400099732176405,u:"../capabilities/product_management/product_relation/product-relation-types.htm",a:" In Spryker currently there are two types of relations:\n\n Related-products, related products displayed in the product detail page for the currently selected abstract product.\n Up-selling, related products displayed in the cart overview page, related products are from a list of abstract product ids ...",t:"Product Relation Types    "},"985":{i:0.000398645933868102,u:"../capabilities/development/zed_api/zed-api-processor-stack.htm",a:" Request and Pre Processing\n We now need to decide further on the URL format. Should this be extension driven, which is easier to browse, or HTTP header driven, for example? What kind of URL query string transformation do we need, what kind of header parsing is required?\n\n In order to keep this ...",t:"Processor Stack - Zed API    "},"986":{i:0.000400099732176405,u:"../capabilities/product_management/product_relation/product-relation-yves-datatastore.htm",a:" The product relation collector exports relations to the Yves data store.  This collector is located in the ProductRelationCollector module.\n \nInclude this module in your composer.json file and update. Then add the plugin ProductRelationCollectorPlugin from this module to ...",t:"Yves Datastore Collector - Product Relation    "},});