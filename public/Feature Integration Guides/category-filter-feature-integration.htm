<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="">
    <head><title>Feature Integration - Category Filters | Spryker</title>
        <meta name="description" content="The Category Filters Feature allows arranging items into categories and customizing filters. This guide describes how to integrate the feature into your project." />
    </head>
    <body>
        <h1>Feature Integration - Category Filters</h1>
        <h2>Prerequisites</h2>
        <p>To prepare your project to work with Category Filters:</p>
        <ol>
            <li>Require the Category Filters modules in your <var>composer</var> by running:
        <ul><li><var>composer require spryker/product-category-filter</var></li><li><var>composer require spryker/product-category-filter-collector</var></li><li><var>composer require spryker/product-category-filter-gui</var></li></ul></li>
            <li>Install the new database tables by running <var>vendor/bin/console propel:diff</var>. Propel should generate a
        migration file with the changes.
    </li>
            <li>Run <var>vendor/bin/console propel:migrate</var> to apply the database changes.</li>
            <li>Generate ORM models by running <var>vendor/bin/console propel:model:build</var>.
        <p>This command will generate some new classes in your project under the
            <var>\Orm\Zed\ProductCategoryFilter\Persistence</var> namespace.
            It is important to make sure that they extend the base classes from the Spryker core, e.g.:</p><ul><li><var>\Orm\Zed\ProductCategoryFilter\Persistence\SpyProductCategoryFilter</var> extends <var>\Spryker\Zed\ProductCategoryFilter\Persistence\Propel\AbstractSpyProductCategoryFilter</var></li><li><var>\Orm\Zed\ProductReview\Persistence\SpyProductCategoryFilterQuery</var> extends <var>\Spryker\Zed\ProductCategoryFilter\Persistence\Propel\AbstractSpyProductCategoryFilterQuery</var></li></ul></li>
            <li>Run <var>vendor/bin/console transfer:generate</var> to generate the new transfer objects.</li>
            <li>
        Activate the product category filters collector by adding <var>ProductCategoryFilterCollectorPlugin</var> to
        the Storage Collector plugin stack.
        <MadCap:dropDown><MadCap:dropDownHead><MadCap:dropDownHotspot style="font-weight: normal;">Example: collector plugin list extension</MadCap:dropDownHotspot></MadCap:dropDownHead><MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php

    namespace Pyz\Zed\Collector;

    use Spryker\Zed\Collector\CollectorDependencyProvider as SprykerCollectorDependencyProvider;
    use Spryker\Zed\Kernel\Container;
    use Spryker\Zed\ProductReviewCollector\Communication\Plugin\ProductReviewCollectorSearchPlugin;
    use Spryker\Zed\ProductReviewCollector\Communication\Plugin\ProductAbstractReviewCollectorStoragePlugin;
    // ...

    class CollectorDependencyProvider extends SprykerCollectorDependencyProvider
    {
        /**
         * @param \Spryker\Zed\Kernel\Container $container
         *
         * @return \Spryker\Zed\Kernel\Container
         */
        public function provideBusinessLayerDependencies(Container $container)
        {
            // ...

            $container[static::STORAGE_PLUGINS] = function (Container $container) {
                return [
                    // ...
                    ProductCategoryFilterConfig::RESOURCE_TYPE_PRODUCT_CATEGORY_FILTER =&gt; new ProductCategoryFilterCollectorPlugin(),
                ];
            };


            // ...
        }
    }</code></pre></MadCap:dropDownBody></MadCap:dropDown></li>
            <li>Make sure the new Zed user interface assets are built. Run <var>npm run zed</var> (or antelope build zed
        for older versions) for that.
    </li>
            <li>Update Zed’s navigation cache to show the new items for the Product Category Filter management user interface by running
        <var>vendor/bin/console application:build-navigation-cache</var>.
    </li>
        </ol>
        <p>You should now be able to use the Zed UI of Category Filters to re-order, remove or add search filters to specific categories, and the
    collectors should also be able to push those category settings to storage.
    Check out our <a href="https://github.com/spryker/demoshop">Demoshop implementation</a> for frontend implementation
    example and the general idea.</p>
        <h3>Updating Filters For a Category</h3>
        <p>To use the setup category filter, <var>CatalogController::indexAction</var> needs to call <var>ProductCategoryFilterClient::updateFacetsByCategory.</var></p>
        <p>For example, it might look like this:</p><pre><code class="language-PHP line-numbers">&lt;?php

/**
 * @method \Pyz\Yves\Catalog\CatalogFactory getFactory()
 * @method \Spryker\Client\Catalog\CatalogClientInterface getClient()
 */
class CatalogController extends AbstractController
{
    const STORAGE_CACHE_STRATEGY = StorageConstants::STORAGE_CACHE_STRATEGY_INCREMENTAL;

    /**
     * @param array $categoryNode
     * @param \Symfony\Component\HttpFoundation\Request $request
     *
     * @return array|\Symfony\Component\HttpFoundation\Response
     */
    public function indexAction(array $categoryNode, Request $request)
    {
        $searchString = $request-&gt;query-&gt;get('q', '');

        $parameters = $request-&gt;query-&gt;all();
        $parameters[PageIndexMap::CATEGORY] = $categoryNode['node_id'];

        $searchResults = $this
            -&gt;getClient()
            -&gt;catalogSearch($searchString, $parameters);

        $currentLocale = $this
            -&gt;getFactory()
            -&gt;getLocaleClient()
            -&gt;getCurrentLocale();

        $productCategoryFilterClient = $this-&gt;getFactory()-&gt;getProductCategoryFilterClient();

        $searchResults[FacetResultFormatterPlugin::NAME] = $productCategoryFilterClient
            -&gt;updateFacetsByCategory(
                $searchResults[FacetResultFormatterPlugin::NAME],
                $productCategoryFilterClient-&gt;getProductCategoryFiltersForCategoryByLocale($parameters[PageIndexMap::CATEGORY], $currentLocale)
            ); //This line here is the one that updates the facets with the category filters.

        $pageTitle = ($categoryNode['meta_title']) ?: $categoryNode['name'];
        $metaAttributes = [
            'idCategory' =&gt; $parameters['category'],
            'category' =&gt; $categoryNode,
            'page_title' =&gt; $pageTitle,
            'page_description' =&gt; $categoryNode['meta_description'],
            'page_keywords' =&gt; $categoryNode['meta_keywords'],
            'searchString' =&gt; $searchString,
        ];

        $searchResults = array_merge($searchResults, $metaAttributes);

        return $this-&gt;envelopeResult($searchResults, $categoryNode['node_id']);
    }
}
            </code></pre>
        <p>It is also necessary to add <var>ProductCategoryFilterClient</var> to <var>CatalogFactory</var>:</p><pre><code class="language-PHP line-numbers">&lt;?php

namespace Pyz\Yves\Catalog;

class CatalogFactory extends AbstractFactory
{
    /**
     * @return \Spryker\Client\ProductCategoryFilter\ProductCategoryFilterClientInterface
     */
    public function getProductCategoryFilterClient()
    {
        return $this-&gt;getProvidedDependency(CatalogDependencyProvider::CLIENT_PRODUCT_CATEGORY_FILTER);
    }
}
            </code></pre>
        <p>Add an additional dependency to <var>CatalogDependencyProvider</var> to look like this:</p><pre><code class="language-PHP line-numbers">&lt;?php

namespace Pyz\Yves\Catalog;

class CatalogDependencyProvider extends AbstractBundleDependencyProvider
{
    const CLIENT_PRODUCT_CATEGORY_FILTER = 'CLIENT_PRODUCT_CATEGORY_FILTER';

    /**
     * @param \Spryker\Yves\Kernel\Container $container
     *
     * @return \Spryker\Yves\Kernel\Container
     */
    public function provideDependencies(Container $container)
    {
        $container = $this-&gt;addProductCategoryFilterClient($container);

        return $container;
    }

    /**
     * @param \Spryker\Yves\Kernel\Container $container
     *
     * @return \Spryker\Yves\Kernel\Container
     */
    protected function addProductCategoryFilterClient(Container $container)
    {
        $container[static::CLIENT_PRODUCT_CATEGORY_FILTER] = function (Container $container) {
            return $container-&gt;getLocator()-&gt;productCategoryFilter()-&gt;client();
        };

        return $container;
    }
}
</code></pre>
        <p>&#160;</p>
        <p><b>See also:</b>
        </p>
        <ul>
            <li><a href="https://documentation.spryker.com/administration_interface_guide/search_and_filters/category-filters.htm">Category Filters Overview</a>
            </li>
            <li><a href="https://documentation.spryker.com/administration_interface_guide/search_and_filters/category-filters.htm#Graphic">Graphic User Interface - Category Filters</a>
            </li>
            <li><a href="https://documentation.spryker.com/administration_interface_guide/search_and_filters/category-filters.htm#Creating">Creating and Managing Category Filters</a>
            </li>
        </ul>
        <p>&#160;</p>
        <p>&#160;</p>
        <p><![CDATA[
		
		]]><i>Last
review date: Dec. 1st, 2017 </i><MadCap:conditionalText MadCap:conditions="General.Hidden Comment"><i>by Ahmed Sabaa</i></MadCap:conditionalText><![CDATA[
    ]]></p>
    </body>
</html>