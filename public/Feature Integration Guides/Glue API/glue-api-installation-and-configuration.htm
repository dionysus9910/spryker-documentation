<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:conditions="ReleaseVersions.2018-10">
    <head>
        <link href="../../Resources/TableStyles/PatternedRows2.css" rel="stylesheet" MadCap:stylesheetType="table" /><title>API Installation and Configuration | Spryker</title>
        <link href="Resources/TableStyles/PatternedRows2.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <meta name="description" content="This article describes the process of installing and enabling the GLUE API infrastructure and explains the details of integrating the REST API resources." />
    </head>
    <body>
        <h1>Glue API Installation and Configuration</h1>
        <p>Functionally, Spryker API can be split into 2 parts: API infrastructure (GLUE) and feature modules. The infrastructure provides the general functionality of the API layer, while each feature module implements a specific resource or resource relation.</p>
        <p>To integrate GLUE API in your project, you need to:</p>
        <ol>
            <li><a href="#1.">Install GLUE</a>
            </li>
            <li><a href="#2.">Enable GLUE</a>
            </li>
        </ol>
        <h2><a name="1."></a>1. Installing GLUE</h2>
        <p>GLUE infrastructure is shipped with the following modules:</p>
        <table style="width: 100%;mc-table-style: url('../../Resources/TableStyles/PatternedRows2.css');" class="TableStyle-PatternedRows2" cellspacing="0">
            <col class="TableStyle-PatternedRows2-Column-Regular" />
            <col class="TableStyle-PatternedRows2-Column-Regular" />
            <tbody>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <th class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">Module</th>
                    <th class="TableStyle-PatternedRows2-BodyD-Regular-LightRows">Description</th>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows"><a href="https://github.com/spryker/glue-application">GlueApplication</a>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-DarkerRows">Provides API infrastructure for Spryker features.</td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows"><a href="https://github.com/spryker/glue-application-extension">GlueApplicationExtension</a>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-LightRows">Provides extension point/plugin interfaces for the Glue Application module.</td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows2-BodyB-Regular-DarkerRows"><a href="https://github.com/spryker/auth-rest-api">AuthRestApi </a><i>(optional)</i>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyA-Regular-DarkerRows">Provides API endpoints to obtain an authentication token to use for subsequent requests.</td>
                </tr>
            </tbody>
        </table>
        <p>To install it, you need to do the following:</p>
        <p class="note">Spryker Shop Suite contains GLUE out of the box. If your project has the latest Shop Suite master merged, you can proceed directly to step <a href="#2.">2. Enabling GLUE</a>.</p>
        <p style="font-weight: bold;">1. Install the necessary modules using composer:</p><pre><code class="language-PHP line-numbers">composer update "spryker/*" "spryker-shop/*" --update-with-dependencies
composer require spryker/glue-application --update-with-dependencies</code></pre>
        <p style="font-weight: bold;">2. Add a Front Controller for GLUE:</p>
        <ul>
            <li>In the directory where your code is installed, locate directory <b>public</b> and create subdirectory <b>Glue</b> in it.</li>
            <li>Create file <b>index.php</b> in the <i>Glue</i> directory with the following content:</li>
        </ul><pre><code class="language-PHP line-numbers">&lt;?php
use Pyz\Glue\GlueApplication\Bootstrap\GlueBootstrap;
use Spryker\Shared\Config\Application\Environment;
use Spryker\Shared\ErrorHandler\ErrorHandlerEnvironment;
 
define('APPLICATION', 'GLUE');
defined('APPLICATION_ROOT_DIR') || define('APPLICATION_ROOT_DIR', realpath(__DIR__ . '/../..'));
 
require_once APPLICATION_ROOT_DIR . '/vendor/autoload.php';
 
Environment::initialize();
 
$errorHandlerEnvironment = new ErrorHandlerEnvironment();
$errorHandlerEnvironment-&gt;initialize();
 
$bootstrap = new GlueBootstrap();
$bootstrap
    -&gt;boot()
    -&gt;run();</code></pre>
        <p style="font-weight: bold;">3. Create GLUE application bootstrap:</p>
        <ul>
            <li>In the <i>src/Pyz</i> directory of your Spryker code installation, create folder <b>Glue</b>, then create subfolder <b>GlueApplication/Bootstrap</b> in it.</li>
            <li>In the <i>GlueApplication/Bootstrap</i> folder, create file <b>GlueBootstrap.php</b> with the following content:</li>
        </ul><pre><code class="language-PHP line-numbers">&lt;?php
 
namespace Pyz\Glue\GlueApplication\Bootstrap;
 
use Silex\Provider\ServiceControllerServiceProvider;
use Silex\Provider\SessionServiceProvider;
use Spryker\Glue\GlueApplication\Bootstrap\AbstractGlueBootstrap;
use Spryker\Glue\GlueApplication\Plugin\Rest\GlueServiceProviderPlugin;
use Spryker\Glue\GlueApplication\Plugin\Rest\ServiceProvider\GlueApplicationServiceProvider;
use Spryker\Glue\GlueApplication\Plugin\Rest\ServiceProvider\GlueResourceBuilderService;
use Spryker\Glue\GlueApplication\Plugin\Rest\ServiceProvider\GlueRoutingServiceProvider;
 
class GlueBootstrap extends AbstractGlueBootstrap
{
    /**
     * @return void
     */
    protected function registerServiceProviders(): void
    {
        $this-&gt;application
            -&gt;register(new GlueResourceBuilderService())
            -&gt;register(new GlueApplicationServiceProvider())
            -&gt;register(new SessionServiceProvider())
            -&gt;register(new ServiceControllerServiceProvider())
            -&gt;register(new GlueServiceProviderPlugin())
            -&gt;register(new GlueRoutingServiceProvider());
    }
}</code></pre>
        <p style="font-weight: bold;">4. Create GLUE dependency provider:</p>
        <p>In the <i>src/Pyz/GlueApplication</i> directory of your Spryker code installation, create file <b>GlueApplicationDependencyProvider.php</b> and add the following code:</p><pre><code class="language-PHP line-numbers">&lt;?php
 
namespace Pyz\Glue\GlueApplication;
 
class GlueApplicationDependencyProvider extends SprykerGlueApplicationDependencyProvider
{
    /**
     * {@inheritdoc}
     *
     * @return \Spryker\Glue\GlueApplicationExtension\Dependency\Plugin\ResourceRoutePluginInterface[]
     */
    protected function getResourceRoutePlugins(): array
    {
        return [
        ];
    }
 
    /**
     * {@inheritdoc}
     *
     * @return \Spryker\Glue\GlueApplicationExtension\Dependency\Plugin\ValidateRestRequestPluginInterface[]
     */
    protected function getValidateRestRequestPlugins(): array
    {
        return [
        ];
    }
 
    /**
     * {@inheritdoc}
     *
     * @return \Spryker\Glue\GlueApplicationExtension\Dependency\Plugin\FormatResponseHeadersPluginInterface[]
     */
    protected function getFormatResponseHeadersPlugins(): array
    {
        return [
        ];
    }
 
    /**
     * {@inheritdoc}
     *
     * @return \Spryker\Glue\GlueApplicationExtension\Dependency\Plugin\ControllerBeforeActionPluginInterface[]
     */
    protected function getControllerBeforeActionPlugins(): array
    {
        return [
        ];
    }
}</code></pre>
        <p style="font-weight: bold;">5. Add GLUE application constants to your environment</p>
        <p>Finally, you need to add GLUE application constants to your environment configuration file. The following is an example of the development environment:</p><pre><code class="language-PHP line-numbers">use Spryker\Shared\GlueApplication\GlueApplicationConstants;
...
// ----------- Glue Application
$config[GlueApplicationConstants::GLUE_APPLICATION_DOMAIN] = '&lt;your_glue_domain&gt;';
$config[GlueApplicationConstants::GLUE_APPLICATION_REST_DEBUG] = false;</code></pre>
        <p>where &lt;<i>your_glue_domain</i>&gt; is the URL domain you want to use for GLUE. If you want to use the default domain of the Spryker shop, you can leave it empty.</p>
        <p class="tip">If you want to enable GLUE application debugging, set the GLUE_APPLICATION_REST_DEBUG variable to <b>true</b>.</p>
        <p style="font-weight: bold;">6. Enable customer authentication via OAuth tokens (optional)</p>
        <p>GLUE provides the possibility to authenticate customer users with the help of OAuth tokens. If you are going to use customer authentication, you will also need to perform the following additional steps:</p>
        <ul>
            <li>Install the <i>AuthRestApi</i> and <i>OauthCustomerConnector</i> modules:</li>
        </ul><pre><code class="language-PHP line-numbers">composer require spryker/auth-rest-api spryker/oauth-customer-connector --update-with-dependencies</code></pre>
        <ul>
            <li>Add OAuth plugins to the GLUE dependency provider. To do this, open file <i>src/Pyz/GlueApplication/GlueApplicationDependencyProvider.php</i> and make the following changes:<br />Add <b>use</b> closes for the required OAuth plugins:</li>
        </ul><pre><code class="language-PHP line-numbers">...
namespace Pyz\Glue\GlueApplication;
 
use Spryker\Glue\AuthRestApi\Plugin\AccessTokensResourceRoutePlugin;
use Spryker\Glue\AuthRestApi\Plugin\AccessTokenValidatorPlugin;
use Spryker\Glue\AuthRestApi\Plugin\FormatAuthenticationErrorResponseHeadersPlugin;
use Spryker\Glue\AuthRestApi\Plugin\RefreshTokensResourceRoutePlugin;...</code></pre>
        <p>Add OAuth resource plugins:</p><pre><code class="language-PHP line-numbers">protected function getResourceRoutePlugins(): array
{
    return [
        new AccessTokensResourceRoutePlugin(),
        new RefreshTokensResourceRoutePlugin(),
    ];
}</code></pre>
        <p>Add token validation plugin:</p><pre><code class="language-PHP line-numbers">protected function getValidateRestRequestPlugins(): array
{
    return [
        new AccessTokenValidatorPlugin(),
    ];
}</code></pre>
        <p>Add error response plugin:</p><pre><code class="language-PHP line-numbers">protected function getFormatResponseHeadersPlugins(): array
{
    return [
        new FormatAuthenticationErrorResponseHeadersPlugin(),
    ];
}</code></pre>
        <ul>
            <li>Add OAuth dependency provider. To do this, create file <i>Pyz/Zed/Oauth/OauthDependencyProvider.php</i> as follows:</li>
        </ul><pre><code class="language-PHP line-numbers">&lt;?php

namespace Pyz\Zed\Oauth;
 
use Spryker\Zed\Oauth\OauthDependencyProvider as SprykerOauthDependencyProvider;
use Spryker\Zed\OauthCustomerConnector\Communication\Plugin\Oauth\CustomerOauthScopeProviderPlugin;
use Spryker\Zed\OauthCustomerConnector\Communication\Plugin\Oauth\CustomerOauthUserProviderPlugin;
 
class OauthDependencyProvider extends SprykerOauthDependencyProvider
{
    /**
     * @return \Spryker\Zed\OauthExtension\Dependency\Plugin\OauthUserProviderPluginInterface[]
     */
    protected function getUserProviderPlugins(): array
    {
        return [
            new CustomerOauthUserProviderPlugin(),
        ];
    }
 
    /**
     * @return \Spryker\Zed\OauthExtension\Dependency\Plugin\OauthScopeProviderPluginInterface[]
     */
    protected function getScopeProviderPlugins(): array
    {
        return [
            new CustomerOauthScopeProviderPlugin(),
        ];
    }
}</code></pre>
        <ul>
            <li>Add OAuth public and private keys. For development purposes, you can use the keys supplied with Spryker Shop Suite. In production, you will need your own keys generated per the following instructions: <a href="https://oauth2.thephpleague.com/installation/#generating-public-and-private-keys">Generating public and private keys</a>. The keys need to be placed in the <i>config/Zed</i> directory of your code installation (in the Shop Suite, <i>dev_only_private.key</i> and <i>dev_only_public.key</i> are used).</li>
            <li>Add OAuth constants to your environment configuration file. In the development environment, you can use the following:</li>
        </ul><pre><code class="language-PHP line-numbers">use Spryker\Shared\Oauth\OauthConstants;
...
// ----------- OAUTH
$config[OauthConstants::PRIVATE_KEY_PATH] = 'file://' . APPLICATION_ROOT_DIR . '/config/Zed/dev_only_private.key';
$config[OauthConstants::PUBLIC_KEY_PATH] = 'file://' . APPLICATION_ROOT_DIR . '/config/Zed/dev_only_public.key';
$config[OauthConstants::ENCRYPTION_KEY] = 'lxZFUEsBCJ2Yb14IF2ygAHI5N4+ZAUXXaSeeJm6+twsUmIen';
 
// ----------- AuthRestApi
$config[OauthCustomerConnectorConstants::OAUTH_CLIENT_IDENTIFIER] = 'frontend';
$config[OauthCustomerConnectorConstants::OAUTH_CLIENT_SECRET] = 'abc123';</code></pre>
        <h2><a name="2."></a>2. Enabling GLUE</h2>
        <p>To be able to use GLUE in your project, you need to configure a Nginx host to serve REST API requests:</p>
        <p style="font-weight: bold;">1. Create Nginx VHOST configuration</p><pre><code class="language-PHP line-numbers">sudo nano /etc/nginx/sites-enabled/DE_development_glue</code></pre>
        <p>In the <i>nano</i> console that opens, paste the following:</p><pre><code class="language-PHP line-numbers">server {
    # Listener for production/staging - requires external LoadBalancer directing traffic to this port
    listen 10001;
  
    # Listener for testing/development - one host only, doesn't require external LoadBalancer
    listen 80;
  
    server_name ~^glue\\.de\\..+\\.local$;
  
    keepalive_timeout 0;
    access_log  /data/logs/development/glue-access.log extended;
  
    root /data/shop/development/current/public/Glue;
  
    set $application_env development;
    set $application_store DE;
    include "spryker/zed.conf";
}</code></pre>
        <p>Restart nginx</p><pre><code class="language-PHP line-numbers">sudo /etc/init.d/nginx restart</code></pre>
        <p style="font-weight: bold;">2. Change the machine hosts configuration</p><pre><code class="language-PHP line-numbers">sudo nano /etc/hosts</code></pre>
        <p>add the following line to the end of the file:</p><pre><code class="language-PHP line-numbers">ip glue.de.project-name.local</code></pre>
        <p>After performing this change, you should be able to access <a href="http://glue.de.project-name.local/">http://glue.de.project-name.local/</a> URL with a 404 error and JSON response indicating that resource is not found.</p>
        <p>If you are running your project in the Spryker VM, you also need to make changes to the Vagrant file of the virtual machine. To do so:</p>
        <ol>
            <li>Open file <tt>~/.vagrant.d/boxes/devvm<b>[version]</b>/0/virtualbox/include/_Vagrantfile</tt>, where <b style="font-style: italic;">[version]</b> is the VM version. On Windows, you can find the .vagrant.d folder in your user profile folder.</li>
            <li>Find the following line:<br /><pre><code class="language-PHP line-numbers">HOSTS.push [ "www#{host_suffix}.#{store}.#{domain}", "zed#{host_suffix}.#{store}.#{domain}",]</code></pre></li>
            <li>
                <p>Change it as follows:<br /><pre><code class="language-PHP line-numbers">HOSTS.push [ "www#{host_suffix}.#{store}.#{domain}", "glue#{host_suffix}.#{store}.#{domain}", "zed#{host_suffix}.#{store}.#{domain}",]</code></pre></p>
            </li>
        </ol>
        <p style="font-weight: bold;">3. Set correct OAuth key permissions</p>
        <p>If you are using the OAuth module for user authentication, change permissions for the OAuth keys:</p><pre><code class="language-PHP line-numbers">chmod 660 config/Zed/dev_only_public.key
chmod 660 config/Zed/dev_only_private.key</code></pre>
        <h2 MadCap:conditions="General.Hidden Comment">3. Integrating REST API resources</h2>
        <p MadCap:conditions="General.Hidden Comment">After installing and enabling GLUE, you can integrate various REST API resources with it. It is not required to integrate all modules for REST API to work. You can integrate only the modules you need.</p>
        <h3 MadCap:conditions="General.Hidden Comment">Login API</h3>
        <p MadCap:conditions="General.Hidden Comment">Provides the possibility to authenticate customer users.</p>
        <p MadCap:conditions="General.Hidden Comment">The API is provided by the following module:</p>
        <table style="width: 100%;mc-table-style: url('Resources/TableStyles/PatternedRows2.css');" class="TableStyle-PatternedRows2" cellspacing="0">
            <col class="TableStyle-PatternedRows2-Column-Regular" />
            <col class="TableStyle-PatternedRows2-Column-Regular" />
            <tbody>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <th class="TableStyle-PatternedRows2-BodyE-Regular-LightRows" MadCap:conditions="General.Hidden Comment">Module</th>
                    <th class="TableStyle-PatternedRows2-BodyD-Regular-LightRows" MadCap:conditions="General.Hidden Comment">Description</th>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows2-BodyB-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment"><a href="https://github.com/spryker/auth-rest-api">AuthRestApi</a>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyA-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment">Provides API endpoints to obtain an authentication token to use for subsequent requests.</td>
                </tr>
            </tbody>
        </table>
        <p MadCap:conditions="General.Hidden Comment">Installation steps: see <b>1.6. Enable customer authentication via OAuth tokens.</b></p>
        <h3 MadCap:conditions="General.Hidden Comment">Registration API</h3>
        <p MadCap:conditions="General.Hidden Comment">Provides the possibility to register new customers.</p>
        <p MadCap:conditions="General.Hidden Comment">The API is provided by the following module:</p>
        <table style="width: 100%;mc-table-style: url('Resources/TableStyles/PatternedRows2.css');" class="TableStyle-PatternedRows2" cellspacing="0">
            <col class="TableStyle-PatternedRows2-Column-Regular" />
            <col class="TableStyle-PatternedRows2-Column-Regular" />
            <tbody>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <th class="TableStyle-PatternedRows2-BodyE-Regular-LightRows" MadCap:conditions="General.Hidden Comment">Module</th>
                    <th class="TableStyle-PatternedRows2-BodyD-Regular-LightRows" MadCap:conditions="General.Hidden Comment">Description</th>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows2-BodyB-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment"><a href="https://github.com/spryker/customers-rest-api">CustomersRestApi</a>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyA-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment">Provides API endpoints to manage customers.</td>
                </tr>
            </tbody>
        </table>
        <p MadCap:conditions="General.Hidden Comment">Installation steps:</p>
        <p MadCap:conditions="General.Hidden Comment">1. Install the module using Composer:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">composer require spryker/customers-rest-api --update-with-dependencies</code></pre>
        <p MadCap:conditions="General.Hidden Comment">2. Add a resource route plugin to <i>/Pyz/Glue/GlueApplication/GlueApplicationDependencyProvider.php::getResourceRoutePlugins()</i>:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">protected function getResourceRoutePlugins(): array
    {
        return [
            ...
            new CustomersResourceRoutePlugin(),
        ];
    }</code></pre>
        <p MadCap:conditions="General.Hidden Comment">3. Run the following command:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">console transfer:generate</code></pre>
        <h3 MadCap:conditions="General.Hidden Comment">Products API</h3>
        <p MadCap:conditions="General.Hidden Comment">Provides endpoints to retrieve information about products.</p>
        <p MadCap:conditions="General.Hidden Comment">The API is provided by the following modules:</p>
        <table style="width: 100%;mc-table-style: url('Resources/TableStyles/PatternedRows2.css');" class="TableStyle-PatternedRows2" cellspacing="0">
            <col class="TableStyle-PatternedRows2-Column-Regular" />
            <col class="TableStyle-PatternedRows2-Column-Regular" />
            <col class="TableStyle-PatternedRows2-Column-Regular" />
            <tbody>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <th class="TableStyle-PatternedRows2-BodyE-Regular-LightRows" MadCap:conditions="General.Hidden Comment">Module</th>
                    <th class="TableStyle-PatternedRows2-BodyE-Regular-LightRows" MadCap:conditions="General.Hidden Comment">Description</th>
                    <th class="TableStyle-PatternedRows2-BodyD-Regular-LightRows" MadCap:conditions="General.Hidden Comment">Endpoints Provided</th>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment"><a href="https://github.com/spryker/products-rest-api">ProductsRestApi</a>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment">Provides REST access to products.</td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment"><i>/abstract-products
</i>
                        <br style="font-style: italic;" /><i>/concrete-products</i>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows" MadCap:conditions="General.Hidden Comment"><a href="https://github.com/spryker/product-availabilities-rest-api">ProductAvailabilitiesRestApi</a>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows" MadCap:conditions="General.Hidden Comment">Provides API endpoints to get abstract and concrete product availability.</td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-LightRows" MadCap:conditions="General.Hidden Comment"><i>/abstract-products/{{sku}}/abstract-product-availabilities
</i>
                        <br style="font-style: italic;" /><i>/concrete-products/{{sku}}/concrete-product-availabilities</i>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment"><a href="https://github.com/spryker/products-product-availabilities-resource-relationship">ProductsProductAvailabilitiesResourceRelationship</a>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment">Provides relationship between products (abstract and concrete) and product availabilities resources.</td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment">-</td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows" MadCap:conditions="General.Hidden Comment"><a href="https://github.com/spryker/product-prices-rest-api">ProductPricesRestApi</a>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows" MadCap:conditions="General.Hidden Comment">Provides API endpoints to retrieve abstract and concrete product prices.</td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-LightRows" MadCap:conditions="General.Hidden Comment">/<i>abstract-products/{{sku}}/abstract-product-prices
</i><br style="font-style: italic;" /><i>/concrete-products/{{sku}}/concrete-product-prices</i></td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment"><a href="https://github.com/spryker/products-product-prices-resource-relationship">ProductsProductPricesResourceRelationship</a>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment">Provides relationship between products (abstract and concrete) and product prices resources.</td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment">-</td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows" MadCap:conditions="General.Hidden Comment"><a href="https://github.com/spryker/product-tax-sets-rest-api">ProductTaxSetsRestApi</a>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows" MadCap:conditions="General.Hidden Comment">Provides API endpoints to retrieve product tax sets.</td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-LightRows" style="font-style: italic;" MadCap:conditions="General.Hidden Comment">/abstract-products/{{SKU}}/product-tax-sets</td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment"><a href="https://github.com/spryker/products-product-tax-sets-resource-relationship">ProductsProductTaxSetsResourceRelationship</a>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment">Provides relationship between abstract products and tax sets resources.</td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment">	-</td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <td class="TableStyle-PatternedRows2-BodyB-Regular-LightRows" MadCap:conditions="General.Hidden Comment"><a href="https://github.com/spryker/product-prices-rest-api">ProductImageSetsRestApi</a>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyB-Regular-LightRows" MadCap:conditions="General.Hidden Comment">Provides API endpoints to retrieve product image sets.</td>
                    <td class="TableStyle-PatternedRows2-BodyA-Regular-LightRows" MadCap:conditions="General.Hidden Comment"><i>/abstract-products/{{sku}}/abstract-product-image-sets
</i>
                        <br style="font-style: italic;" /><i>/concrete-products/{{sku}}/concrete-product-image-sets</i>
                    </td>
                </tr>
            </tbody>
        </table>
        <p MadCap:conditions="General.Hidden Comment">You can chose whether to install all modules of the API to retrieve full Products API functionality, or install any of the modules individually to get only the endpoints you need.</p>
        <p class="info" MadCap:conditions="General.Hidden Comment"><b>Relationship Modules</b>
            <br />Relationship modules provide relationship between products and related entities (e.g. between products and the tax sets available for them). This means that, when a module is installed, a request for information on a certain product will also return information on the related resource by default. If the module is not installed, you need to query the related resource explicitly. In other words, if the ProductsProductTaxSetsResourceRelationship module is installed, a query for an abstract product will also return full data of the tax sets related to them. If it is not installed, you will need to query the <i>/abstract-products/{{SKU}}/product-tax-sets</i> explicitly.</p>
        <p MadCap:conditions="General.Hidden Comment">Installation steps:</p>
        <p MadCap:conditions="General.Hidden Comment"><b>ProductsRestApi:</b>
        </p>
        <p MadCap:conditions="General.Hidden Comment">1. Install the module using Composer:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">composer require spryker/products-rest-api --update-with-dependencies</code></pre>
        <p MadCap:conditions="General.Hidden Comment">2. Add resource route plugins to <i>/Pyz/Glue/GlueApplication/GlueApplicationDependencyProvider.php::getResourceRoutePlugins()</i>:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">protected function getResourceRoutePlugins(): array
    {
        return [
            ...
            new AbstractProductsResourceRoutePlugin(),
            new ConcreteProductsResourceRoutePlugin(),
        ];
    }</code></pre>
        <p MadCap:conditions="General.Hidden Comment">3. Run the following command:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">console transfer:generate</code></pre>
        <p style="font-weight: bold;" MadCap:conditions="General.Hidden Comment">ProductAvailabilitiesRestApi:</p>
        <p MadCap:conditions="General.Hidden Comment">1. Install the module using Composer:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">composer require spryker/product-availabilities-rest-api --update-with-dependencies</code></pre>
        <p MadCap:conditions="General.Hidden Comment">2. Add resource route plugins to <i>/Pyz/Glue/GlueApplication/GlueApplicationDependencyProvider.php::getResourceRoutePlugins()</i>:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">protected function getResourceRoutePlugins(): array
    {
        return [
            ...
            new AbstractProductAvailabilitiesRoutePlugin(), // Abstract product avaialbilities
            new ConcreteProductAvailabilitiesRoutePlugin(), // Concrete product avaialbilities
        ];
    }</code></pre>
        <p MadCap:conditions="General.Hidden Comment">3. Run the following command:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">console transfer:generate</code></pre>
        <p style="font-weight: bold;" MadCap:conditions="General.Hidden Comment">ProductsProductAvailabilitiesResourceRelationship:</p>
        <p MadCap:conditions="General.Hidden Comment">1. Install the module using Composer:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">composer require spryker/products-product-availabilities-resource-relationship --update-with-dependencies</code></pre>
        <p MadCap:conditions="General.Hidden Comment">2. Add resource route plugins to <i>/Pyz/Glue/GlueApplication/GlueApplicationDependencyProvider.php::getResourceRelationshipPlugins()</i>:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">protected function getResourceRelationshipPlugins(
        ResourceRelationshipCollectionInterface $resourceRelationshipCollection
    ): ResourceRelationshipCollectionInterface
    {
        ...
        $resourceRelationshipCollection-&gt;addRelationship(
            ProductsRestApiConfig::RESOURCE_ABSTRACT_PRODUCTS,
            new ProductsProductAvailabilitiesResourceRelationshipPlugin()
        );
   
        return $resourceRelationshipCollection;
    }</code></pre>
        <h3 MadCap:conditions="General.Hidden Comment">Stores API</h3>
        <p MadCap:conditions="General.Hidden Comment">Provides API endpoints to retrieve current store configuration.</p>
        <p MadCap:conditions="General.Hidden Comment">The API is provided by the following module:</p>
        <table style="width: 100%;mc-table-style: url('Resources/TableStyles/PatternedRows2.css');" class="TableStyle-PatternedRows2" cellspacing="0">
            <col class="TableStyle-PatternedRows2-Column-Regular" />
            <col class="TableStyle-PatternedRows2-Column-Regular" />
            <tbody>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <th class="TableStyle-PatternedRows2-BodyE-Regular-LightRows" MadCap:conditions="General.Hidden Comment">Modules</th>
                    <th class="TableStyle-PatternedRows2-BodyD-Regular-LightRows" MadCap:conditions="General.Hidden Comment">Description</th>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows2-BodyB-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment"><a href="https://github.com/spryker/stores-rest-api">StoresRestApi</a>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyA-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment">Provides REST API endpoints to stores.</td>
                </tr>
            </tbody>
        </table>
        <p MadCap:conditions="General.Hidden Comment">Installation steps:</p>
        <p MadCap:conditions="General.Hidden Comment">1. Install the module using Composer:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">composer require spryker/stores-rest-api --update-with-dependencies</code></pre>
        <p MadCap:conditions="General.Hidden Comment">2. Add resource route plugin to <i>/Pyz/Glue/GlueApplication/GlueApplicationDependencyProvider.php::getResourceRoutePlugins()</i>:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">protected function getResourceRoutePlugins(): array
    {
        return [
            ...
            new StoresResourceRoutePlugin(),
        ];
    }</code></pre>
        <p MadCap:conditions="General.Hidden Comment">3. Run the following command:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">console transfer:generate</code></pre>
        <h3 MadCap:conditions="General.Hidden Comment">Search API</h3>
        <p MadCap:conditions="General.Hidden Comment">Provides the possibility to perform searches and retrieve search suggestions via the REST API.</p>
        <p MadCap:conditions="General.Hidden Comment">The API is provided by the following module:</p>
        <table style="width: 100%;mc-table-style: url('Resources/TableStyles/PatternedRows2.css');" class="TableStyle-PatternedRows2" cellspacing="0">
            <col class="TableStyle-PatternedRows2-Column-Regular" />
            <col class="TableStyle-PatternedRows2-Column-Regular" />
            <tbody>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <th class="TableStyle-PatternedRows2-BodyE-Regular-LightRows" MadCap:conditions="General.Hidden Comment">Modules</th>
                    <th class="TableStyle-PatternedRows2-BodyD-Regular-LightRows" MadCap:conditions="General.Hidden Comment">Description</th>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows2-BodyB-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment"><a href="https://github.com/spryker/catalog-search-rest-api">CatalogSearchRestApi</a>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyA-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment">Provides REST API endpoints to search products and search suggestions.</td>
                </tr>
            </tbody>
        </table>
        <p MadCap:conditions="General.Hidden Comment">Installation steps:</p>
        <p MadCap:conditions="General.Hidden Comment">1. Install the module using Composer:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">composer require spryker/catalog-search-rest-api --update-with-dependencies</code></pre>
        <p MadCap:conditions="General.Hidden Comment">2. Add plugins for catalog search and search suggestions to <i>/Pyz/Glue/GlueApplication/GlueApplicationDependencyProvider.php::getResourceRoutePlugins()</i>:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">protected function getResourceRoutePlugins(): array
    {
        return [
            ...
            new SearchResourceRoutePlugin(),
            new SuggestionsResourceRoutePlugin(),
        ];
    }</code></pre>
        <p MadCap:conditions="General.Hidden Comment">3. Run the following command:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">console transfer:generate</code></pre>
        <p MadCap:conditions="General.Hidden Comment">4. If your store also provides the <i>Products</i> API, you need to add relationship between the <i>Search</i> and <i>Products</i> APIs:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">composer require spryker/catalog-search-products-resource-relationship --update-with-dependencies</code></pre>
        <p MadCap:conditions="General.Hidden Comment">After this, add the products resource relation plugins to <i>/Pyz/Glue/GlueApplication/GlueApplicationDependencyProvider.php::getResourceRelationshipPlugins()</i>:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">protected function getResourceRelationshipPlugins(
        ResourceRelationshipCollectionInterface $resourceRelationshipCollection
    ): ResourceRelationshipCollectionInterface {
        $resourceRelationshipCollection-&gt;addRelationship(
            CatalogSearchRestApiConfig::RESOURCE_CATALOG_SEARCH,
            new CatalogSearchAbstractProductsResourceRelationshipPlugin()
        );
        $resourceRelationshipCollection-&gt;addRelationship(
            CatalogSearchRestApiConfig::RESOURCE_CATALOG_SEARCH_SUGGESTIONS,
            new CatalogSearchSuggestionsAbstractProductsResourceRelationshipPlugin()
        );
  
        return $resourceRelationshipCollection;
    }</code></pre>
        <h3 MadCap:conditions="General.Hidden Comment">Category API</h3>
        <p MadCap:conditions="General.Hidden Comment">Provides the possibility to retrieve the category tree and category nodes.</p>
        <p MadCap:conditions="General.Hidden Comment">The API is provided by the following module:</p>
        <table style="width: 100%;mc-table-style: url('Resources/TableStyles/PatternedRows2.css');" class="TableStyle-PatternedRows2" cellspacing="0">
            <col class="TableStyle-PatternedRows2-Column-Regular" />
            <col class="TableStyle-PatternedRows2-Column-Regular" />
            <tbody>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <th class="TableStyle-PatternedRows2-BodyE-Regular-LightRows" MadCap:conditions="General.Hidden Comment">Modules</th>
                    <th class="TableStyle-PatternedRows2-BodyD-Regular-LightRows" MadCap:conditions="General.Hidden Comment">Description</th>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows2-BodyB-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment"><a href="https://github.com/spryker/categories-rest-api">CategoriesRestApi</a>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyA-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment">Provides REST API endpoints to fetch category tree and category nodes by node ID.</td>
                </tr>
            </tbody>
        </table>
        <p MadCap:conditions="General.Hidden Comment">Installation steps:</p>
        <p MadCap:conditions="General.Hidden Comment">1. Install the module using Composer:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">composer require spryker/categories-rest-api --update-with-dependencies</code></pre>
        <p MadCap:conditions="General.Hidden Comment">2. Add plugins for category-trees and category-nodes resources to <i>/Pyz/Glue/GlueApplication/GlueApplicationDependencyProvider.php::getResourceRoutePlugins()</i>:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">protected function getResourceRoutePlugins(): array
    {
        return [
            ...
            new CategoriesResourceRoutePlugin(),
            new CategoryResourceRoutePlugin(),
        ];
    }</code></pre>
        <p MadCap:conditions="General.Hidden Comment">3. Run the following command:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">console transfer:generate</code></pre>
        <h3 MadCap:conditions="General.Hidden Comment">Carts API</h3>
        <p MadCap:conditions="General.Hidden Comment">Provides the possibility to manage customer carts and cart items.</p>
        <p MadCap:conditions="General.Hidden Comment">The API is provided by the following module:</p>
        <table style="width: 100%;mc-table-style: url('Resources/TableStyles/PatternedRows2.css');" class="TableStyle-PatternedRows2" cellspacing="0">
            <col class="TableStyle-PatternedRows2-Column-Regular" />
            <col class="TableStyle-PatternedRows2-Column-Regular" />
            <tbody>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <th class="TableStyle-PatternedRows2-BodyE-Regular-LightRows" MadCap:conditions="General.Hidden Comment">Modules</th>
                    <th class="TableStyle-PatternedRows2-BodyD-Regular-LightRows" MadCap:conditions="General.Hidden Comment">Description</th>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows2-BodyB-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment"><a href="https://github.com/spryker/carts-rest-api">CartsRestApi</a>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyA-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment">Provides REST API endpoints to create, get, delete carts for registered customers (using persistent storage), as well as manage cart items.</td>
                </tr>
            </tbody>
        </table>
        <p MadCap:conditions="General.Hidden Comment">Installation steps:</p>
        <p MadCap:conditions="General.Hidden Comment">1. Install the module using Composer:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">composer require spryker/cart-items-products-relationship:"^1.0.0" spryker/carts-rest-api:"^1.0.0" --update-with-dependencies</code></pre>
        <p MadCap:conditions="General.Hidden Comment">2. Add carts and cart items resource route plugin to <i>/Pyz/Glue/GlueApplication/GlueApplicationDependencyProvider.php::getResourceRoutePlugins()</i>:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">protected function getResourceRoutePlugins(): array
    {
        return [
            ...
            new CartsResourceRoutePlugin(),
            new CartItemsResourceRoutePlugin(),
        ];
    }</code></pre>
        <p MadCap:conditions="General.Hidden Comment">3. Run Propel install to add the UUID functionality:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">console propel:install</code></pre>
        <p MadCap:conditions="General.Hidden Comment">4. Generate Propel transfer objects:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">console transfer:generate</code></pre>
        <p MadCap:conditions="General.Hidden Comment">5. Run the following command to update all existing customers carts with a UUID value.</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">console quote:uuid:generate</code></pre>
        <h3 MadCap:conditions="General.Hidden Comment">Product Labels API</h3>
        <p MadCap:conditions="General.Hidden Comment">Provides the possibility to retrieve product labels.</p>
        <p MadCap:conditions="General.Hidden Comment">The API is provided by the following module:</p>
        <table style="width: 100%;mc-table-style: url('Resources/TableStyles/PatternedRows2.css');" class="TableStyle-PatternedRows2" cellspacing="0">
            <col class="TableStyle-PatternedRows2-Column-Regular" />
            <col class="TableStyle-PatternedRows2-Column-Regular" />
            <col class="TableStyle-PatternedRows2-Column-Regular" />
            <tbody>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <th class="TableStyle-PatternedRows2-BodyE-Regular-LightRows" MadCap:conditions="General.Hidden Comment">Modules</th>
                    <th class="TableStyle-PatternedRows2-BodyE-Regular-LightRows" MadCap:conditions="General.Hidden Comment">Description</th>
                    <th class="TableStyle-PatternedRows2-BodyD-Regular-LightRows" MadCap:conditions="General.Hidden Comment">Endpoints Provided</th>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows2-BodyB-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment"><a href="https://github.com/spryker/product-labels-rest-api">ProductLabelsRestApi</a>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyB-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment">	Provides REST API endpoints for product labels.</td>
                    <td class="TableStyle-PatternedRows2-BodyA-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment"><i>/product-labels/{{label-id}}
						</i>
                    </td>
                </tr>
            </tbody>
        </table>
        <p MadCap:conditions="General.Hidden Comment">Installation steps:</p>
        <p MadCap:conditions="General.Hidden Comment">1. Install the module using Composer:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">composer require spryker/product-labels-rest-api --update-with-dependencies</code></pre>
        <p MadCap:conditions="General.Hidden Comment">2. Add plugin declaration to <i>/Pyz/Glue/GlueApplication/GlueApplicationDependencyProvider.php:getResourceRoutePlugins()</i>:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">protected function getResourceRoutePlugins(): array
    {
        return [
            ...,
            new ProductLabelsResourceRoutePlugin(),
            ...,</code></pre>
        <p MadCap:conditions="General.Hidden Comment">3. Run the following command:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">console transfer:generate</code></pre>
        <p style="font-weight: bold;" MadCap:conditions="General.Hidden Comment">Retrieving Labels for Products</p>
        <p MadCap:conditions="General.Hidden Comment">Out of the box, the API provides the possibility to access labels by their ID. If you also want to retrieve labels assigned to a product together with product information, you need to install an additional relationship module:</p>
        <p MadCap:conditions="General.Hidden Comment">1. Install the module using Composer:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">composer require spryker/product-labels-rest-api --update-with-dependencies</code></pre>
        <p MadCap:conditions="General.Hidden Comment">2. Add the products resource relation plugin to <i>/Pyz/Glue/GlueApplication/GlueApplicationDependencyProvider.php::getResourceRelationshipPlugins()</i>:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">protected function getResourceRelationshipPlugins(
        ResourceRelationshipCollectionInterface $resourceRelationshipCollection
    ): ResourceRelationshipCollectionInterface {
        $resourceRelationshipCollection-&gt;addRelationship(
            ProductsRestApiConfig::RESOURCE_ABSTRACT_PRODUCTS,
            new ProductLabelsRelationshipByResourceIdPlugin()
        );
  
        return $resourceRelationshipCollection;
    }</code></pre>
        <p MadCap:conditions="General.Hidden Comment">3. Run the following command:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">console transfer:generate</code></pre>
        <h3 MadCap:conditions="General.Hidden Comment">Checkout API</h3>
        <p MadCap:conditions="General.Hidden Comment">Provides the possibility to place orders and retrieve checkout information.</p>
        <p MadCap:conditions="General.Hidden Comment">The API is provided by the following module:</p>
        <table style="width: 100%;mc-table-style: url('Resources/TableStyles/PatternedRows2.css');" class="TableStyle-PatternedRows2" cellspacing="0">
            <col class="TableStyle-PatternedRows2-Column-Regular" />
            <col class="TableStyle-PatternedRows2-Column-Regular" />
            <col class="TableStyle-PatternedRows2-Column-Regular" />
            <tbody>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <th class="TableStyle-PatternedRows2-BodyE-Regular-LightRows" MadCap:conditions="General.Hidden Comment">Modules</th>
                    <th class="TableStyle-PatternedRows2-BodyE-Regular-LightRows" MadCap:conditions="General.Hidden Comment">Description</th>
                    <th class="TableStyle-PatternedRows2-BodyD-Regular-LightRows" MadCap:conditions="General.Hidden Comment">Endpoints Provided</th>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows2-BodyB-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment">CheckoutRestApi</td>
                    <td class="TableStyle-PatternedRows2-BodyB-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment"><![CDATA[	]]></td>
                    <td class="TableStyle-PatternedRows2-BodyA-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment">&#160;</td>
                </tr>
            </tbody>
        </table>
        <p MadCap:conditions="General.Hidden Comment">Installation steps:</p>
        <p style="font-weight: bold;" MadCap:conditions="General.Hidden Comment">Placing an Order</p>
        <p MadCap:conditions="General.Hidden Comment">1. Install the module using Composer:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">composer require spryker/product-labels-rest-api --update-with-dependencies</code></pre>
        <p MadCap:conditions="General.Hidden Comment">2. Add plugin declaration to <i>src/Pyz/Glue/GlueApplication/GlueApplicationDependencyProvider.php:getResourceRoutePlugins():</i></p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">protected function getResourceRoutePlugins(): array
    {
        return [
            ...,
            new CheckoutResourcePlugin(),
            ...,</code></pre>
        <p MadCap:conditions="General.Hidden Comment">3. Add relationship to the order to <i>src/Pyz/Glue/GlueApplication/GlueApplicationDependencyProvider.php:getResourceRelationshipPlugins()</i>:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">protected function getResourceRelationshipPlugins(
         ResourceRelationshipCollectionInterface $resourceRelationshipCollection
     ): ResourceRelationshipCollectionInterface {
        ...
        $resourceRelationshipCollection-&gt;addRelationship(
            CheckoutRestApiConfig::RESOURCE_CHECKOUT,
            new OrderRelationshipByOrderReferencePlugin()
        );
        ...</code></pre>
        <p style="font-weight: bold;" MadCap:conditions="General.Hidden Comment">Retrieving Checkout Data</p>
        <p MadCap:conditions="General.Hidden Comment">1. Install the module using Composer:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">composer require spryker/product-labels-rest-api --update-with-dependencies</code></pre>
        <p MadCap:conditions="General.Hidden Comment">2. Add plugin declaration to <i>src/Pyz/Glue/GlueApplication/GlueApplicationDependencyProvider.php:getResourceRoutePlugins()</i>:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">protected function getResourceRoutePlugins(): array
    {
        return [
            ...,
            new CheckoutDataResourcePlugin(),
            ...,</code></pre>
        <h3 MadCap:conditions="General.Hidden Comment">Customers API</h3>
        <p MadCap:conditions="General.Hidden Comment">Provides the possibility to retrieve product labels.</p>
        <p MadCap:conditions="General.Hidden Comment">The API is provided by the following module:</p>
        <table style="width: 100%;mc-table-style: url('Resources/TableStyles/PatternedRows2.css');" class="TableStyle-PatternedRows2" cellspacing="0">
            <col class="TableStyle-PatternedRows2-Column-Regular" />
            <col class="TableStyle-PatternedRows2-Column-Regular" />
            <col class="TableStyle-PatternedRows2-Column-Regular" />
            <tbody>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <th class="TableStyle-PatternedRows2-BodyE-Regular-LightRows" MadCap:conditions="General.Hidden Comment">Modules</th>
                    <th class="TableStyle-PatternedRows2-BodyE-Regular-LightRows" MadCap:conditions="General.Hidden Comment">Description</th>
                    <th class="TableStyle-PatternedRows2-BodyD-Regular-LightRows" MadCap:conditions="General.Hidden Comment">Endpoints Provided</th>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows2-BodyB-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment"><a href="https://github.com/spryker/customers-rest-api">CustomersRestApi</a>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyB-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment">	Provides endpoints that allow you to manage customers.</td>
                    <td class="TableStyle-PatternedRows2-BodyA-Regular-DarkerRows" MadCap:conditions="General.Hidden Comment"><i>/customers
</i>
                        <br style="font-style: italic;" /><i>/customers/{{customer_id}}
</i>
                        <br style="font-style: italic;" /><i>/customers/{{customer_id}}/addresses
</i>
                        <br style="font-style: italic;" /><i>/customers/{{customer_id}}/addresses/{{address_id}}</i>
                    </td>
                </tr>
            </tbody>
        </table>
        <p MadCap:conditions="General.Hidden Comment">Installation steps:</p>
        <p MadCap:conditions="General.Hidden Comment">1. Install the module using Composer:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">composer require spryker/customers-rest-api --update-with-dependencies
composer require spryker/wishlists-rest-api --update-with-dependencies</code></pre>
        <p MadCap:conditions="General.Hidden Comment">2. Add plugin declaration to <i>/Pyz/Glue/GlueApplication/GlueApplicationDependencyProvider.php::getResourceRoutePlugins()</i>:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">protected function getResourceRoutePlugins(): array
{
    return [
        ...
        new CustomersResourceRoutePlugin(),
        new AddressesResourceRoutePlugin(),
    ];
}</code></pre>
        <p MadCap:conditions="General.Hidden Comment">3. Add CustomersToAddressesRelationshipPlugin and WishlistRelationshipByResourceIdPlugin to <i>/Pyz/Glue/GlueApplication/GlueApplicationDependencyProvider.php::getResourceRelationshipPlugins()</i>:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">protected function getResourceRelationshipPlugins(
    ResourceRelationshipCollectionInterface $resourceRelationshipCollection
): ResourceRelationshipCollectionInterface {
    $resourceRelationshipCollection-&gt;addRelationship(
        CustomersRestApiConfig::RESOURCE_CUSTOMERS,
        new CustomersToAddressesRelationshipPlugin()
    );
    $resourceRelationshipCollection-&gt;addRelationship(
        CustomersRestApiConfig::RESOURCE_CUSTOMERS,
        new WishlistRelationshipByResourceIdPlugin()
    );
    return $resourceRelationshipCollection;
}</code></pre>
        <p MadCap:conditions="General.Hidden Comment">4. Run the following command:</p><pre MadCap:conditions="General.Hidden Comment"><code class="language-PHP line-numbers">console transfer:generate
console propel:install
console customer-addresses:uuid:generate</code></pre>
        <p>&#160;</p>
        <p style="font-style: italic;">Last review date: Dec 24, 2018 <MadCap:conditionalText MadCap:conditions="General.Hidden Comment">by Volodymyr Volkov and Dmitry Deirak</MadCap:conditionalText></p>
    </body>
</html>