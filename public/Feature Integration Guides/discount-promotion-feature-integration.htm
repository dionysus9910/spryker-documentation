<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title>Feature Integration - Discount Promotion | Spryker</title>
        <meta name="description" content="This guides provides you with a set of steps needed to be performed in order to integrate the Discount Promotion feature into your project." />
    </head>
    <body>
        <h1>Feature Integration - Discount Promotion</h1>
        <p>To start using the Discount Promotion feature, you have to do some configuration in your Zed application.</p>
        <h2>Prerequisites</h2>
        <ol>
            <li>First make sure you have the latest <var>DiscountPromotion</var> module. 
				<p>Use <var>composer require spryker/discount-promotion</var> command to install it.</p></li>
            <li>You also need at least  <var>"spryker/discount": "^4.5.0"</var> for the discount module.
			<ul><li>Run <var>vendor/bin/console transfer:generate</var> to generate the latest transfer object.</li><li>Run <var>vendor/bin/console propel:diff</var> to generate migration file for the database. Inspect this new file and check if only <var>spy_discount_promotion</var> has been created there.</li><li>Run <var>vendor/bin/console propel:migrate</var> to migrate the latest <i>generate migration</i> file.</li><li>Run <var>vendor/bin/console propel:model:build</var> to generate new propel Entities and Query classes.</li></ul></li>
        </ol>
        <h2>Enabling Discount Promotions</h2>
        <p>To enable Discount promotions, you have to add a number of plugins to <var>Discount</var> module so <var>that DiscountPromotion</var> could extend it.</p>
        <p>Bellow is the example of <var>DiscountDependencyProvider</var> class.</p>
        <p><pre><code class="language-PHP line-numbers">&lt;?php
            
namespace Pyz\Zed\Discount;

use Spryker\Zed\Discount\DiscountDependencyProvider as SprykerDiscountDependencyProvider;
use Spryker\Zed\DiscountPromotion\Communication\Plugin\Discount\DiscountFilterPromotionDiscountsPlugin;
use Spryker\Zed\DiscountPromotion\Communication\Plugin\Discount\DiscountPromotionCalculationFormExpanderPlugin;
use Spryker\Zed\DiscountPromotion\Communication\Plugin\Discount\DiscountPromotionCollectorStrategyPlugin;
use Spryker\Zed\DiscountPromotion\Communication\Plugin\Discount\DiscountPromotionConfigurationExpanderPlugin;
use Spryker\Zed\DiscountPromotion\Communication\Plugin\Discount\DiscountPromotionPostSavePlugin;
use Spryker\Zed\DiscountPromotion\Communication\Plugin\Discount\DiscountPromotionPostUpdatePlugin;

	class DiscountDependencyProvider extends SprykerDiscountDependencyProvider
	{
		/**
		 	 * @return array
			 */
			protected function getDiscountableItemFilterPlugins()
			{
				return [
					new DiscountFilterPromotionDiscountsPlugin(), //Filter out discountable items which have promotionItem = trye
				];
			}

			/**
			 * @return \Spryker\Zed\Discount\Dependency\Plugin\CollectorStrategyPluginInterface[]
			 */
			protected function getCollectorStrategyPlugins()
			{
				return [
					new DiscountPromotionCollectorStrategyPlugin(), //specialized collector strategy for promotion discounts
				];
			}

			/**
			 * @return \Spryker\Zed\Discount\Dependency\Plugin\DiscountPostSavePluginInterface[]
			 */
			protected function getDiscountPostSavePlugins()
			{
				return [
					new DiscountPromotionPostSavePlugin(), //Save promotion discount
				];
			}

			/**
			 * @return \Spryker\Zed\Discount\Dependency\Plugin\DiscountPostUpdatePluginInterface[]
			 */
			protected function getDiscountPostUpdatePlugins()
			{
				return [
					new DiscountPromotionPostUpdatePlugin(),//Update promotion discount
				];
			}

			/**
			 * @return \Spryker\Zed\Discount\Dependency\Plugin\DiscountConfigurationExpanderPluginInterface[]
			 */
			protected function getDiscountConfigurationExpanderPlugins()
			{
				return [
					new DiscountPromotionConfigurationExpanderPlugin(), //Expand DiscountConfigurationTransfer with Promotion discount data.
				];
       		}

			/**
			 * This plugin allows to expand DiscountConfigurationTransfer when using
			 *
			 * @return \Spryker\Zed\Discount\Dependency\Plugin\Form\DiscountFormExpanderPluginInterface[]
			 */
			protected function getDiscountFormExpanderPlugins()
			{
				return [
					new DiscountPromotionCalculationFormExpanderPlugin(), //Expand Discount form type with new promotion discount. Adds new form fields.
				];
			}

			/**
			 * @return \Spryker\Zed\Discount\Dependency\Plugin\Form\DiscountFormDataProviderExpanderPluginInterface[]
			 */
			protected function getDiscountFormDataProviderExpanderPlugins()
			{
				return [
					new DiscountPromotionCalculationFormDataExpanderPlugin(), // Expand Discount form with additional data
				];
			}

			/**
			 * @return \Spryker\Zed\Discount\Dependency\Plugin\DiscountViewBlockProviderPluginInterface[]
			 */
			protected function getDiscountViewTemplateProviderPlugins()
			{
				return [
					new DiscountPromotionViewBlockProviderPlugin(), //Provide additional content to discount view page
				];
			}

			/**
			 * @return \Spryker\Zed\Discount\Dependency\Plugin\DiscountViewBlockProviderPluginInterface[]
			 */
			protected function getDiscountApplicableFilterPlugins()
			{
				return [
					new DiscountPromotionFilterApplicableItemsPlugin(), //Filter promotion items from decision rule
				];
			}
	}</code></pre>
        </p>
        <p>The new calculator plugin must be registered in <var>CalculationDependencyProvider</var>:
<pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Zed\Calculation;

use Spryker\Zed\DiscountPromotion\Communication\Plugin\Calculation\RemovePromotionItemsCalculatorPlugin;

class CalculationDependencyProvider extends SprykerCalculationDependencyProvider
{
	protected function getQuoteCalculatorPluginStack(Container $container)
		{
			return [
				new RemoveTotalsCalculatorPlugin(),
				new RemoveAllCalculatedDiscountsCalculatorPlugin(),
				new RemovePromotionItemsCalculatorPlugin(), //Removes promotion items from quote

				...//other plugins
			];
		}
}</code></pre></p>
        <p>The new Cart expander plugin must be registered in:
<pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Zed\Cart;

class CartDependencyProvider extends SprykerCartDependencyProvider
{
	/**
	 * @param \Spryker\Zed\Kernel\Container $container
	 *
	 * @return \Spryker\Zed\Cart\Dependency\ItemExpanderPluginInterface[]
	 */
	protected function getExpanderPlugins(Container $container)
		{
			return [
				... //other plugins
				new CartGroupPromotionItems(), //expand group key with promo item identifier
			];
		}
}</code></pre></p>
        <h2>Usage in Yves</h2>
        <p>To be able to see promotion products, you have to change how cart items are rendered in Yves.</p>
        <ol>
            <li>Take <var>Pyz\Yves\DiscountPromotion</var> module from demoshop and place it somewhere in your project.</li>
            <li>Change <var>CartOperationHandler::add</var> method to include promotion item flag. 
			<p>Like <var>$itemTransfer-&gt;setIsPromotion((bool)$this-&gt;request-&gt;request-&gt;get('isPromo'));</var>.</p></li>
            <li>Inject <var>ProductPromotionMapperPlugin</var> to Cart Module:
<pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Yves\Cart;

use Spryker\Yves\DiscountPromotion\Plugin\ProductPromotionMapperPlugin;

class CartDependencyProvider extends AbstractBundleDependencyProvider
{
	const PLUGIN_PROMOTION_PRODUCT_MAPPER = 'PLUGIN_PROMOTION_PRODUCT_MAPPER';

	/**
	 * @param \Spryker\Yves\Kernel\Container $container
	 *
	 * @return \Spryker\Yves\Kernel\Container
	 */
	protected function providePlugins(Container $container)
		{
			...//other plugins
			$container[self::PLUGIN_PROMOTION_PRODUCT_MAPPER] = function () {
			return new ProductPromotionMapperPlugin();
		};
	}
}</code></pre></li>
            <li>Add  <var>getProductPromotionMapperPlugin</var> method to the DiscountFactory provider.
<pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Yves\Cart;

class CartFactory extends AbstractFactory
{
	/**
	 * @return \Spryker\Yves\DiscountPromotion\Dependency\PromotionProductMapperPluginInterface
	 */
	public function getProductPromotionMapperPlugin()
	{
		return $this-&gt;getProvidedDependency(CartDependencyProvider::PLUGIN_PROMOTION_PRODUCT_MAPPER);
	}
}</code></pre></li>
            <li>Add call to plugin in <var>CartController</var>.
<pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Yves\Cart\Controller;

/**
 * @method \Spryker\Client\Cart\CartClientInterface getClient()
 * @method \Pyz\Yves\Cart\CartFactory getFactory()
 */
class CartController extends AbstractController
{

	/**
	 * @param array|null $selectedAttributes
	 *
	 * @return array
	 */
	public function indexAction(array $selectedAttributes = null)
		{
			$promotionStorageProducts = $this-&gt;getFactory()
				-&gt;getProductPromotionMapperPlugin()
				-&gt;mapPromotionItemsFromProductStorage(
					$quoteTransfer,
					$this-&gt;getRequest()
			);

			$this-&gt;viewResponse([
				//other data
				'promotionStorageProducts' =&gt; $promotionStorageProducts,
			]);

}</code></pre></li>
        </ol>
        <p>Change twig templates to render promotion products. Since we've changed how quantity is rendered for promotion products, some cart templates in our demoshop were reorganized.</p>
        <p>Firstly make sure a promotion item twig template is called in <var>Pyz/Yves/Cart/Theme/default/cart/index.twig</var>, this usually should be placed after cart items as in the example below:
<pre><code class="language-XML line-numbers">{% for cartItem in cartItems %}
	{% if cartItem.bundleProduct is defined %}
		{% include '@cart/cart/parts/cart-item.twig' with {
			cartItem: cartItem.bundleProduct,
			bundleItems: cartItem.bundleItems
		} %}
		{% else %}
			{% include '@cart/cart/parts/cart-item.twig' %}
		{% endif %}
	{% endfor %} //existing code

{% include '@DiscountPromotion/discount-promotion/item-list.twig' %} //new include</code></pre></p>
        <p>The <var>Pyz/Yves/Cart/Theme/default/cart/parts/cart-item.twig</var> was also heavily modified to work with promotion products (please check our demoshop version), as cart page can be different per project.</p>
        <p>The key points that were changed: "Add to cart" button extracted to <var>Pyz/Yves/Cart/Theme/default/cart/parts/cart-add-to-cart.twig</var>, item price information extracted to <var>Pyz/Yves/Cart/Theme/default/cart/parts/cart-item-prices.twig</var>, cart product variants extracted to <var>Pyz/Yves/Cart/Theme/default/cart/parts/cart-product-variants.twig</var>.</p>
        <p>Below is the demoshop <var>Pyz/Yves/Cart/Theme/default/cart/parts/cart-item.twig</var> file for reference.
<pre><code class="language-XML line-numbers">&lt;div class="callout cart-item"&gt;&lt;div class="row"&gt;

	{% include '@Cart/cart/parts/cart-images.twig' %}

 	&lt;div class="small-9 large-expand columns"&gt;&lt;ul class="no-bullet"&gt;
		{# General data #}
		&lt;li class="lead"&gt;{{ cartItem.name }}&lt;/li&gt;&lt;li class="__secondary"&gt;&lt;small&gt;{{ 'cart.item.sku' | trans }} {{ cartItem.sku }}&lt;/small&gt;&lt;/li&gt;

		{% if bundleItems is defined %}
			{# Product Bundles #}
			&lt;li&gt;&lt;strong&gt;{{ 'cart.item.bundle.description' | trans }}&lt;/strong&gt;&lt;ul&gt;
				{% for bundleItem in bundleItems %}
					&lt;li&gt;{{ bundleItem.quantity }} x {{ bundleItem.name }}  &lt;/li&gt;
				{% endfor %}
					&lt;/ul&gt;&lt;/li&gt;
				{% else %}
					{% include '@Cart/cart/parts/cart-product-variants.twig' %}
				{% endif %}
		&lt;/ul&gt;&lt;/div&gt;

		{% include '@Cart/cart/parts/cart-item-prices.twig' %}

		{% include '@Cart/cart/parts/cart-add-to-cart.twig' %}
&lt;/div&gt;&lt;/div&gt;</code></pre></p>
        <p>Make sure <var>CartOperationHandler</var> sets ID of <var>idDiscountPromotion</var>.
<pre><code class="language-yaml line-numbers">public function add($sku, $quantity, $optionValueUsageIds = [])
	{
		$itemTransfer = new ItemTransfer();
		$itemTransfer-&gt;setSku($sku);
		$itemTransfer-&gt;setQuantity($quantity);
		$itemTransfer-&gt;setIdDiscountPromotion($this-&gt;getIdDiscountPromotion()); //new setter

		$this-&gt;addProductOptions($optionValueUsageIds, $itemTransfer);

		$quoteTransfer = $this-&gt;cartClient-&gt;addItem($itemTransfer);
		$this-&gt;cartClient-&gt;storeQuote($quoteTransfer);
	}

protected function getIdDiscountPromotion()
{
	return (int)$this-&gt;request-&gt;request-&gt;get('idDiscountPromotion');
}</code></pre></p>
        <p>When using promotion discount with voucher code, you will get the error message that voucher is not correct. It’s because voucher code is a product offered as promotion and not yet added to cart.</p>
        <p>You have to modify <var>\Pyz\Yves\Discount\Handler\VoucherHandler::addFlashMessages</var> to handle discounts with promotions.</p>
        <p>Add the following condition:
<pre><code class="language-PHP line-numbers">namespace Pyz\Yves\Discount\Handler;

class VoucherHandler extends BaseHandler implements VoucherHandlerInterface
{
	/**
	 * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
	 * @param string $voucherCode
	 *
	 * @return void
	 */
	protected function addFlashMessages($quoteTransfer, $voucherCode)
		{

			//---new code
				if ($this-&gt;isVoucherFromPromotionDiscount($quoteTransfer, $voucherCode)) {
			return;
		}
		//-----

			if ($this-&gt;isVoucherCodeApplied($quoteTransfer, $voucherCode)) {
				$this-&gt;setFlashMessagesFromLastZedRequest($this-&gt;calculationClient);
		return;
		}

			$this-&gt;flashMessenger-&gt;addErrorMessage('cart.voucher.apply.failed');
		}

		/**
		 * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
		 * @param string $voucherCode
		 *
		 * @return bool
		 */
		protected function isVoucherFromPromotionDiscount(QuoteTransfer $quoteTransfer, $voucherCode)
		{
			foreach ($quoteTransfer-&gt;getUsedNotAppliedVoucherCodes() as $voucherCodeUsed) {
				if ($voucherCodeUsed === $voucherCode) {
 			return true;
		}
	}

    	return false;
	}
}</code></pre></p>
        <p>After this you should be able to use the new discounts with promotion.</p>
    </body>
</html>