<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="" MadCap:conditions="Spryker.B2B,Spryker.B2C,Spryker.DemoShop,Spryker.ShopSuite">
    <head>
    </head>
    <body>
        <h1>CRUD Functionality - Zed API <img src="../../../Resources/Images/shoptype/B2B_Shop.png" /> <img src="../../../Resources/Images/shoptype/B2C_Shop.png" /> <img src="../../../Resources/Images/shoptype/MasterSuite.png" /> <img src="../../../Resources/Images/shoptype/Demoshop.png" /></h1>
        <h2>Filtering
</h2>
        <p>For <var>find </var>action we return a paginated collection that can be limited and customized based on query string input or headers. So using the provided FilterPreProcessors one can enable filtering (conditions), sorting (and multi-sorting) and pagination.

</p>
        <h3>Condition Filtering
</h3>
        <p>For the filtering we use the Spryker PropelQueryBuilder module. It generates Propel query criteria based on a <a href="http://querybuilder.js.org/" target="_blank">jQuery QueryBuilder</a> string.

</p>
        <p>You can pass any kind of complex query including AND/OR into the <var>filter </var>query string:

</p><pre xml:space="preserve"><code class="bash">/api/rest/customers?filter={%22condition%22:%22OR%22,%22rules%22:[{%22id%22:
%22first_name%22,%22field%22:%22first_name%22,%22type%22:%22string%22,
%22input%22:%22text%22,%22operator%22:%22equal%22,%22value%22:%22John%22},
{%22id%22:%22last_name%22,%22field%22:%22last_name%22,%22type%22:%22string%22,
%22input%22:%22text%22,%22operator%22:%22equal%22,%22value%22:%22Doe%22}]}</code></pre>
        <h3>
Field Limitations</h3>
        <p>For limiting fields you can use the <var>fields </var>query string:

</p><pre><code class="language-PHP line-numbers">/api/rest/customers?fields=name,id
</code></pre>
        <p>Comma separate the fields.

</p>
        <h3>Sorting</h3>
        <p>
/api/rest/customers?sort=name,-id
</p>
        <p>Comma separate the fields. A <var>-</var> prefix will sort DESC instead of the default ASC.

</p>
        <h3>Pagination
</h3>
        <p>By default the API returns a set of 20 records. You can adjust this up via <var>limit </var>query string to the “maximum per page” value. You can also set a <var>page </var>query string param as an offset.

</p>
        <p>/api/rest/customers?page=2&amp;limit=50
</p>
        <p>The following meta and link blocks will be included in the response:

</p><pre><code class="language-PHP line-numbers">"links": {
    "first": ...,
    "prev": ...,
    "next": ...,
    "last": ...,
},
"meta": {
    "page": 3,
    "pages": 3,
    "records": 5,
    "records_per_page": 20,
    "records_total": 55
}
</code></pre>
        <h3><strong>Pagination by Header Range</strong>
        </h3>
        <p>The core also ships with a header range solution, setting the range to<var> 0-9</var> (page 1), <var>10-19 </var>(page 2), etc. The header to be sent by the client would look like this:

</p><pre><code class="language-PHP line-numbers">Range: customers=0-9
</code></pre>
        <p class="note">This pagination type is 0-based.

</p>
        <h3>Implement a Custom Solution
</h3>
        <p>In case you need a different pagination strategy, you can replace the core Processor with a custom project one for either a page-based or offset-based solution.

</p>
        <h2>Fields
</h2>
        <p>Each resource must have a <var>ResourceApiTransfer</var>, e.g. for a customer it would be a <var>CustomerApiTransfer</var>. You will declare it in a <var>customer_api.transfer.xml</var> and insert only fields you want to support for.

</p>
        <p>By default, any resource will only expose and accept the fields defined in this transfer. For response data you can also further filter by a whitelistas field map (see above).
</p>
        <h2>Add and Update
</h2>
        <p>When adding or updating a resource item, one must contain the payload in the following structure:

</p><pre><code class="language-PHP line-numbers">{
    "data": {
        "field": "value",
        ...
    }
}
</code></pre>
        <p>Primary keys in the payload will be ignored for security reasons.

</p>
        <h3>Validation
</h3>
        <p>For “add” and “update” actions we need validation to handle the incoming post data. The process here is to delegate this to the ApiFacade::validate() method, which internally uses a configured stack of validation plugins. These can be configure in your ApiDpendencyProvider:

</p><pre><code class="language-PHP line-numbers">&lt;?php
use Spryker\Zed\CustomerApi\Communication\Plugin\Api\CustomerApiValidatorPlugin;
use Spryker\Zed\ProductApi\Communication\Plugin\Api\ProductApiValidatorPlugin;

    /**
     * @return \Spryker\Zed\Api\Dependency\Plugin\ApiValidatorPluginInterface[]
     */
    protected function getApiValidatorPluginCollection()
    {
        return [
            new CustomerApiValidatorPlugin(),
            new ProductApiValidatorPlugin(),
            ...
        ];
    }
</code></pre>
        <p>They use the same resource resolving as mentioned above.

</p>
        <p>Validation errors will abort the persisting and instead return a <var>422</var> error response:

</p><pre><code class="language-PHP line-numbers">{
    "code": 422,
    "message": "Validation errors.",
    "errors": [
        "field_name" =&gt; [
            "error one",
            ...                         
         ],
        ...
    ],
    ...
}
</code></pre>
        <p>Validators can have query container access if needed. E.g. “isUnique rules might need that.

</p>
        <p class="note">As per specification the members <var>data </var>and <var>errors </var><strong>MUST NOT</strong> coexist in the same document.

</p>
        <h3>Deleting
</h3>
        <p>A successful delete request returns an empty body and a <var>204</var> response code.

</p>
        <p>The Spryker default behavior is to not fail on no-op delete. If you want to be stricter, you can customize your post processor to only allow a true delete and to throw 404 if not found (anymore). Use a post processor and check the content returned then by “remove” action. It will be an empty array if no record was found to delete.

</p>
        <p>If a body is supposed to be returned, e.g. including meta data, use a <var>202</var> response code.

</p>
    </body>
</html>