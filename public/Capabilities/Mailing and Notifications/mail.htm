<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="" MadCap:conditions="Spryker.B2B,Spryker.B2C">
    <head>
    </head>
    <body>
        <h1>Mail <img src="../../Resources/Images/shoptype/B2B_Shop.png" /> <img src="../../Resources/Images/shoptype/B2C_Shop.png" /> </h1>
        <p MadCap:conditions="General.Hidden Comment">used to be http://spryker.github.io/core/bundles/mail/</p>
        <p>Sending mail is a standard web application task. There are many cases where an action triggers an email to be sent. These actions can be newsletter subscriptions, order placement, refunds, customer account registration, etc.</p>
        <p>The Mail module helps you to create emails to be sent. To send an email you need to create a <var>MailTransfer</var> and pass it to the <var>MailFacade::handleMail()</var> method. The Mail module will handle sending the email.</p>
        <p><var>MailFacade::handleMail()</var> uses the email provider that you define for the project and each provider behaves differently. One takes a fully rendered template and sends it, one just will receive a request with query params and another one only works with a well formatted JSON. There are many ways Mail Providers do their job. Therefore the Mail module is suited to work easily with a wide range of providers.</p>
        <p>To get started a simple provider has been included. The (default) provider uses <a href="http://swiftmailer.org/" target="_blank" title="Swiftmailer" alt="Swiftmailer">SwiftMailer</a>. The implementation uses the same view behavior as Yves and Zed. The default provider renders the defined templates and sends them. Override functionality for overriding templates and translations are also available in this module.</p>
        <p>Some <MadCap:variable name="General.ProductName" /> module already make use of the Mail module. To make sure the Mail module handles the mail for these other modules, register them in the Mail module before allowing emails to be handled.</p>
        <h2>Create a MailTypePlugin</h2>
        <p>MailType is a class used to build the entire <var>MailTransfer</var> through an easy to use interface. Create the <var>MailTypePlugin</var> within the module which should send out a email and implement <var>MailTypePluginInterface</var>. Then just setup your email in the <var>build()</var> method.</p>
        <p>Within the <var>build()</var> method you have access to the <var>MailBuilderInterface</var> which makes it easy to enrich the <var>MailTransfer</var> with the information needed to send out the mail. You also have access to the <var>MailTransfer</var> itself through the <var>MailBuilderInterface</var>. This is for example used to get the recipient information from a given Transfer object.</p>
        <p>In most cases you will add a specific transfer to the <var>MailTransfer</var> e.g. a <var>CustomerTransfer</var> when a customer registers. This transfer object is then available in your MailType through the <var>MailTransfer</var>.</p>
        <p>Example of a MailTypePlugin:</p><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Zed\YourBundle\Communication\Plugin\Mail;

use Spryker\Zed\Kernel\Communication\AbstractPlugin;
use Spryker\Zed\Mail\Business\Model\Mail\Builder\MailBuilderInterface;
use Spryker\Zed\Mail\Dependency\Plugin\MailTypeInterface;

class YourMailTypePlugin extends AbstractPlugin implements MailTypePluginInterface
{

    const MAIL_TYPE = 'name of your mail';
    
    /**
     * @return string
     */
    public function getName()
    {
        return static::MAIL_TYPE;
    }
    
    /**
     * @param \Spryker\Zed\Mail\Business\Model\Mail\Builder\MailBuilderInterface $mailBuilder
     *
     * @return void
     */
    public function build(MailBuilderInterface $mailBuilder)
    {
        $this
            -&gt;setSubject($mailBuilder)
            -&gt;setHtmlTemplate($mailBuilder)
            -&gt;setTextTemplate($mailBuilder)
            -&gt;setSender($mailBuilder)
            -&gt;setRecipient($mailBuilder);
    }
    
    ...
    
}</code></pre>
        <h2>Register a MailTypePlugin</h2>
        <p>To add your MailType to the <var>MailTypeCollection</var> you need to add it in your <var>MailDependencyProvider</var>:</p><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Zed\Mail;

...

public function provideBusinessLayerDependencies(Container $container) 
{
    ...
    
    $container-&gt;extend(self::MAIL_TYPE_COLLECTION, function (MailTypeCollectionAddInterface $mailCollection) {
        $mailCollection-&gt;add(new YourMailTypePlugin());
    
        return $mailCollection;
    }
    
    ...
}
...</code></pre>
    </body>
</html>