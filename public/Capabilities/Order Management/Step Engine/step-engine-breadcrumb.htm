<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="" MadCap:conditions="Spryker.B2C,Spryker.B2B,Spryker.DemoShop,Spryker.ShopSuite">
    <head>
    </head>
    <body>
        <h1>Breadcrumb Navigation - Step Engine <img src="../../../Resources/Images/shoptype/B2B_Shop.png" /> <img src="../../../Resources/Images/shoptype/B2C_Shop.png" /> <img src="../../../Resources/Images/shoptype/MasterSuite.png" /> <img src="../../../Resources/Images/shoptype/Demoshop.png" /></h1>
        <p>To set up breadcrumb navigation for a step collection, first you’ll need to mark which steps you would like to have in your breadcrumb. To mark a step available for breadcrumb just implement <var>\S<MadCap:annotation MadCap:createDate="2018-08-31T16:55:46.7306045+03:00" MadCap:creator="oksana.karasyova" MadCap:initials="OK" MadCap:comment="Need to confirm the link" MadCap:editor="oksana.karasyova" MadCap:editDate="2018-08-31T16:56:01.6661008+03:00">pryker\Yves\StepEngine\Dependency\Step\StepWithBreadcrumbInterf</MadCap:annotation>ace</var> in all the necessary steps.</p>
        <p>The following example shows how to enable <var>MyStep</var> in the breadcrumb. The comments in each method describes their responsibilities.</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php

use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
use Spryker\Yves\StepEngine\Dependency\Step\AbstractBaseStep;
use Spryker\Yves\StepEngine\Dependency\Step\StepWithBreadcrumbInterface;

class MyStep extends AbstractBaseStep implements StepWithBreadcrumbInterface
{

    /**
     * @return string
     */
    public function getBreadcrumbItemTitle()
    {
        /*
         * Return any string that will represent this step in the breadcrumb.
         */
        return 'Entry step';
    }

    /**
     * @param AbstractTransfer $dataTransfer
     *
     * @return bool
     */
    public function isBreadcrumbItemEnabled(AbstractTransfer $dataTransfer)
    {
        /*
         * Return true if this step is enabled (e.g. clickable), false otherwise. It's
         * recommended to check the post condition to align with the status logic of
         * the step.
         */
        return $this-&gt;postCondition($dataTransfer);
    }

    /**
     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
     *
     * @return bool
     */
    public function isBreadcrumbItemHidden(AbstractTransfer $dataTransfer)
    {
        /*
         * It's also possible to hide a step from the breadcrumb based on some conditions
         * by returning false in this method. It's recommended to check the require input
         * condition to align with the display logic of the step.
         */
        return !$this-&gt;requireInput($dataTransfer);
    }
    
    // also implement AbstractBaseStep methods...

}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p>Once all the necessary steps implements <var>StepWithBreadcrumbInterface</var> the next thing to do is to generate the breadcrumb data. One thing you can do is to instantiate \Spryker\Yves\StepEngine\Process\StepEngine together with the optional <var>\Spryker\Yves\StepEngine\Process\StepBreadcrumbGenerator</var>. This will provide the <var>stepBreadcrumb</var> variable with an instance of <var>\Generated\Shared\Transfer\StepBreadcrumbTransfer</var> for all the templates handled by the step engine. The <var>StepBreadcrumbTransfer</var> stores all necessary data to be able to display the breadcrumb in a template.</p>
        <p>Another thing you can do to generate the <var>StepBreadcrumbTransfer</var> is to instantiate and use <var>\Spryker\Yves\StepEngine\Process\StepBreadcrumbGenerator</var> class manually. This can be useful to provide breadcrumb for pages which are not handled with the step engine itself.</p>
        <p>The example below shows a template fragment how to render the breadcrumb with the provided <var>StepBreadcrumbTransfer</var>.</p><pre><code class="language-PHP line-numbers">&lt;ul&gt;
    {% for stepBreadcrumbItem in stepBreadcrumb.items %}
        &lt;li class="{% if stepBreadcrumbItem.isActive %}active{% elseif not stepBreadcrumbItem.isEnabled %}disabled{% endif %}"&gt;
            {% if stepBreadcrumbItem.isEnabled and not stepBreadcrumbItem.isActive %}
                &lt;a href="{{ url(stepBreadcrumbItem.route) }}"&gt;{{ stepBreadcrumbItem.title | trans }}&lt;/a&gt;
            {% else %}
                {{ stepBreadcrumbItem.title | trans }}
            {% endif %}
        &lt;/li&gt;
    {% endfor %}
&lt;/ul&gt;</code></pre>
        <p>&#160;</p>
        <p><strong>See also:</strong>
        </p>
        <ul>
            <li class="bullet_list"><a href="step-engine-workflow.htm">Step Engine Workflow</a>
            </li>
            <li class="bullet_list"><a href="step-engine-define-step.htm">Defining a Step - Step Engine</a>
            </li>
            <li class="bullet_list"><a href="step-engine-use-case-scenario.htm">Use Case Scenario - Step Engine</a>
            </li>
            <li class="bullet_list"><a href="step-engine.htm">About Step Engine</a><![CDATA[
			]]></li>
        </ul>
    </body>
</html>