<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="" MadCap:conditions="Spryker.B2B,Spryker.B2C,Spryker.DemoShop">
    <head>
    </head>
    <body>
        <h1>HowTo - Implement Prepayment Front End <img src="../../../Resources/Images/shoptype/B2B_Shop.png" /> <img src="../../../Resources/Images/shoptype/B2C_Shop.png" /> <img src="../../../Resources/Images/shoptype/Demoshop.png" /></h1>
        <h2>Creating the Form
</h2>
        <p>In Yves, we’ll start by building the form. Add the new module also in Yves and add a <var>Form/</var> folder where we’ll place the implementation for building the form.

</p>
        <p>First add the data provider, under <var>Form/DataProvider</var>:
</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Yves\PaymentMethods\Form\DataProvider;

use Generated\Shared\Transfer\QuoteTransfer;
use Pyz\Yves\Checkout\Dependency\DataProvider\DataProviderInterface;

class PrepaymentDataProvider implements DataProviderInterface
{

    /**
     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
     *
     * @return \Generated\Shared\Transfer\QuoteTransfer
     */
    public function getData(QuoteTransfer $quoteTransfer)
    {
        return $quoteTransfer;
    }

    /**
     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
     *
     * @return array
     */
    public function getOptions(QuoteTransfer $quoteTransfer)
    {
        return [];
    }

}
</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p>Then implement the form:
</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php

namespace Pyz\Yves\PaymentMethods\Form;

use Pyz\Shared\PaymentMethods\PaymentMethodsConstants;
use Pyz\Yves\Checkout\Dependency\CheckoutAbstractSubFormType;
use Pyz\Yves\Checkout\Dependency\SubFormInterface;
use Symfony\Component\OptionsResolver\OptionsResolverInterface;

class PrepaymentSubForm extends CheckoutAbstractSubFormType implements SubFormInterface
{

    /**
     * @const string
     */
    const PAYMENT_PROVIDER = PaymentMethodsConstants::PROVIDER;

    /**
     * @const string
     */
    const PAYMENT_METHOD = PaymentMethodsConstants::PAYMENT_METHOD_PREPAYMENT;

    /**
     * @return string
     */
    public function getPropertyPath()
    {
        return PaymentMethodsConstants::PAYMENT_PREPAYMENT_FORM_PROPERTY_PATH;
    }

    /**
     * @return string
     */
    public function getName()
    {
        return static::PAYMENT_PROVIDER . '_' . static::PAYMENT_METHOD;
    }

    /**
     * @return string
     */
    public function getTemplatePath()
    {
        return static::PAYMENT_PROVIDER . '/' . static::PAYMENT_METHOD;
    }

    /**
     * @param \Symfony\Component\OptionsResolver\OptionsResolverInterface $resolver
     *
     * @return void
     */
    public function setDefaultOptions(OptionsResolverInterface $resolver)
    {
        parent::setDefaultOptions($resolver);
        $resolver-&gt;setDefaults([
            SubFormInterface::OPTIONS_FIELD_NAME =&gt; [],
        ]);
    }

}
</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p>To plug this form into checkout, add a plugin for it inside the Plugin folder:
</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php

namespace Pyz\Yves\PaymentMethods\Plugin;

use Spryker\Yves\Kernel\AbstractPlugin;
use Spryker\Yves\StepEngine\Dependency\Plugin\Form\SubFormPluginInterface;

/**
 * @method \Pyz\Yves\PaymentMethods\PaymentMethodsFactory getFactory()
 */
class PrepaymentSubFormPlugin extends AbstractPlugin implements SubFormPluginInterface
{

    /**
     * @return \Pyz\Yves\PaymentMethods\Form\PrepaymentSubForm
     */
    public function createSubForm()
    {
        return $this-&gt;getFactory()-&gt;createPrepaymentForm();
    }

    /**
     * @return \Pyz\Yves\Checkout\Dependency\DataProvider\DataProviderInterface
     */
    public function createSubFormDataProvider()
    {
        return $this-&gt;getFactory()-&gt;createPrepaymentFormDataProvider();
    }

}
</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h2>Payment Handler
</h2>
        <p>Add a <var>PrepaymentHandler</var> class inside the <var>Handler </var>folder to handle the new payment type:
</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php

namespace Pyz\Yves\PaymentMethods\Handler;

use Generated\Shared\Transfer\QuoteTransfer;
use Pyz\Shared\PaymentMethods\PaymentMethodsConstants;
use Symfony\Component\HttpFoundation\Request;

class PrepaymentHandler
{

    /**
     * @const string
     */
    const PAYMENT_PROVIDER = PaymentMethodsConstants::PROVIDER;

    /**
     * @const string
     */
    const PAYMENT_METHOD = PaymentMethodsConstants::PAYMENT_METHOD_PREPAYMENT;

    /**
     * @param \Symfony\Component\HttpFoundation\Request $request
     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
     *
     * @return \Generated\Shared\Transfer\QuoteTransfer
     */
    public function addPaymentToQuote(Request $request, QuoteTransfer $quoteTransfer)
    {
        $quoteTransfer-&gt;getPayment()
            -&gt;setPaymentProvider(static::PAYMENT_PROVIDER)
            -&gt;setPaymentMethod(static::PAYMENT_METHOD);

        return $quoteTransfer;
    }
}
</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p>To plug this payment handler into checkout, add a plugin for it inside the <var>Plugin </var>folder:
</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php

namespace Pyz\Yves\PaymentMethods\Plugin;

use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
use Spryker\Yves\Kernel\AbstractPlugin;
use Spryker\Yves\StepEngine\Dependency\Plugin\Handler\StepHandlerPluginInterface;
use Symfony\Component\HttpFoundation\Request;

/**
 * @method \Pyz\Yves\PaymentMethods\PaymentMethodsFactory getFactory()
 */
class PrepaymentHandlerPlugin extends AbstractPlugin implements StepHandlerPluginInterface
{

    /**
     * @param \Symfony\Component\HttpFoundation\Request $request
     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
     *
     * @return \Generated\Shared\Transfer\QuoteTransfer
     */
    public function addToDataClass(Request $request, QuoteTransfer $quoteTransfer)
    {
        $this-&gt;getFactory()-&gt;createPrepaymentHandler()-&gt;addPaymentToQuote($request, $quoteTransfer);
    }

}
</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h2>Prepayment Twig Template
</h2>
        <p>Add the Twig template that will be rendered when prepayment method is selected under the configured path: in <var>Yves, create prepayment.twig</var> template file in <var>PaymentMethods/Theme/ then ApplicationConstants::YVES_THEME</var> config value directory. Adjust the path according to the theme you are currently using.

</p>
        <p>Adjust the path according to the theme you are currently using.
</p><pre><code class="language-PHP line-numbers">&lt;div class="payment-subform prepayment-form"&gt;
    &lt;p&gt;Please transfer the sum to the following account:&lt;/p&gt;
    &lt;p&gt;&lt;strong&gt;Account Holder:&lt;/strong&gt; [Place account holder here..]&lt;/p&gt;
    &lt;p&gt;&lt;strong&gt;IBAN:&lt;/strong&gt; [Place IBAN here..]&lt;/p&gt;
    &lt;p&gt;&lt;strong&gt;BIC:&lt;/strong&gt; [Place BIC here..]&lt;/p&gt;
    &lt;p&gt;Additional payment instructions go here...&lt;/p&gt;
    
    {{ form_widget(form.paymentmethods_prepayment) }}
    {{ form_errors(form.paymentmethods_prepayment) }}
    
&lt;/div&gt;
</code></pre>
        <p>Don’t forget to add the factory and the dependency provider for this new added module in Yves.

</p>
    </body>
</html>