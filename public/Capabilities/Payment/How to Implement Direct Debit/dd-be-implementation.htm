<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="" MadCap:conditions="Spryker.B2B,Spryker.B2C,Spryker.DemoShop">
    <head>
    </head>
    <body>
        <h1>Direct Debit Back-End Implementation <img src="../../../Resources/Images/shoptype/B2B_Shop.png" /> <img src="../../../Resources/Images/shoptype/B2C_Shop.png" /> <img src="../../../Resources/Images/shoptype/Demoshop.png" /></h1>
        <p>
Persist payment details
The payment details for the direct debit payment method need to be persisted in the database. We’ll define a new table to store this data; inside the <var>Persistence/Propel/Schema/</var> folder in Zed add the <var>spy_directdebit_schema.xml</var> file with the following content:</p><pre xml:space="preserve"><code class="bash">&lt;?xml version="1.0"?&gt;
&lt;database
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    name="zed"
    defaultIdMethod="native"
    xsi:noNamespaceSchemaLocation="http://static.spryker.com/schema-01.xsd"
    namespace="Orm\Zed\PaymentMethods\Persistence"
    package="src.Orm.Zed.PaymentMethods.Persistence"&gt;

    &lt;table name="spy_payment_directdebit"&gt;
        &lt;column name="id_payment_directdebit" type="INTEGER" autoIncrement="true" primaryKey="true"/&gt;
        &lt;column name="fk_sales_order" required="true" type="INTEGER"/&gt;

        &lt;column name="bank_account_holder" type="VARCHAR"/&gt;
        &lt;column name="bank_account_bic" type="VARCHAR" size="100"/&gt;
        &lt;column name="bank_account_iban" type="VARCHAR" size="50"/&gt;

        &lt;foreign-key name="spy_payment_directdebit-fk_sales_order" foreignTable="spy_sales_order"&gt;
            &lt;reference foreign="id_sales_order" local="fk_sales_order"/&gt;
        &lt;/foreign-key&gt;

        &lt;behavior name="timestampable"/&gt;
        &lt;id-method-parameter value="spy_payment_directdebit_pk_seq"/&gt;
    &lt;/table&gt;

&lt;/database&gt;</code></pre>
        <p>
To perform a database migration and for the query object to be generated, run the following command:</p><pre><code class="language-PHP line-numbers">vendor/bin/console propel:install</code></pre>
        <p>We’ll continue with adding the implementation for saving direct debit payment details in the persistence layer.

Create the <var>PaymentMethodsPersistenceFactory</var> class inside the persistence layer:</p><pre xml:space="preserve"><code class="bash">&lt;?php

namespace Pyz\Zed\PaymentMethods\Persistence;

use Orm\Zed\PaymentMethods\Persistence\SpyPaymentDirectDebitQuery;
use Spryker\Zed\Kernel\Persistence\AbstractPersistenceFactory;

/**
 * @method \Pyz\Zed\PaymentMethods\Persistence\PaymentMethodsQueryContainer getQueryContainer()
 */
class PaymentMethodsPersistenceFactory extends AbstractPersistenceFactory
{

    /**
     * @return \Orm\Zed\PaymentMethods\Persistence\SpyPaymentDirectDebitQuery
     */
    public function createPaymentDirectDebitQuery()
    {
        return SpyPaymentDirectDebitQuery::create();
    }

}</code></pre>
        <p xml:space="preserve">
Implement the <code>PaymentMethodsQueryContainer</code>:</p><pre xml:space="preserve"><code class="bash">&lt;?php

namespace Pyz\Zed\PaymentMethods\Persistence;

use Spryker\Zed\Kernel\Persistence\AbstractQueryContainer;

/**
 * @method \Pyz\Zed\PaymentMethods\Persistence\PaymentMethodsPersistenceFactory getFactory()
 */
class PaymentMethodsQueryContainer extends AbstractQueryContainer implements PaymentMethodsQueryContainerInterface
{

    /**
     * @param int $idSalesOrder
     *
     * @return \Orm\Zed\PaymentMethods\Persistence\SpyPaymentDirectDebitQuery
     */
    public function queryPaymentBySalesOrderId($idSalesOrder)
    {
        return $this
            -&gt;queryDirectDebit()
            -&gt;filterByFkSalesOrder($idSalesOrder);
    }

    /**
     * @return \Orm\Zed\PaymentMethods\Persistence\SpyPaymentDirectDebitQuery
     */
    protected function queryDirectDebit()
    {
        return $this-&gt;getFactory()-&gt;createPaymentDirectDebitQuery();
    }

}</code></pre>
        <p xml:space="preserve">
Add the interface for the query container:</p><pre xml:space="preserve"><code class="bash">&lt;?php

namespace Pyz\Zed\PaymentMethods\Persistence;

use Spryker\Zed\Kernel\Persistence\QueryContainer\QueryContainerInterface;

interface PaymentMethodsQueryContainerInterface extends QueryContainerInterface
{

    /**
     * @param int $idSalesOrder
     *
     * @return \Orm\Zed\PaymentMethods\Persistence\SpyPaymentDirectDebitQuery
     */
    public function queryPaymentBySalesOrderId($idSalesOrder);
}</code></pre>
        <h2>
Save Direct Debit Payment Details
</h2>
        <p>We’ll add the logic for saving and viewing the direct debit payment details in the business layer and expose it through the <var>PaymentMethodsFacade</var>.

</p>
        <p>In the <var>Business/Model/</var> folder add the <var>DirectDebit</var> class, where we’ll implement the logic for viewing the direct debit payment details.
</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre xml:space="preserve"><code class="bash">&lt;?php

namespace Pyz\Zed\PaymentMethods\Business\Model;

use Generated\Shared\Transfer\DirectDebitPaymentTransfer;
use Pyz\Zed\PaymentMethods\Persistence\PaymentMethodsQueryContainer;

class DirectDebit implements DirectDebitInterface
{

    /**
     * @var \Pyz\Zed\PaymentMethods\Persistence\PaymentMethodsQueryContainerInterface
     */
    protected $queryContainer;

    /**
     * @param \Pyz\Zed\PaymentMethods\Persistence\PaymentMethodsQueryContainerInterface $queryContainer
     */
    public function __construct(PaymentMethodsQueryContainerInterface $queryContainer)
    {
        $this-&gt;queryContainer = $queryContainer;
    }

    /**
     * @param int $salesOrderId
     *
     * @return \Generated\Shared\Transfer\DirectDebitPaymentTransfer
     */
    public function getPaymentForOrderId($salesOrderId)
    {
        $entity = $this-&gt;queryContainer-&gt;queryPaymentBySalesOrderId($salesOrderId)-&gt;findOne();
        $directDebitTransfer = new DirectDebitPaymentTransfer();
        $directDebitTransfer-&gt;fromArray($entity-&gt;toArray(), true);

        return $directDebitTransfer;
    }

    /**
     * @param int $salesOrderId
     *
     * @return bool
     */
    public function hasPaymentForOrderId($salesOrderId)
    {
        $entity = $this-&gt;queryContainer-&gt;queryPaymentBySalesOrderId($salesOrderId)-&gt;findOne();

        return $entity !== null;
    }

}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p>
In the <var>Business/Model/</var> folder add the <var>OrderSaver</var>class where we’ll implement the logic for persisting the direct debit payment details.
</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre xml:space="preserve"><code class="bash">&lt;?php

namespace Pyz\Zed\PaymentMethods\Business\Model;

use Generated\Shared\Transfer\CheckoutResponseTransfer;
use Generated\Shared\Transfer\QuoteTransfer;
use Orm\Zed\PaymentMethods\Persistence\SpyPaymentDirectDebit;
use Pyz\Shared\PaymentMethods\PaymentMethodsConstants;

class OrderSaver implements OrderSaverInterface
{

    /**
     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
     * @param \Generated\Shared\Transfer\CheckoutResponseTransfer $checkoutResponseTransfer
     *
     * @return void
     */
    public function saveOrderPayment(QuoteTransfer $quoteTransfer, CheckoutResponseTransfer $checkoutResponseTransfer)
    {
        if ($quoteTransfer-&gt;requirePayment()-&gt;getPayment()-&gt;requirePaymentMethod()-&gt;getPaymentMethod() == PaymentMethodsConstants::PAYMENT_METHOD_DIRECTDEBIT) {
            $this-&gt;saveDirectDebit($quoteTransfer, $checkoutResponseTransfer);
        }
    }

    /**
     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
     * @param \Generated\Shared\Transfer\CheckoutResponseTransfer $checkoutResponseTransfer
     *
     * @throws \Propel\Runtime\Exception\PropelException
     *
     * @return void
     */
    protected function saveDirectDebit(QuoteTransfer $quoteTransfer, CheckoutResponseTransfer $checkoutResponseTransfer)
    {
        $entity = new SpyPaymentDirectDebit();

        $directDebitTransfer = $quoteTransfer-&gt;requirePayment()-&gt;getPayment()-&gt;requirePaymentdirectdebit()-&gt;getPaymentdirectdebit();

        $entity-&gt;fromArray($directDebitTransfer-&gt;toArray());
        $entity
            -&gt;setFkSalesOrder($checkoutResponseTransfer-&gt;getSaveOrder()-&gt;getIdSalesOrder());

        $entity-&gt;save();
    }
}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p>
Implement the <var>PaymentMethodsBusinessFactory</var> to get instances for these 2 classes:
</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre xml:space="preserve"><code class="bash">&lt;?php

namespace Pyz\Zed\PaymentMethods\Business;

use Pyz\Zed\PaymentMethods\Business\Model\DirectDebit;
use Pyz\Zed\PaymentMethods\Business\Model\OrderSaver;
use Spryker\Zed\Kernel\Business\AbstractBusinessFactory;

/**
 * @method \Pyz\Zed\PaymentMethods\Persistence\PaymentMethodsQueryContainerInterface getQueryContainer()
 */
class PaymentMethodsBusinessFactory extends AbstractBusinessFactory
{

    /**
     * @return \Pyz\Zed\PaymentMethods\Business\Model\OrderSaverInterface
     */
    public function createOrderSaver()
    {
        return new OrderSaver();
    }

    /**
     * @return \Pyz\Zed\PaymentMethods\Business\Model\DirectDebitInterface
     */
    public function createDirectDebit()
    {
        return new DirectDebit($this-&gt;getQueryContainer());
    }

}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p>
Expose the save/retrieve direct debit payment details through the <var>PaymentMethodsFacade</var>:</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre xml:space="preserve"><code class="bash">&lt;?php

namespace Pyz\Zed\PaymentMethods\Business;

use Generated\Shared\Transfer\CheckoutResponseTransfer;
use Generated\Shared\Transfer\QuoteTransfer;
use Spryker\Zed\Kernel\Business\AbstractFacade;

/**
 * @method \Pyz\Zed\PaymentMethods\Business\PaymentMethodsBusinessFactory getFactory()
 */
class PaymentMethodsFacade extends AbstractFacade implements PaymentMethodsFacadeInterface
{

    /**
     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
     * @param \Generated\Shared\Transfer\CheckoutResponseTransfer $checkoutResponseTransfer
     *
     * @return void
     */
    public function saveOrderPayment(QuoteTransfer $quoteTransfer, CheckoutResponseTransfer $checkoutResponseTransfer)
    {
        $this-&gt;getFactory()-&gt;createOrderSaver()-&gt;saveOrderPayment($quoteTransfer, $checkoutResponseTransfer);
    }

    /**
     * @param int $idSalesOrder
     *
     * @return \Generated\Shared\Transfer\DirectDebitPaymentTransfer
     */
    public function getOrderDirectDebit($idSalesOrder)
    {
        return $this-&gt;getFactory()-&gt;createDirectDebit()-&gt;getPaymentForOrderId($idSalesOrder);
    }

    /**
     * @param int $idSalesOrder
     *
     * @return bool
     */
    public function hasOrderDirectDebit($idSalesOrder)
    {
        return $this-&gt;getFactory()-&gt;createDirectDebit()-&gt;hasPaymentForOrderId($idSalesOrder);
    }

}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h3>
List direct debit payment details in Zed UI</h3>
        <p>
In Zed, when looking over the details on a submitted order, we would like to see the payment details.

Extend the order details page by adding the <var>PaymentMethods/Presentation/Sales/list.twig</var> template with the following content:
</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre xml:space="preserve"><code class="bash">{% if (idPayment) %}
    &lt;div class="row"&gt;
        &lt;div class="col-sm-12"&gt;
            {% embed '@Gui/Partials/widget.twig' with { widget_title: 'Direct Debit' | trans } %}
                {% block widget_content %}
                    &lt;table class="footable table table-striped toggle-arrow-tiny"&gt;
                        &lt;tbody&gt;
                            &lt;tr&gt;
                                &lt;td&gt;&lt;strong&gt;{{ 'Account Holder' | trans }}&lt;/strong&gt;&lt;/td&gt;
                                &lt;td&gt;{{ paymentDetails.bankAccountHolder }}&lt;/td&gt;
                            &lt;/tr&gt;
                            &lt;tr&gt;
                                &lt;td&gt;&lt;strong&gt;{{ 'IBAN' | trans }}&lt;/strong&gt;&lt;/td&gt;
                                &lt;td&gt;{{ paymentDetails.bankAccountIban }}&lt;/td&gt;
                            &lt;/tr&gt;
                            &lt;tr&gt;
                                &lt;td&gt;&lt;strong&gt;{{ 'BIC' | trans }}&lt;/strong&gt;&lt;/td&gt;
                                &lt;td&gt;{{ paymentDetails.bankAccountBic }}&lt;/td&gt;
                            &lt;/tr&gt;
                        &lt;/tbody&gt;
                    &lt;/table&gt;
                {% endblock %}
            {% endembed %}
        &lt;/div&gt;
    &lt;/div&gt;
{% endif %}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p>
Add the corresponding controller action for this view in <var>PaymentMethods/Communication/Controller/SalesController.php</var>:
</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre xml:space="preserve"><code class="bash">&lt;?php

namespace Pyz\Zed\PaymentMethods\Communication\Controller;

use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;

/**
 * @method \Pyz\Zed\PaymentMethods\Persistence\PaymentMethodsQueryContainerInterface getQueryContainer()
 * @method \Pyz\Zed\PaymentMethods\Business\PaymentMethodsFacadeInterface getFacade()
 */
class SalesController extends AbstractController
{

    /**
     * @param \Symfony\Component\HttpFoundation\Request $request
     *
     * @return array
     */
    public function listAction(Request $request)
    {
        $orderTransfer = $request-&gt;request-&gt;get('orderTransfer');

        $idSalesOrder = $this-&gt;castId($orderTransfer-&gt;requireIdSalesOrder()-&gt;getIdSalesOrder());

        if ($this-&gt;getFacade()-&gt;hasOrderDirectDebit($idSalesOrder)) {
            $directDebitTransfer = $this-&gt;getFacade()-&gt;getOrderDirectDebit($idSalesOrder);

            return [
                'idPayment' =&gt; $directDebitTransfer-&gt;getIdPaymentDirectdebit(),
                'paymentDetails' =&gt; $directDebitTransfer,
            ];
        }

        return [
            'idPayment' =&gt; null,
            'paymentDetails' =&gt; null,
        ];
    }
}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h3>
Checkout plugins
</h3>
        <p>To integrate the direct debit method into the checkout, we need to provide implementations for these 2 plugins:</p>
        <ul>
            <li class="bullet_list"><![CDATA[

]]><var>CheckoutPreCondition</var><![CDATA[  ]]></li>
            <li class="bullet_list"><var>PaymentSaveOrder</var><![CDATA[  ]]></li>
        </ul>
        <p>Add the following 2 plugins in Zed, inside the <var>Communication/Plugin/Checkout/</var> folder of the new added module.

<var>DirectDebitPreCheckPlugin</var>:</p><pre xml:space="preserve"><code class="bash">&lt;?php

namespace Pyz\Zed\PaymentMethods\Communication\Plugin\Checkout;

use Generated\Shared\Transfer\CheckoutResponseTransfer;
use Generated\Shared\Transfer\QuoteTransfer;
use Spryker\Zed\Kernel\Communication\AbstractPlugin;
use Spryker\Zed\Payment\Dependency\Plugin\Checkout\CheckoutPreCheckPluginInterface;


class DirectDebitPreCheckPlugin extends AbstractPlugin implements CheckoutPreCheckPluginInterface
{

    /**
     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
     * @param \Generated\Shared\Transfer\CheckoutResponseTransfer $checkoutResponseTransfer
     *
     * @return \Generated\Shared\Transfer\CheckoutResponseTransfer
     */
    public function checkCondition(QuoteTransfer $quoteTransfer, CheckoutResponseTransfer $checkoutResponseTransfer)
    {
        return $checkoutResponseTransfer;
    }

}</code></pre>
        <p>
The <var>DirectDebitSaveOrderPlugin</var>:</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre xml:space="preserve"><code class="bash">&lt;?php

namespace Pyz\Zed\PaymentMethods\Communication\Plugin\Checkout;

use Generated\Shared\Transfer\CheckoutResponseTransfer;
use Generated\Shared\Transfer\QuoteTransfer;
use Spryker\Zed\Kernel\Communication\AbstractPlugin;
use Spryker\Zed\Payment\Dependency\Plugin\Checkout\CheckoutSaveOrderPluginInterface;

/**
 * @method \Pyz\Zed\PaymentMethods\Business\PaymentMethodsFacade getFacade()
 */
class DirectDebitSaveOrderPlugin extends AbstractPlugin implements CheckoutSaveOrderPluginInterface
{

    /**
     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
     * @param \Generated\Shared\Transfer\CheckoutResponseTransfer $checkoutResponseTransfer
     *
     * @return void
     */
    public function saveOrder(QuoteTransfer $quoteTransfer, CheckoutResponseTransfer $checkoutResponseTransfer)
    {
      $this-&gt;getFacade()-&gt;saveOrderPayment($quoteTransfer, $checkoutResponseTransfer);
    }
}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p>
Next, inject these 2 plugins in the <var>Payment</var> module by creating a <var>PaymentDependencyInjector</var> under the<var>Dependency/Injector/</var> folder:
</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre xml:space="preserve"><code class="bash">&lt;?php
namespace Pyz\Zed\PaymentMethods\Dependency\Injector;

use Pyz\Zed\PaymentMethods\Communication\Plugin\Checkout\DirectDebitPreCheckPlugin;
use Pyz\Zed\PaymentMethods\Communication\Plugin\Checkout\DirectDebitSaveOrderPlugin;
use Spryker\Zed\Kernel\Container;
use Pyz\Shared\PaymentMethods\PaymentMethodsConstants;
use Spryker\Zed\Kernel\Dependency\Injector\AbstractDependencyInjector;
use Spryker\Zed\Payment\Dependency\Plugin\Checkout\CheckoutPluginCollection;
use Spryker\Zed\Payment\PaymentDependencyProvider;

class PaymentDependencyInjector extends AbstractDependencyInjector
{

    /**
     * @param \Spryker\Zed\Kernel\Container $container
     *
     * @return \Spryker\Zed\Kernel\Container
     */
    public function injectBusinessLayerDependencies(Container $container)
    {
        $container = $this-&gt;injectPaymentPlugins($container);

        return $container;
    }

    /**
     * @param \Spryker\Zed\Kernel\Container $container
     *
     * @return \Spryker\Zed\Kernel\Container
     */
    protected function injectPaymentPlugins(Container $container)
    {
        $container-&gt;extend(PaymentDependencyProvider::CHECKOUT_PLUGINS, function (CheckoutPluginCollection $pluginCollection) {
            $pluginCollection-&gt;add(new DirectDebitPreCheckPlugin(), PaymentMethodsConstants::PROVIDER, PaymentDependencyProvider::CHECKOUT_PRE_CHECK_PLUGINS);
            $pluginCollection-&gt;add(new DirectDebitSaveOrderPlugin(), PaymentMethodsConstants::PROVIDER, PaymentDependencyProvider::CHECKOUT_ORDER_SAVER_PLUGINS);

            return $pluginCollection;
        });

        return $container;
    }

}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h2 xml:space="preserve">
State Machine</h2>
        <p>
Next, we’ll need to design a state machine that’s dedicated for processing orders that use direct debit as a payment type.

Add the <var>DirectDebit.xml</var> file inside the <var>config/Zed/oms/ folder</var>, with the following content:
</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre xml:space="preserve"><code class="bash">&lt;?xml version="1.0"?&gt;
&lt;statemachine
    xmlns="spryker:oms-01"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="spryker:oms-01 http://static.spryker.com/oms-01.xsd"&gt;

    &lt;process name="DirectDebit" main="true"&gt;
    &lt;states&gt;
        &lt;state name="new" reserved="true"/&gt;
        &lt;state name="payment issued" /&gt;
        &lt;state name="payment received" /&gt;
        &lt;state name="order shipped" /&gt;
        &lt;state name="ready for return" /&gt;
        &lt;state name="completed" /&gt;
        &lt;state name="cancelled" /&gt;
        &lt;state name="refunded" /&gt;
        &lt;state name="returned" /&gt;
        &lt;state name="payment clarification needed" /&gt;
    &lt;/states&gt;

    &lt;transitions&gt;
        &lt;transition&gt;
            &lt;source&gt;new&lt;/source&gt;
            &lt;target&gt;payment issued&lt;/target&gt;
            &lt;event&gt;capture direct debit&lt;/event&gt;
        &lt;/transition&gt;

        &lt;transition&gt;
            &lt;source&gt;payment issued&lt;/source&gt;
            &lt;target&gt;payment received&lt;/target&gt;
            &lt;event&gt;payment received&lt;/event&gt;
        &lt;/transition&gt;

        &lt;transition&gt;
            &lt;source&gt;payment issued&lt;/source&gt;
            &lt;target&gt;payment clarification needed&lt;/target&gt;
            &lt;event&gt;clarify payment&lt;/event&gt;
        &lt;/transition&gt;

        &lt;transition&gt;
            &lt;source&gt;payment clarification needed&lt;/source&gt;
            &lt;target&gt;payment issued&lt;/target&gt;
            &lt;event&gt;capture direct debit&lt;/event&gt;
        &lt;/transition&gt;

        &lt;transition&gt;
            &lt;source&gt;payment clarification needed&lt;/source&gt;
            &lt;target&gt;cancelled&lt;/target&gt;
            &lt;event&gt;cancel&lt;/event&gt;
        &lt;/transition&gt;

        &lt;transition&gt;
            &lt;source&gt;payment received&lt;/source&gt;
            &lt;target&gt;order shipped&lt;/target&gt;
            &lt;event&gt;ship order&lt;/event&gt;
        &lt;/transition&gt;

        &lt;transition&gt;
            &lt;source&gt;order shipped&lt;/source&gt;
            &lt;target&gt;ready for return&lt;/target&gt;
            &lt;event&gt;ready for return&lt;/event&gt;
        &lt;/transition&gt;

        &lt;transition&gt;
            &lt;source&gt;ready for return&lt;/source&gt;
            &lt;target&gt;completed&lt;/target&gt;
            &lt;event&gt;item not returned&lt;/event&gt;
        &lt;/transition&gt;

        &lt;transition&gt;
            &lt;source&gt;new&lt;/source&gt;
            &lt;target&gt;cancelled&lt;/target&gt;
            &lt;event&gt;cancel&lt;/event&gt;
        &lt;/transition&gt;

        &lt;transition&gt;
            &lt;source&gt;payment received&lt;/source&gt;
            &lt;target&gt;refunded&lt;/target&gt;
            &lt;event&gt;refund&lt;/event&gt;
        &lt;/transition&gt;

        &lt;transition&gt;
            &lt;source&gt;refunded&lt;/source&gt;
            &lt;target&gt;cancelled&lt;/target&gt;
            &lt;event&gt;cancel&lt;/event&gt;
        &lt;/transition&gt;

        &lt;transition&gt;
            &lt;source&gt;returned&lt;/source&gt;
            &lt;target&gt;refunded&lt;/target&gt;
            &lt;event&gt;refund&lt;/event&gt;
        &lt;/transition&gt;

        &lt;transition&gt;
            &lt;source&gt;ready for return&lt;/source&gt;
            &lt;target&gt;returned&lt;/target&gt;
            &lt;event&gt;return received&lt;/event&gt;
        &lt;/transition&gt;
    &lt;/transitions&gt;

    &lt;events&gt;
        &lt;event name="capture direct debit" manual="true" /&gt;
        &lt;event name="payment received" manual="true" /&gt;
        &lt;event name="ship order" manual="true" /&gt;
        &lt;event name="ready for return"  onEnter="true" /&gt;
        &lt;event name="item not returned" timeout="30days" /&gt;
        &lt;event name="cancel" manual="true" /&gt;
        &lt;event name="refund" manual="true" /&gt;
        &lt;event name="return received" manual="true" /&gt;
        &lt;event name="clarify payment" manual="true" /&gt;
    &lt;/events&gt;
   &lt;/process&gt;
&lt;/statemachine&gt;</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p xml:space="preserve">
Add this new state machine to the <var>OmsConfig</var>:
</p><pre xml:space="preserve"><code class="bash">&lt;?php

    const ORDER_PROCESS_DIRECTDEBIT = 'DirectDebit';

     /**
     * @return array
     */
    public function getActiveProcesses()
    {
        return [
            //..
            static::ORDER_PROCESS_DIRECTDEBIT,
        ];
    }</code></pre>
        <p xml:space="preserve">
Link the direct debit state machine to process the orders submitted with the payment method we’re implementing.

Add this configuration in the <var>SalesConfig </var>class:</p><pre xml:space="preserve"><code class="bash">   /**
     * @var array
     */
    protected static $stateMachineMapper = [
        //..
        PaymentMethodsConstants::PAYMENT_DIRECTDEBIT_FORM_PROPERTY_PATH =&gt; OmsConfig::ORDER_PROCESS_DIRECTDEBIT,
    ];</code></pre>
    </body>
</html>