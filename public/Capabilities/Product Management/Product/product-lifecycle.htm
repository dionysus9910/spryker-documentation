<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="" MadCap:conditions="Spryker.ShopSuite,Spryker.DemoShop,Spryker.B2C,Spryker.B2B">
    <head>
        <link href="../../../Resources/TableStyles/VerticalTable.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../../../Resources/TableStyles/PatternedRows2.css" rel="stylesheet" MadCap:stylesheetType="table" />
    </head>
    <body>
        <h1>Product Lifecycle <img src="../../../Resources/Images/shoptype/B2B_Shop.png" /> <img src="../../../Resources/Images/shoptype/B2C_Shop.png" /> <img src="../../../Resources/Images/shoptype/MasterSuite.png" /> <img src="../../../Resources/Images/shoptype/Demoshop.png" /></h1>
        <p>The touch tables are able create the snapshot of what’s currently loaded into the Yves data storages ( both key-value and search data storages)</p>
        <p>If a product was added into the Zed database after the last export, then there’s no corresponding entry in the touch table for that product. Once it’s exported, an entry is created. Each time the product is updated, an update is performed to that entry once the export task is running.</p>
        <p>Looking over the data inserted in the touch table we can say that every product has a lifecycle which is retrieved from the context. Possible statuses are:</p>
        <p>&#160;</p>
        <table class="TableStyle-PatternedRows2" style="mc-table-style: url('../../../Resources/TableStyles/PatternedRows2.css');" cellspacing="0">
            <col class="TableStyle-PatternedRows2-Column-Regular" />
            <col class="TableStyle-PatternedRows2-Column-Regular" />
            <thead>
                <tr class="TableStyle-PatternedRows2-Head-Header1">
                    <th class="TableStyle-PatternedRows2-HeadE-Regular-Header1">Status</th>
                    <th class="TableStyle-PatternedRows2-HeadD-Regular-Header1">Condition</th>
                </tr>
            </thead>
            <tbody>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">
                        <p>new</p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-LightRows">
                        <p>product does not exist in touch table</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows">
                        <p>onsale</p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-DarkerRows">
                        <p>	product is in touch table and ‘active=true’</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <td class="TableStyle-PatternedRows2-BodyB-Regular-LightRows">
                        <p>paused</p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyA-Regular-LightRows">
                        <p>product is in touch table and ‘active=false’</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2>Product Glossary</h2>
        <table class="TableStyle-VerticalTable" style="mc-table-style: url('../../../Resources/TableStyles/VerticalTable.css');" cellspacing="0">
            <col class="TableStyle-VerticalTable-Column-Column1" />
            <col class="TableStyle-VerticalTable-Column-Column2" />
            <tbody>
                <tr class="TableStyle-VerticalTable-Body-Body1">
                    <td class="TableStyle-VerticalTable-BodyE-Column1-Body1"><strong>Abstract Product</strong>
                    </td>
                    <td class="TableStyle-VerticalTable-BodyD-Column2-Body1">Represents all common characteristics of a single product offered as a number of variants</td>
                </tr>
                <tr class="TableStyle-VerticalTable-Body-Body2">
                    <td class="TableStyle-VerticalTable-BodyE-Column1-Body2"><strong>Concrete Products (Variants)</strong>
                    </td>
                    <td class="TableStyle-VerticalTable-BodyD-Column2-Body2">Represent only the characteristics that distinguish each variant</td>
                </tr>
                <tr class="TableStyle-VerticalTable-Body-Body1">
                    <td class="TableStyle-VerticalTable-BodyE-Column1-Body1"><strong>PIM</strong>
                    </td>
                    <td class="TableStyle-VerticalTable-BodyD-Column2-Body1">Product Information Management system</td>
                </tr>
                <tr class="TableStyle-VerticalTable-Body-Body2">
                    <td class="TableStyle-VerticalTable-BodyE-Column1-Body2"><strong>Product Attributes</strong>
                    </td>
                    <td class="TableStyle-VerticalTable-BodyD-Column2-Body2">Part of the Product Data that describes product characteristics</td>
                </tr>
                <tr class="TableStyle-VerticalTable-Body-Body1">
                    <td class="TableStyle-VerticalTable-BodyE-Column1-Body1"><strong>Product Categories</strong>
                    </td>
                    <td class="TableStyle-VerticalTable-BodyD-Column2-Body1">Categories group products with specific attribute sets</td>
                </tr>
                <tr class="TableStyle-VerticalTable-Body-Body2">
                    <td class="TableStyle-VerticalTable-BodyE-Column1-Body2"><strong>Product Characteristics</strong>
                    </td>
                    <td class="TableStyle-VerticalTable-BodyD-Column2-Body2">Properties of the product, such as color or size</td>
                </tr>
                <tr class="TableStyle-VerticalTable-Body-Body1">
                    <td class="TableStyle-VerticalTable-BodyB-Column1-Body1"><strong>Product Variants</strong>
                    </td>
                    <td class="TableStyle-VerticalTable-BodyA-Column2-Body1">Versions of the same product that differ one or more attributes, such as color and size</td>
                </tr>
            </tbody>
        </table>
        <h2>Product Key Map Collector</h2>
        <p>The <var>AttributeMapCollector</var> is responsible of exporting map of all possible super attribute permutations. This mapping information is required when displaying for example select component in Yves product detail page (can be any suitable UI component used), so with this map it’s possible to select correct combination.</p>
        <p>For example we have a product with two attributes, color and size.</p>
        <p>Product: Nike shoes with <var>idProductConcrete = 1</var> Attributes: <var>Color: red, Size:43, Size: 42</var>.</p>
        <p>For this product map will look like this.</p><pre><code class="language-PHP line-numbers">array(
  (
    [color:red] =&gt; array(
      [size:43] =&gt; array(
         [id] =&gt; 1
      ),

      [size:42] =&gt; array(
         [id] =&gt; 1
      )

    ),

    [size:43] =&gt; array(
      [color:red] =&gt; array(
         [id] =&gt; 1
      )
    ),
    [size:42] =&gt; array(
      [color:red] =&gt; array(
         [id] =&gt; 1
      )
    )
  )
)</code></pre>
        <p>The key <var>color:red</var> resembles to attribute key and value of attribute. Each leaf points to the concrete product (variant) id [<var>id] =&gt; 1</var>.</p>
        <p>The collector also has information about all available super attributes, and assigned concrete products ids. Only active products will be collected.</p>
        <h2>Events Triggered</h2>
        <p>There are a few events that are triggered by this module. You need to have the <a href="../../Development/Event/event.htm">Event</a> module installed to be able to listen to them.</p>
        <ul>
            <li class="bullet_list"><strong>Product.product_abstract.before.create</strong> - before abstract product persisted. <var>ProductAbstractTransfer</var> passed with data prepared for created new abstract product.</li>
            <li class="bullet_list"><strong>Product.product_abstract.before.update</strong> - before abstract product updated. <var>ProductAbstractTransfer</var> passed with data prepared for product update.</li>
            <li class="bullet_list"><strong>Product.product_concrete.before.creat</strong>e - before concrete product persisted. <var>ProductConcreteTransfer</var> passed with data prepared for created new concrete product.</li>
            <li class="bullet_list"><strong>Product.product_concrete.before.update</strong> - before concrete product updated. <var>ProductConcreteTransfer</var> passed with data prepared for product update.</li>
            <li class="bullet_list"><strong>Product.product_abstract.after.update</strong> - after abstract product updated. <var>ProductAbstractTransfer</var> passed.</li>
            <li class="bullet_list"><strong>Product.product_abstract.after.create</strong> - after abstract product created. <var>ProductAbstractTransfer</var> passed.</li>
            <li class="bullet_list"><strong>Product.product_concrete.after.create </strong>- after concrete product created. <var>ProductConcreteTransfer</var> passed.</li>
            <li class="bullet_list"><strong>Product.product_concrete.after.update</strong> - after concrete product updated. <var>ProductConcreteTransfer</var> passed.</li>
            <li class="bullet_list"><strong>Product.product_abstract.read</strong> - when abstract product read from persistence, could be used to populate <var>ProductAbstractTransfer</var> with additional data.</li>
            <li class="bullet_list"><strong>Product.product_concrete.read</strong> - when concrete product read from persistence, could be used to populate <var>ProductConcreteTransfer</var> with additional data.</li>
        </ul>
    </body>
</html>