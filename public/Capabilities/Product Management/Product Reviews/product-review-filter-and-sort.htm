<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="" MadCap:conditions="Spryker.B2C,Spryker.B2B">
    <head>
    </head>
    <body>
        <h1>Filter &amp; Sort by Average Rating - Product Reviews <img src="../../../Resources/Images/shoptype/B2B_Shop.png" /> <img src="../../../Resources/Images/shoptype/B2C_Shop.png" /></h1>
        <h2>Prerequisites</h2>
        <ol>
            <li>
                Configure your product collector query which provides the <var>product data</var> for your product page map and add the required <var>average rating</var> value.
            </li>
            <li>
                Amend product page map to make it possible to filter and sort by rating value. Normalize the rating value if it is necessary for your Search engine.
            </li>
        </ol>
        <p>If you open an abstract product in your Search engine, you will see the additional sort and facet information with the normalized rating.</p>
       
           Example of product review data in product abstract record in Elasticsearch:
           
           <pre><code class="json">
                 {
                    "_index": "de_search",
                    "_type": "page",
                    "_id": "de.de_de.resource.product_abstract.35",
                    "_score": 1,
                    "_source": {
                       "search-result-data": {
                          "rating": 4.67,
                          "review_count": 3
                       },
                       "integer-sort": {
                          "rating": 467
                       },
                       "integer-facet": [
                          {
                             "facet-name": "rating",
                             "facet-value": [
                                467
                             ]
                          }
                       ]
                    }
                 }
              </code></pre><h3>Adding Average Rating Sort Option</h3><p>Amend your <var>CatalogSearchConfigBuilder</var> and register the average rating sort.</p><MadCap:dropDown><MadCap:dropDownHead><MadCap:dropDownHotspot>Example: sort registration</MadCap:dropDownHotspot></MadCap:dropDownHead><MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php
    namespace Pyz\Client\Catalog\Plugin\Config;

    use Generated\Shared\Search\PageIndexMap;
    use Generated\Shared\Transfer\SortConfigTransfer;
    use Spryker\Client\Kernel\AbstractPlugin;
    use Spryker\Client\Search\Dependency\Plugin\SearchConfigBuilderInterface;
    use Spryker\Client\Search\Dependency\Plugin\SortConfigBuilderInterface;

    class CatalogSearchConfigBuilder extends AbstractPlugin implements SearchConfigBuilderInterface
    {

        const RATING_FACET_NAME = 'rating';

        /**
         * @param \Spryker\Client\Search\Dependency\Plugin\SortConfigBuilderInterface $sortConfigBuilder
         *
         * @return void
         */
        public function buildSortConfig(SortConfigBuilderInterface $sortConfigBuilder)
        {
            $this-&gt;addDescendingRatingSort($sortConfigBuilder);
            // ...
        }

        /**
         * @param \Spryker\Client\Search\Dependency\Plugin\SortConfigBuilderInterface $sortConfigBuilder
         *
         * @return $this
         */
        protected function addDescendingRatingSort(SortConfigBuilderInterface $sortConfigBuilder)
        {
            $descendingRatingSortConfig = (new SortConfigTransfer())
                -&gt;setName(static::RATING_FACET_NAME)
                -&gt;setParameterName(static::RATING_FACET_NAME)
                -&gt;setFieldName(PageIndexMap::INTEGER_SORT)
                -&gt;setIsDescending(true);

            $sortConfigBuilder-&gt;addSort($descendingRatingSortConfig);

            return $this;
        }

    }
                </code></pre></MadCap:dropDownBody></MadCap:dropDown><a href="#" name="configure-rating-range-filter"></a><h3>Adding Average Rating Range Filter</h3><p>Amend your <var>CatalogSearchConfigBuilder</var> and register the average rating range filter facet.</p><MadCap:dropDown><MadCap:dropDownHead><MadCap:dropDownHotspot>Example: range filter facet registration</MadCap:dropDownHotspot></MadCap:dropDownHead><MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php
    namespace Pyz\Client\Catalog\Plugin\Config;

    use Generated\Shared\Transfer\FacetConfigTransfer;
    use Spryker\Client\Kernel\AbstractPlugin;
    use Spryker\Client\Search\Dependency\Plugin\FacetConfigBuilderInterface;
    use Spryker\Client\Search\Dependency\Plugin\SearchConfigBuilderInterface;

    class CatalogSearchConfigBuilder extends AbstractPlugin implements SearchConfigBuilderInterface
    {
        const RATING_FACET_NAME = 'rating';

        /**
         * @param \Spryker\Client\Search\Dependency\Plugin\FacetConfigBuilderInterface $facetConfigBuilder
         *
         * @return void
         */
        public function buildFacetConfig(FacetConfigBuilderInterface $facetConfigBuilder)
        {
            $this-&gt;addProductRatingFacet($facetConfigBuilder);
            // ...
        }

        /**
         * @param \Spryker\Client\Search\Dependency\Plugin\FacetConfigBuilderInterface $facetConfigBuilder
         *
         * @return $this
         */
        protected function addProductRatingFacet(FacetConfigBuilderInterface $facetConfigBuilder)
        {
            $productRatingFacetTransfer = (new FacetConfigTransfer())
                -&gt;setName(static::RATING_FACET_NAME)
                -&gt;setParameterName(static::RATING_FACET_NAME)
                -&gt;setFieldName(PageIndexMap::INTEGER_FACET)
                -&gt;setType(SearchConfig::FACET_TYPE_RANGE);

            $facetConfigBuilder-&gt;addFacet($productRatingFacetTransfer);

            return $this;
        }

    }
                </code></pre></MadCap:dropDownBody></MadCap:dropDown><h3>Float Filtering With Search</h3><p>If your search engine supports only integer filtering, you will need to transform the filter value between display and usage.</p><MadCap:dropDown><MadCap:dropDownHead><MadCap:dropDownHotspot>Example: use-case</MadCap:dropDownHotspot></MadCap:dropDownHead><MadCap:dropDownBody><h4>Assumptions</h4><li>Your Search engine is only able to store integer values, such as <var>-1, 0, 1, 2, 3, [...]</var>.</li><li>Your current Product Reviews configuration allows to have float average ratings, such as <var>0.53, 2.41, 4.9, 5 [...]</var>.</li><li>Average rating is limited up to 2 decimals.</li><h4>Complication</h4><p>In this case, you need to temporarily transform the average rating to integer to fit the Search engine's requirements and you also want to keep the original float value so you can display it for the end-users.</p><h4>Solution</h4><p>You can solve this by multiplying/dividing your average rating with 10 to the power of the number of allowed decimals.</p><li>transform displayed value into stored value: <var>2.41 * 10^2 =&gt; 241</var>.</li><li>transform stored value into displayed value: <var>241 / 10^2 =&gt; 2.41</var>.</li></MadCap:dropDownBody></MadCap:dropDown><p>Create a <var>Transformer</var> that implements <var>FacetSearchResultValueTransformerPluginInterface</var> and define the transformation and its inverse.</p><p>Then register this transformer for the already configured rating range filter.</p><MadCap:dropDown><MadCap:dropDownHead><MadCap:dropDownHotspot>Example: average rating range filter value transformer</MadCap:dropDownHotspot></MadCap:dropDownHead><MadCap:dropDownBody><pre><code class="language-PHP line-numbers">
    namespace Pyz\Client\ProductReview\Plugin;

    use Spryker\Client\Search\Dependency\Plugin\FacetSearchResultValueTransformerPluginInterface;

    class ProductRatingValueTransformer implements FacetSearchResultValueTransformerPluginInterface
    {

        /**
         * @param array $rangeValues
         *
         * @return array
         */
        public function transformForDisplay($rangeValues)
        {
            if (isset($rangeValues['min'])) {
                $rangeValues['min'] = $this-&gt;normalizeRatingForDisplay($rangeValues['min']);
            }

            if (isset($rangeValues['max'])) {
                $rangeValues['max'] = $this-&gt;normalizeRatingForDisplay($rangeValues['max']);
            }

            return $rangeValues;
        }

        /**
         * @param array $rangeValues
         *
         * @return array
         */
        public function transformFromDisplay($rangeValues)
        {
            if (isset($rangeValues['min'])) {
                $rangeValues['min'] = $this-&gt;normalizeRatingForFilter($rangeValues['min']);
            }

            if (isset($rangeValues['max'])) {
                $rangeValues['max'] = $this-&gt;normalizeRatingForFilter($rangeValues['max']);
            }

            return $rangeValues;
        }

        /**
         * @param int $filteredRating
         *
         * @return int
         */
        protected function normalizeRatingForDisplay($filteredRating)
        {
            return (int)round($filteredRating / 100);
        }

        /**
         * @param int $displayedRating
         *
         * @return int
         */
        protected function normalizeRatingForFilter($displayedRating)
        {
            return $displayedRating * 100;
        }

    }

                </code></pre></MadCap:dropDownBody></MadCap:dropDown><MadCap:dropDown><MadCap:dropDownHead><MadCap:dropDownHotspot>Example: range filter value transfer registration</MadCap:dropDownHotspot></MadCap:dropDownHead><MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php
        /**
         * @param \Spryker\Client\Search\Dependency\Plugin\FacetConfigBuilderInterface $facetConfigBuilder
         *
         * @return $this
         */
        protected function addProductRatingFacet(FacetConfigBuilderInterface $facetConfigBuilder)
        {
            $productRatingFacetTransfer = (new FacetConfigTransfer())
                -&gt;setName(static::RATING_FACET_NAME)
                -&gt;setParameterName(static::RATING_FACET_NAME)
                -&gt;setFieldName(PageIndexMap::INTEGER_FACET)
                -&gt;setType(SearchConfig::FACET_TYPE_RANGE)
                -&gt;setValueTransformer(ProductRatingValueTransformer::class);

            $facetConfigBuilder-&gt;addFacet($productRatingFacetTransfer);

            return $this;
        }
                </code></pre></MadCap:dropDownBody></MadCap:dropDown><p>&#160;</p><p><![CDATA[
		]]><i>Last review date: Aug. 28, 2017 </i><MadCap:conditionalText MadCap:conditions="General.Hidden Comment"><i>by Karoly Gerner</i></MadCap:conditionalText><![CDATA[		]]></p></body>
</html>