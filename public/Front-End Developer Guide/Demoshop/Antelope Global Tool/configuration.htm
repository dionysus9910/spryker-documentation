<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="" MadCap:conditions="Spryker.DemoShop">
    <head>
    </head>
    <body>
        <h1>Configuration <img src="../../../Resources/shoptype/Demoshop.png" /></h1>
        <p class="important"><strong>Antelope Deprecation Notice:</strong>
            <br />As of 04/2017 Antelope will be replaced by Oryx. You can still use Antelope however, no new development is planned for this component.</p>
        <p>A configuration file is a set of properties and methods that define how to process assets.

</p>
        <p>Read more about <a href="build-optimization-antelope.htm">asset build and optimization</a> with antelope.

</p>
        <h2>Creating a Configuration File
</h2>
        <p>Configuration files can be placed anywhere inside <var>@project/assets</var> folder, but we strongly recommend to place them under the <var>@project/assets/Automation</var> folder.

</p>
        <p>Antelope automatically finds and loads configuration files.

</p>
        <p>When you create one, follow this naming convention:

</p><pre><code class="language-bash line-numbers">&lt;application&gt;[-&lt;theme&gt;].antelope.js
</code></pre>
        <ul>
            <li class="bullet_list"><var>&lt;application&gt; </var>(mandatory): tells Antelope which application to target;
</li>
            <li class="bullet_list"><var>&lt;theme&gt;</var> (mandatory, only for Yves): tells Antelope which theme to target;
</li>
            <li class="bullet_list"><var>.antelope</var> suffix: tells Antelope to load this file as a webpack configuration.
</li>
        </ul>
        <p><strong>Examples</strong>:

</p>
        <ul>
            <li class="bullet_list">Yves: <var>yves-demoshop.antelope.js</var> where yves is the target application and demoshop is the target theme;
</li>
            <li class="bullet_list">Zed: <var>zed.antelope.js</var> where zed is the target application.
</li>
        </ul>
        <p class="note"><strong>Zed configuration</strong><![CDATA[

]]><br />We strongly discourage to create a new Zed configuration: it will override the default one provided by the Gui module.
</p>
        <h2>Writing a Configuration File
</h2>
        <p>Antelope uses <var>webpack </var>syntax and specifications: the first thing to do before starting to write a configuration file is to learn how it works:

</p>
        <ul>
            <li class="bullet_list"><a href="http://webpack.github.io/docs/" target="_blank">webpack docs</a><![CDATA[
]]></li>
            <li><a href="http://webpack.github.io/docs/configuration.html#configuration-object-content" target="_blank">webpack configuration docs</a><![CDATA[
]]></li>
        </ul>
        <p>Antelope is simply a wrapper around webpack, therefore writing an Antelope configuration is identical to writing a webpack configuration.</p>
        <p>The code below is a simple Yves theme configuration that handles <var>js</var> with <var>jquery</var>, pure <var>css </var>styles and images:

</p><pre><code class="language-bash line-numbers">'use strict';

const path = require('path');
const cwd = process.cwd();
const webpack = antelope.remote('webpack');
const ExtractTextPlugin = antelope.remote('extract-text-webpack-plugin');

let config = {
    entry: antelope.entryPoints,
    resolve: {
        root: antelope.paths.root,
    },
    resolveLoader: {
        root: antelope.paths.loaders
    },
    output: {
        path: path.join(cwd, './public/Yves'),
        filename: '/assets/demoshop/js/[name].js'
    },
    module: {
        loaders: [{
            test: /\.css\??(\d*\w*=?\.?)+$/i,
            loader: ExtractTextPlugin.extract('style', 'css')
        }, {
            test: /\.(jpe?g|png|gif|svg)\??(\d*\w*=?\.?)+$/i,
            loader: 'file?name=/assets/demoshop/img/[name].[ext]',
        }]
    },
    plugins: [
        new ExtractTextPlugin('assets/demoshop/css/[name].css', {
            allChunks: true
        }),
        new webpack.ProvidePlugin({
            $: 'jquery',
            jQuery: 'jquery',
            'window.jQuery': 'jquery'
        })
    ],
    watchOptions: {
        aggregateTimeout: 300,
        poll: 1000
    },
    debug: antelope.options.debug,
    watch: antelope.options.watch
};

module.exports = config;
</code></pre>
        <h3>The Antelope context object
</h3>
        <p>As you may have noticed, previous configuration uses an object called <var>antelope</var>: it is a context helper. It provides methods and properties that can be useful to properly setup a ‘webpack’ configuration.

</p>
        <h3>The options object (<var>antelope.options</var>)
</h3>
        <p>It provides access to the <var>Antelope </var>command line arguments. The <strong>key </strong>is the argument, <strong>value </strong>is its actual value.

</p><pre><code class="language-bash line-numbers">let config = {
	plugins: [],
    debug: antelope.options.debug,
    watch: antelope.options.watch
};

if (antelope.options.production) {
    config.plugins.push(new webpack.optimize.UglifyJsPlugin());
}
</code></pre>
        <h3>The entryPoints object (<var>antelope.entryPoints</var>)
</h3>
        <p>Depending on the target application and - if available - the theme, this object provides a key/value object containing each entry point found in the project. The <strong>key </strong>is the entry point filename, <strong>value </strong>is the absolute path to it.

</p>
        <p>Read more about <a href="build-optimization-antelope.htm#Entry_points">entry points</a>.

</p><pre><code class="language-bash line-numbers">let config = {
    entry: antelope.entryPoints
};
</code></pre>
        <h3>The paths object (<var>antelope.paths</var>)
</h3>
        <p>The <var>antelope.paths</var> object provides arrays of paths.

</p>
        <p>et config = {
    resolve: {
        root: antelope.paths.root,
    },
    resolveLoader: {
        root: antelope.paths.loaders
    }
};
</p>
        <h4>Root array (<var>antelope.paths.root</var>)
</h4>
        <p>Addresses each folder that contains UI modules.

</p>
        <ul>
            <li class="bullet_list"><var>@project/assets</var><![CDATA[
]]></li>
            <li class="bullet_list"><var>@project/node_modules</var><![CDATA[
]]></li>
            <li class="bullet_list"><var>@core</var><![CDATA[
]]></li>
            <li class="bullet_list"><var>@core/&lt;module-name&gt;/assets/&lt;application&gt;/node_modules</var><![CDATA[
]]></li>
            <li class="bullet_list"><var>@antelope/node_modules</var><![CDATA[
]]></li>
        </ul>
        <h4>Loaders array (<var>antelope.paths.loaders</var>)
</h4>
        <p>Addresses each folder that contains <var>webpack </var>loaders.

</p>
        <ul>
            <li class="bullet_list">@project/node_modules
</li>
            <li class="bullet_list">@antelope/node_modules
</li>
        </ul>
        <h4>Remote function (<var>antelope.remote(id)</var>)
</h4>
        <p>Provides access to the <var>Antelope </var>modules. You can require and use them even if they’re not in your projects <var>package.json</var> file.

</p><pre><code class="language-bash line-numbers">const path = require('path');
const webpack = antelope.remote('webpack');
</code></pre>
        <p>Available modules:

</p>
        <ul>
            <li class="bullet_list"><var>webpack
</var>
            </li>
            <li class="bullet_list"><var>extract-text-webpack-plugin</var><![CDATA[
]]></li>
            <li class="bullet_list"><var>style-loader
</var>
            </li>
            <li class="bullet_list"><var>css-loader</var><![CDATA[
]]></li>
            <li class="bullet_list"><var>resolve-url-loader</var><![CDATA[
]]></li>
            <li class="bullet_list"><var>sass-loader</var><![CDATA[
]]></li>
            <li class="bullet_list"><var>file-loader</var><![CDATA[
]]></li>
            <li class="bullet_list"><var>url-loader</var><![CDATA[
]]></li>
            <li class="bullet_list"><var>organizer-loader</var><![CDATA[
]]></li>
        </ul>
        <p class="tip"><strong>Antelope remote provider

</strong>
            <br />Using <var>antelope.remote(id) </var>lets you access modules of Antelope global tool. If you need an updated/different version of these modules, you can add them as your project local dev dependencies and require them using default <var>require(id) </var>function. You can even combine local and provided modules together.
</p>
        <h2>Existing Configuration Files
</h2>
        <ul>
            <li class="bullet_list">What about an existing example?
</li>
            <li class="bullet_list">Where can I find Zed configuration?
</li>
        </ul>
        <p>On the project level, you can find a configuration file for each theme that’s available: <var>@project/assets/Automation/yves-*.antelope.js</var>.

</p>
        <p>Regarding Zed, the configuration file is placed inside the Gui module, under the <var>@core/Gui/assets/Automation/zed.antelope.js</var> folder.
</p>
        <p>
            <MadCap:relatedTopics style="mc-use-custom-sort-order: true;">
                <MadCap:relatedTopic src="overview.htm" />
                <MadCap:relatedTopic src="download-structure-antelope.htm" />
                <MadCap:relatedTopic src="configuration.htm" />
                <MadCap:relatedTopic src="development-antelope.htm" />
                <MadCap:relatedTopic src="cli.htm" />
                <MadCap:relatedTopic src="build-optimization-antelope.htm" />
                <MadCap:relatedTopic src="publishing.htm" />
                <MadCap:relatedTopic src="asset-management-overview.htm" />
            </MadCap:relatedTopics><![CDATA[
]]></p>
    </body>
</html>