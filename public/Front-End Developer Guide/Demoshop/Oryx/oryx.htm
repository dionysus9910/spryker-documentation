<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="" MadCap:conditions="Spryker.DemoShop">
    <head>
    </head>
    <body>
        <h1>Oryx <img src="../../../Resources/shoptype/Demoshop.png" /></h1>
        <p class="important"> As of April 2017, Oryx replaces <a href="../Antelope Global Tool/overview.htm" target="_blank">Antelope</a></p>
        <h2>Introduction
</h2>
        <p>Oryx is the Spryker projects frontend helper. The purpose of Oryx is to simplify the asset building process, giving developers the freedom to choose and configure the preprocessors for the frontend.

</p>
        <p>Oryx relies on webpack 2.

</p>
        <p class="note"><strong>Oryx for ZED</strong>
            <br />If you're looking for Oryx ZED dedicated solution, see <a href="oryx-for-zed.htm" target="_blank">oryx-for-zed</a>.
</p>
        <h3>Requirements
</h3>
        <p>Before installing Oryx, make sure that you have the following:

</p>
        <ul>
            <li class="bullet_list">nodejs version 6.x LTS
</li>
            <li class="bullet_list">npm version &gt;= 3.x or yarn version &gt;= 0.19.x
</li>
        </ul>
        <h3>Setup
</h3>
        <p>To install and setup Oryx, you need to add it to your project’s root folder <var>package.json</var>.

</p>
        <p><strong>To add Oryx to your </strong><var>package.json</var>:

</p>
        <p>Open the terminal, go to your project root folder and type:
</p><pre><code class="language-bash line-numbers">npm install @spryker/oryx --save-dev
# or 
yarn add @spryker/oryx --dev
</code></pre>
        <p class="note">Oryx comes with a peer dependency - webpack version &gt;= 2.x (needed when you build assets using Oryx api)
</p>
        <h2>Usage
</h2>
        <p>Once installed, Oryx can be used to enrich your webpack configuration and to programmatically execute webpack (with a formatted terminal output).

</p>
        <p>The following example shows a basic Oryx integration with <var>webpack</var>.

</p>
        <h3>webpack.config.js
</h3>
        <p>Use Oryx to find Spryker Yves core entry points and add them to your configuration. The following <var>entrySettings</var> constant defines where to search for them (<var>dirs</var>), which patterns to adopt to spot them (<var>patterns</var>), the description to log in the terminal (<var>description</var>) and how to name the entry points (<var>defineName(path)</var>).
</p>
        <p>
To configure Oryx to look for your own entry points, change the settings accordingly or add them directly as you always do with webpack (see example below).

</p><pre><code class="language-bash line-numbers">const oryx = require('@spryker/oryx');

const entrySettings = {
    dirs: [path.resolve('vendor/spryker')],
    patterns: ['**/Yves/**/*.entry.js'],
    description: 'looking for entry points...',
    defineName: fullPath =&gt; path.basename(fullPath, '.entry.js')
}

const webpackConfiguration = {
    // ...
    entry: oryx.find(entrySettings, {
        // your project entry points go here
        'app': './path/to/app',
        'commons': './path/to/commons'
    }),
    // ...
}

module.exports = webpackConfiguration;
</code></pre>
        <h3>build.js
</h3>
        <p>This file contains the programmatic call to <var>webpack </var>using the <var>oryx.build()</var> function. Oryx will take care of printing a minimal log in the terminal console.

</p>
        <p>const oryx = require('oryx');
const configuration = require('./webpack.config.js');

oryx.build(configuration);
</p>
        <h3>package.json
</h3>
        <p>Add a script into your <var>package.json</var> pointing to <var>build.js</var>.

</p><pre><code class="language-bash line-numbers">{
    "scripts": {
        "yves": "node ./path/to/yves/frontend/build"
    }
}
</code></pre>
        <p>You can now run your script directly from the terminal console.

</p><pre><code class="language-bash line-numbers">npm run yves
# or 
yarn run yves
</code></pre>
        <h2>API
</h2>
        <h3><a name="find"></a>find()
</h3><pre><code class="language-bash line-numbers">oryx.find(settings, [initial])
</code></pre>
        <p>Performs a glob search into provided directories, using provided patterns and returns all the matching paths as an object {name-path} or as an array (path array).

</p>
        <ul>
            <li class="bullet_list"><var>settings {object}</var>:
<ul><li class="bullet_list"><var>dirs {array[string]}</var>: directories in which to search
</li><li class="bullet_list"><var>patterns {array[string]}</var>: glob patterns to apply to the search
</li><li class="bullet_list"><var>glob {object} [optional]</var>: glob system configuration (for the available options, click here)
</li><li class="bullet_list"><var>description {string} [optional]</var>: text to log in terminal
</li><li class="bullet_list"><var>defineName(path) {function} [optional]</var>: define the name in returned {name-path} object
</li></ul></li>
            <li class="bullet_list"><var>initial {object|array}:</var> initial value
</li>
        </ul>
        <p>If <var>initial </var>is an object (or <var>undefined</var>, <var>null</var>) the <var>find </var>will return an extended {name-path} object:

</p>
        <ul>
            <li class="bullet_list">name: filename (or <var>defineName(path)</var> returned value)
</li>
            <li class="bullet_list">path: matching absolute path
</li>
        </ul>
        <p>If <var>initial </var>is an array, the <var>find </var>function will return an extended array of matching absolute paths. In this case, <var>defineName(path)</var> function won’t be called.

</p>
        <p><strong>Example</strong>: Yves entry default configuration

</p><pre><code class="language-bash line-numbers">const entrySettings = {
    dirs: [path.resolve('vendor/spryker')],
    patterns: ['**/Yves/**/*.entry.js'],
    glob: {},
    description: 'looking for entry points...',
    defineName: fullPath =&gt; path.basename(fullPath, '.entry.js')
}
</code></pre>
        <h3>build()
</h3><pre><code class="language-bash line-numbers">oryx.build(configuration, [callback])
</code></pre>
        <p>Build the assets using <var>webpack </var>and print a formatted terminal output. This functon is just a wrapper for <var>webpack(configuration, callback)</var>:

</p>
        <ul>
            <li class="bullet_list"><var>configuration {object}</var>: webpack configuration file
</li>
            <li class="bullet_list"><var>callback(error, stats) {function} [optional]</var>: function called once webpack build task is completed
</li>
        </ul><pre><code class="language-bash line-numbers">oryx.build(configuration, (error, stats) =&gt; {
    // add youre code here
});
</code></pre>
        <p class="note">For more control over the process feel free to use the webpack one.
</p>
        <h3>build.loadCompiler()
</h3><pre><code class="language-bash line-numbers">oryx.build.loadCompiler(webpack, webpackVersion)
</code></pre>
        <p>Load the compiler instance used for build.

</p>
        <ul>
            <li class="bullet_list"><var>webpack {object}</var>: webpack instance object
</li>
            <li class="bullet_list"><var>webpackVersion {string}</var>: webpack instance object version number
</li>
        </ul>
        <p class="note">It is useful to load the compiler when oryx is a dependecy in a module where it's mandatory to execute the build API using the webpack version specified in that module's <var>package.json.</var><![CDATA[
]]></p><pre><code class="language-bash line-numbers">const oryx = require('@spryker/oryx');
const webpack = require('webpack');
const webpackVersion = require('webpack/package').version;

oryx.build.loadCompiler(webpack, webpackVersion);
</code></pre>
        <h3>log functions
</h3>
        <ul>
            <li class="bullet_list"><var>log.info()</var>: print an info message
</li>
            <li class="bullet_list"><var>log.task()</var>: print a task message
</li>
            <li class="bullet_list"><var>log.step()</var>: print a step message
</li>
            <li class="bullet_list"><var>log.done()</var>: print a done message
</li>
            <li class="bullet_list"><var>log.error()</var>: print an error message
</li>
            <li class="bullet_list"><var>log.debug()</var>: print a debug message
</li>
        </ul>
        <p>To print debug messages, set <var>process.env.DEBUG</var> variable to <var>true</var>. Assuming you have a <var>yves </var>script in your <var>package.json</var>, you can type in terminal:

</p><pre><code class="language-bash line-numbers">DEBUG=true npm run yves
# or
DEBUG=true yarn run yves
</code></pre>
        <p>&#160;</p>
    </body>
</html>