<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="">
    <head>
    </head>
    <body>
        <h1>Definition of API</h1>
        <p MadCap:conditions="General.Hidden Comment">Used to be:&#160;http://spryker.github.io/release/definition-of-api/</p>
        <p>According to <a href="http://semver.org/" target="_blank">Semantic Versioning</a> the <MadCap:variable name="General.ProductName" /> core team releases a major version “when there are incompatible API changes”. To make a sound decision about the type of the version, we need to define our internal APIs.
</p>
        <p>
In <MadCap:variable name="General.ProductName" />’s core, all public methods in theses locatable classes are considered as API:

</p>
        <ul>
            <li class="bullet_list"><a href="../Zed/Business Layer/Facade/facade.htm">Facades
</a>
            </li>
            <li class="bullet_list"><a href="../Yves/client.htm">Clients
</a>
            </li>
            <li class="bullet_list"><a href="../Zed/Persistence Layer/query_container.htm">Query Containers
</a>
            </li>
            <li class="bullet_list"><a href="../Resources and Developer Tools/service.htm">Services</a><![CDATA[
]]></li>
        </ul>
        <p>And the interfaces which are implemented everywhere are also part of the API:

</p>
        <ul>
            <li class="bullet_list">Plugin interfaces</li>
            <li class="bullet_list">Plugins</li>
        </ul>
        <p>
In addition to these obvious cases, there are some other classes which are part of the API and can cause a BC break:

</p>
        <ul>
            <li class="bullet_list">
                <MadCap:xref href="../Resources and Developer Tools/configuration-management.htm#Bundleconfig">Module config</MadCap:xref><![CDATA[
]]></li>
            <li class="bullet_list"><a href="../Zed/controllers-actions.htm">Controllers
</a>
            </li>
            <li class="bullet_list">Twig functions<![CDATA[
]]></li>
            <li class="bullet_list"><a href="../Resources and Developer Tools/console-commands.htm">CLI commands</a><![CDATA[
]]></li>
            <li class="bullet_list">Public constants especially in <MadCap:xref href="../Resources and Developer Tools/configuration-management.htm#Constantinterfaces" target="_blank">Constant Classes
</MadCap:xref><![CDATA[
]]></li>
        </ul>
        <p>And every change in a schema can cause a BC break:

</p>
        <ul>
            <li class="bullet_list"><a href="../Zed/Persistence Layer/database_schema_definition.htm">Database</a>
            </li>
            <li class="bullet_list"><![CDATA[
]]>Search</li>
            <li class="bullet_list"><![CDATA[
]]><a href="../Yves/redis-as-kv.htm">Storage
</a></li>
            <li class="bullet_list">Changes in <a href="../Resources and Developer Tools/transfer-objects.htm">transfer objects</a> can also cause BC breaks e.g. when an existing field is renamed.
</li>
        </ul>
        <p>There are several other ways to cause a BC break:

</p>
        <ul>
            <li class="bullet_list">A new major version of an open source component which is embedded in <MadCap:variable name="General.ProductName" />.</li>
            <li class="bullet_list">
A new glossary key (because there is no translation in the project).</li>
            <li class="bullet_list">
The whole software design is part of the API. These modules are marked as Engine. E.g. it would be a global BC break if we would enforce another structure of Twig templates for all modules or require another directory structure for modules or change a method in the abstract controller.
</li>
        </ul>
        <p>Not part of the API are all module-internal classes which are instantiated by factories. Although they have public methods, they are not intended to be used from project code.

</p>
        <h2>BC Breaking Changes</h2>
        <p>
As described above, there are several classes and files which are part of the API. But not every change there would cause a BC break. In general we can say: there is a BC break whenever an existing contract is changed. A contract is what the user of the API expects. This includes the signature of methods but also the expected behavior. For this reason we added an ApiDoc to the most used APIs like facades and plugin interfaces.

</p>
        <p>In any case, <MadCap:variable name="General.ProductName" />'s core team wants to avoid BC breaking changes and to reduce the effort which are needed in project to use a new version of a module. There are several ways to add functionality to APIs without a BC break. So it is possible to add new methods and even parameters to existing methods as long as they are optional.</p>
    </body>
</html>