<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title>Data Importers | Spryker</title>
        <meta name="description" content="The article will walk you through use cases and the process of implementing the data importers in your project." />
    </head>
    <body>
        <h1>Data Importers Overview and Implementation</h1>
        <ul class="disk">Currently, there are the following importers in Spryker Commerce OS:

		<li>Product Alternative Importer <b>(Beta)</b> - <b>B2B/B2C</b></li><li>Product Discounted Importer <b>(Beta)</b>  - <b>B2B/B2C</b></li><li>Product Packaging Unit Importer <b>(Beta)</b>  - <b>B2B/B2C</b></li><li>Company Importer <b>(Beta)</b>  - <b>B2B/B2C</b></li><li>Company Business Unit Importer <b>(Beta)</b>  - <b>B2B/B2C</b></li><li>Company Unit Address Importer <b>(Beta)</b>  - <b>B2B/B2C</b></li><li>Company Unit Address Label Importer <b>(Beta)</b>  - <b>B2B/B2C</b></li><li>Company User on Behalf Importer <b>(Beta)</b>  - <b>B2B/B2C</b></li><li>Multi-Cart Importer <b>(Beta)</b>  - <b>B2B/B2C</b></li><li>Shared Cart Importer <b>(Beta)</b>  - <b>B2B/B2C</b></li><li>Shopping List Importer <b>(Beta)</b>  - <b>B2B/B2C</b></li><li>Shopping List Company Business Unit Importer <b>(Beta)</b>  - <b>B2B/B2C</b></li><li>Shopping List Company User Importer <b>(Beta)</b>  - <b>B2B/B2C</b></li><li>Shopping List Item Importer <b>(Beta)</b> - - <b>B2B/B2C</b></li><li>Product Abstract Importer  - <b>B2B/B2C</b></li><li>Product Abstract Store Importer  - <b>B2B/B2C</b></li><li>Product Concrete Importer  - <b>B2B/B2C</b></li><li>Product Price Importer  - <b>B2B/B2C</b></li><li>Product Image Importer  - <b>B2B/B2C</b></li><li>Product Stock Importer  - <b>B2B/B2C</b></li><li>Product Review Importer  - <b>B2B/B2C</b></li><li>Product Relation Importer  - <b>B2B/B2C</b></li><li>Product Attribute Key Importer  - <b>B2B/B2C</b></li><li>Product Group Importer  - <b>B2B/B2C</b></li><li>Product Label Importer  - <b>B2B/B2C</b></li><li>Product Management Attribute Importer  - <b>B2B/B2C</b></li><li>Product Option Importer  - <b>B2B/B2C</b></li><li>Product Option Price Importer  - <b>B2B/B2C</b></li><li>Product Relation Importer  - <b>B2B/B2C</b></li><li>Product Search Attribute Importer  - <b>B2B/B2C</b></li><li>Product Search Attribute Map Importer  - <b>B2B/B2C</b></li><li>Product Set Importer  - <b>B2B/B2C</b></li><li>Category Template Importer  - <b>B2B/B2C</b></li><li>CMS Block Importer  - <b>B2B/B2C</b></li><li>CMS Block Category Importer  - <b>B2B/B2C</b></li><li>CMS Block Category Position Importer  - <b>B2B/B2C</b></li><li>CMS Block Store Importer  - <b>B2B/B2C</b></li><li>CMS Page Importer  - <b>B2B/B2C</b></li><li>CMS Template Importer  - <b>B2B/B2C</b></li><li>Company Unit Address Label Relation Importer  - <b>B2B/B2C</b></li><li>Currency Importer  - <b>B2B/B2C</b></li><li>Customer Importer  - <b>B2B/B2C</b></li><li>Discount Importer  - <b>B2B/B2C</b></li><li>Discount Amount Importer  - <b>B2B/B2C</b></li><li>Discount Store Importer  - <b>B2B/B2C</b></li><li>Discount Voucher Importer  - <b>B2B/B2C</b></li><li>Glossary Importer  - <b>B2B/B2C</b></li><li>Navigation Importer  - <b>B2B/B2C</b></li><li>Navigation Node Importer  - <b>B2B/B2C</b></li><li>Order Source Importer  - <b>B2B/B2C</b></li><li>Shipment Importer  - <b>B2B/B2C</b></li><li>Shipment Price Importer  - <b>B2B/B2C</b></li><li>Stock Importer  - <b>B2B/B2C</b></li><li>Tax Importer  - <b>B2B/B2C</b></li></ul>
        <p>
			Each of the importers can be executed one by one with the separate command (for example, <var>./vendor/bin/console data:import:product-abstract</var>) or with one command for all of them (for example, <var>./vendor/bin/console data:import</var>).
		</p>
        <p>
			Be advised that some of the importers are related to the data that is imported by another one. For example, <i>Product Concrete Importer</i> will not work if there are no abstract products in a database because a particular product cannot exist without abstract. The same goes to all data with relations.
		</p>
        <h2>Implementation overview</h2>
        <p>
			Currently, we have two approaches for data importers. Most of them are project-based, but there are a few module-based importers. The main difference is the way the importer should be enabled.
		</p>
        <p><b>Modular Data Importers (coming from vendor):</b>
        </p>
        <ul class="disk">
            <li>Product Alternative Importer <b>(Beta)</b></li>
            <li>Product Discounted Importer <b>(Beta)</b></li>
            <li>Product Packaging Unit Importer <b>(Beta)</b></li>
            <li>Company Importer <b>(Beta)</b></li>
            <li>Company Business Unit Importer <b>(Beta)</b></li>
            <li>Company Unit Address Importer <b>(Beta)</b></li>
            <li>Company Unit Address Label Importer <b>(Beta)</b></li>
            <li>Company User on Behalf Importer <b>(Beta)</b></li>
            <li>Multi-Cart Importer <b>(Beta)</b></li>
            <li>Shared Cart Importer <b>(Beta)</b></li>
            <li>Shopping List Importer <b>(Beta)</b></li>
            <li>Shopping List Company Business Unit Importer <b>(Beta)</b></li>
            <li>Shopping List Company User Importer <b>(Beta)</b></li>
            <li>Shopping List Item Importer <b>(Beta)</b></li>
        </ul>
        <p>
			In order to use a module-based importer, add it to the plugin stack. See the example below.
		</p><pre><code class="language-PHP line-numbers">
		&lt;?php
	
			namespace Pyz\Zed\DataImport;
			
			...
			
			class DataImportDependencyProvider extends SprykerDataImportDependencyProvider
			{
				/**
				* @return array
				*/
				protected function getDataImporterPlugins(): array
				{
					return [
						...
						new CompanyDataImportPlugin(),
						...
					];
				}
			}
		</code></pre>
        <p>
			All those plugins should implement <var>Spryker\Zed\DataImport\Dependency\Plugin\DataImportPluginInterface</var>.
		</p>
        <p>
			By default, CSV files with data are stored under the module directory in a data folder. It's possible to place them at the project level by extending the Config class for the import module at the project level. See the example below:<![CDATA[		]]></p><pre><code class="language-PHP line-numbers">
		&lt;?php
		
		namespace Pyz\Zed\CompanyDataImport;
		...
		
		class CompanyDataImportConfig extends SprykerCompanyDataImportConfig
		{
			/**
			* You can re-implement the whole method if you need some custom location
			*/
			public function getCompanyDataImporterConfiguration(): DataImporterConfigurationTransfer
			{
				$moduleDataImportDirectory = $this-&gt;getModuleRoot() . 'data' . DIRECTORY_SEPARATOR . 'import' . DIRECTORY_SEPARATOR;
		
				return $this-&gt;buildImporterConfiguration($moduleDataImportDirectory . 'company.csv', static::IMPORT_TYPE_COMPANY);
			}
		
			/**
			* Or you can re-implement this method in order to change base folder
			*/
			protected function getModuleRoot(): string
			{
				$moduleRoot = realpath(
					__DIR__
					. DIRECTORY_SEPARATOR . '..'
					. DIRECTORY_SEPARATOR . '..'
					. DIRECTORY_SEPARATOR . '..'
					. DIRECTORY_SEPARATOR . '..'
				);
		
				return $moduleRoot . DIRECTORY_SEPARATOR;
			}
		}
		</code></pre>
        <p>
			These actions should be enough to prepare a module-based importer to use.
		</p>
        <p><b style="font-size: 12pt;">Project level importers:</b>
        </p>
        <ul class="disk">
            <li>Product Abstract Importer</li>
            <li>Product Abstract Store Importer</li>
            <li>Product Concrete Importer</li>
            <li>Product Price Importer</li>
            <li>Product Image Importer</li>
            <li>Product Stock Importer</li>
            <li>Product Review Importer</li>
            <li>Product Relation Importer</li>
            <li>Product Attribute Key Importer</li>
            <li>Product Group Importer</li>
            <li>Product Label Importer</li>
            <li>Product Management Attribute Importer</li>
            <li>Product Option Importer</li>
            <li>Product Option Price Importer</li>
            <li>Product Relation Importer</li>
            <li>Product Search Attribute Importer</li>
            <li>Product Search Attribute Map Importer</li>
            <li>Product Set Importer</li>
            <li>Category Template Importer</li>
            <li>CMS Block Importer</li>
            <li>CMS Block Category Importer</li>
            <li>CMS Block Category Position Importer</li>
            <li>CMS Block Store Importer</li>
            <li>CMS Page Importer</li>
            <li>CMS Template Importer</li>
            <li>Company Unit Address Label Relation Importer</li>
            <li>Currency Importer</li>
            <li>Customer Importer</li>
            <li>Discount Importer</li>
            <li>Discount Amount Importer</li>
            <li>Discount Store Importer</li>
            <li>Discount Voucher Importer</li>
            <li>Glossary Importer</li>
            <li>Navigation Importer</li>
            <li>Navigation Node Importer</li>
            <li>Order Source Importer</li>
            <li>Shipment Importer</li>
            <li>Shipment Price Importer</li>
            <li>Stock Importer</li>
            <li>Tax Importer</li>
        </ul>
        <p>
			Project level importers work a little bit different. You can still use a module-based approach if you add a new data importer to the project level. Please note that it is possible to append it directly to the DataImport module at the project level.
		</p>
        <p>
			Add a new method to the <var>Pyz\Zed\DataImport\Business\DataImportBusinessFactory</var> class that should return the following <var>\Spryker\Zed\DataImport\Business\Model\DataImporterInterface</var>. Here you need to set data import configuration and required steps that will prepare data. Use the example below to do that.
		</p><pre><code class="language-PHP line-numbers">
		&lt;?php
 
		namespace Pyz\Zed\DataImport\Business;
		...
		
		class DataImportBusinessFactory extends SprykerDataImportBusinessFactory
		{
		
			/**
			* @return \Spryker\Zed\DataImport\Business\Model\DataImporterInterface
			*/
			protected function createOrderSourceImporter()
			{
				//Add importer config
				$dataImporter = $this-&gt;getCsvDataImporterFromConfig($this-&gt;getConfig()-&gt;getOrderSourceDataImporterConfiguration());
		
				$dataSetStepBroker = $this-&gt;createTransactionAwareDataSetStepBroker();
				//Add step
				$dataSetStepBroker-&gt;addStep(new OrderSourceWriterStep());
		
				$dataImporter-&gt;addDataSetStepBroker($dataSetStepBroker);
		
				return $dataImporter;
			}
		}
		</code></pre>
        <p>
			Then you should call this method using the <var>DataImportBusinessFactory::getImporter()</var> method.
		</p><pre><code class="language-PHP line-numbers">
		&lt;?php
		
		namespace Pyz\Zed\DataImport\Business;
		...
		
		class DataImportBusinessFactory extends SprykerDataImportBusinessFactory
		{
		
			public function getImporter()
			{
				$dataImporterCollection = $this-&gt;createDataImporterCollection();
				$dataImporterCollection
					...
					//Add importer
					-&gt;addDataImporter($this-&gt;createOrderSourceImporter());
		
				//Add module based importers
				$dataImporterCollection-&gt;addDataImporterPlugins($this-&gt;getDataImporterPlugins());
		
				return $dataImporterCollection;
			}
		}
		</code></pre>
        <p>
			Also, there are bulk importers that can be used if you have a huge amount of data to import, and existing importers may be slow.
		</p>
        <p>
			Bulk importers were implemented only at the project level and they are currently compatible only with a PostgreSQL database.
		</p>
        <p>
			There are the following bulk importers:
		</p>
        <ul class="disk">
            <li>Product Abstract Importer</li>
            <li>Product Abstract Store Importer</li>
            <li>Product Concrete Importer</li>
            <li>Product Price Importer</li>
            <li>Product Image Importer</li>
            <li>Product Stock Importer</li>
        </ul>
        <p>
			You can enable a bulk importer in <var>Pyz\Zed\DataImport\Business\DataImportBusinessFactory</var>:
		</p><pre><code class="language-PHP line-numbers">
		&lt;?php
		
		namespace Pyz\Zed\DataImport\Business;

		...
		
		class DataImportBusinessFactory extends SprykerDataImportBusinessFactory
		{
			...
		
			/**
			* This is an example of how bulk importer plugins should be enabled. Same goes for similar importers.
			* @return \Spryker\Zed\DataImportExtension\Dependency\Plugin\DataSetWriterPluginInterface[]
			*/
			protected function createProductAbstractWriterPlugins()
			{
				return [
					//use \Pyz\Zed\DataImport\Communication\Plugin\ProductAbstract\ProductAbstractBulkPdoWriterPlugin for bulk import
					new ProductAbstractPropelWriterPlugin(),
				];
			}
		
			...
		}
		</code></pre>
        <p>&#160;</p>
        <p><i>Last review date: Dec 18, 2018 </i>
            <MadCap:conditionalText MadCap:conditions="General.Hidden Comment"><i>by Serhii Chepela, Yuliia Boiko</i>
            </MadCap:conditionalText>
        </p>
    </body>
</html>