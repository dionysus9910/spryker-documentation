<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title>Dataimporter Speed Optimization | Spryker</title>
        <meta name="description" content="Importing big amount of data into a system can pose a real problem. When not optimized, the importing process will most likely be slow." />
    </head>
    <body>
        <h1>Dataimporter Speed Optimization</h1>
        <p>Importing big amount of data into a system can pose a real problem, as, when not optimized, the importing process will most likely be slow and might even affect the overall performance. One of the solutions to help optimizing and speeding up the data import for projects is enabling the use of different types of data writers: Propel or PDO. In case of big data import though, Propel has a negative impact of performance, therefore using it is for big amount of data is not recommended. For such cases, PDO writers would be a better option, as they enable a faster import of data in bulk.</p>
        <p>As part of the new PDO data import type implementation, we have also removed duplicate events during import, optimized memory consumption by better queue worker management as well as improved event setting adjustment.</p>
        <h2>Data Importers Overview</h2>
        <p>To import data, currently Propel importer is used by default. However, importing big amount of data with Propel is not the best solution, as Propel importer adds data to database one by one. For example, in case when you have many products and related data (images, prices, etc.) importing them using Propel importer will take lots of time, since this data would need to be written to Redis and Elasticsearch in turns, one after the other.</p>
        <p>To import big amount of data, it makes sense to use another type of data importers: PDO writers, as they separate data hydration and writing data. Currently, the following entities support import with PDO:</p>
        <ul>
            <li>ProductPrice</li>
            <li>ProductAbstract</li>
            <li>ProductConcrete</li>
            <li>ProductAbstractStore</li>
            <li>ProductImage</li>
            <li>ProductStock</li>
        </ul>
        <p>This means that now you can import product prices, abstract product, concrete products, abstract product stores, product images and product stocks in bulk. <MadCap:conditionalText MadCap:conditions="General.Hidden Comment">See (DATAIMPORTERS INTEGRATION GUIDE, TBD) to learn how to enable bulk import with PDO for them.</MadCap:conditionalText></p>
        <p>Each PDO data importer reads data one by one as a dataset. For the time being, only CSV format is supported. Data importers use steps to prepare data for writing to database and separate the objects hydration and the persistence layer. The importers can choose one or many plugins for writing the hydrated objects to any resources and the writers choose a plugin to trigger the events for exporting data to Yves.</p>
        <p>
            <img src="../Resources/Images/Dataimporter Speed Optimization/modules.png" />
        </p>
        <p>You can use either Propler or PDO importers (MysqlPDO is not supported, you can choose Properl plugins), and it should be kept in mind that Storage and Search modules need to use same Propel/PDO for persistence.</p>
        <p>&#160;</p>
        <p><i>Last review date: November 7th, 2018</i>
            <MadCap:conditionalText MadCap:conditions="General.Hidden Comment">by Helen Kravchenko</MadCap:conditionalText>
        </p>
        <p>&#160;</p>
    </body>
</html>