<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="">
    <head><title>Transfer Objects</title>
    </head>
    <body>
        <h1><a name="top"></a>Transfer Objects</h1>
        <p MadCap:conditions="General.Hidden Comment">Used to be: http://spryker.github.io/development-guide/reference/transfer-objects/</p>
        <p class="info">Transfer objects are simple data containers. Their purpose is to retrieve a standardized way to access data and to get more expressive method signatures. They are available everywhere in the system.</p>
        <h2><a name="How"></a>How to Use Transfer Objects</h2>
        <h3>Simple usage</h3>
        <p>The example shows a typical use case for a transfer object. The customer object is created and the setter are used to set email, first and last name.</p><pre><code class="language-PHP line-numbers">&lt;?php
$customerTransfer = new CustomerTransfer();
$customerTransfer
    -&gt;setEmail('john.doe@spryker.com')
    -&gt;setFirstName('John')
    -&gt;setLastName('Doe');

echo $customerTransfer-&gt;getFirstName(); // echos 'John'</code></pre>
        <h3>Object Nesting</h3>
        <p>Transfer objects can be nested. For instance a cart object contains several items like this:</p><pre><code class="language-PHP line-numbers">&lt;?php
// first cart item
$cartItem1 = new ItemTransfer();
$cartItem1-&gt;setSku('123abc')-&gt;setQuantity(1);

// second cart item
$cartItem2 = new ItemTransfer();
$cartItem2-&gt;setSku('888abc')-&gt;setQuantity(1);

// a cart with two items
$cartTransfer = new CartTransfer();
$cartTransfer-&gt;addItem($cartItem1)-&gt;addItem($cartItem2);

// returns ItemTransfer[] as ArrayObject
$items = $cartTransfer-&gt;getItems();</code></pre>
        <h3>Check the Required Fields</h3>
        <p>In general a transfer object must not know which fields are required, because it can be used for different use cases. But when you use a transfer object, you always expect the existence of specific parameters. This can be checked with a special require-method for each property:</p><pre><code class="language-PHP line-numbers">&lt;?php
// This throws a RequiredTransferPropertyException if the first name is not set:
$customerTransfer-&gt;requireFirstName()-&gt;getFirstName();</code></pre>
        <h3>Property Constants</h3>
        <p>The transfer object exposes all properties as constants which can be used in forms and tables.</p><pre><code class="language-PHP line-numbers">&lt;?php
ItemTransfer::SKU; // = 'sku'
CustomerTransfer::FIRST_NAME; // = 'firstName'</code></pre>
        <h3>How to Create Transfer Objects</h3>
        <p>Transfer objects are defined and XML. The concrete classes are generated by a internal script.</p>
        <h4>XML Definition</h4>
        <p>Transfer objects are defined in XML. The following example describes a Customer with email, first name, last name and a <code>“isGuest”</code> flag:</p><pre><code class="language-PHP line-numbers">&lt;?xml version="1.0"?&gt;
&lt;transfers xmlns="spryker:transfer-01"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="spryker:transfer-01 http://static.spryker.com/transfer-01.xsd"&gt;

    &lt;transfer name="Customer"&gt;
        &lt;property name="email" type="string"/&gt;
        &lt;property name="firstName" type="string"/&gt;
        &lt;property name="lastName" type="string"/&gt;
        &lt;property name="isGuest" type="bool"/&gt;
    &lt;/transfer&gt;

&lt;/transfers&gt;</code></pre>
        <h3>Available Types</h3>
        <p>You can use any name. The names start with a small letter and use camelCase format. You can use PHP native types: <code>int</code>, <code>string</code>, <code>bool </code>and <code>array</code>. In case you want to create a nested transfer object just use the name of the transfer object as the type. You can also define collections of objects with the <code>[]</code> symbols.</p><pre><code class="language-PHP line-numbers">&lt;transfer name="MyTransfer"&gt;
    &lt;property name="foo"    type="int" /&gt;
    &lt;property name="bar"    type="string" /&gt;
    &lt;property name="baz"    type="bool" /&gt;
    &lt;property name="bat"    type="array" /&gt;
    &lt;property name="item"   type="Foo" /&gt; &lt;!-- Foo is the name of another transfer object--&gt;
    &lt;property name="items"  type="Foo[]" /&gt;
&lt;/transfer&gt;</code></pre>
        <h2>File Location</h2>
        <p>Most of the modules define transfer objects in a dedicated XML file: <code class="bash">(ModuleNamespace)/Shared/Module/Transfer/module.transfer.xml</code></p>
        <p>Therefore you can find the XML definition for the CustomerGroup module in <code class="bash">vendor/spryker/spryker/Bundles/CustomerGroup/src/Spryker/Shared/CustomerGroup/Transfer/customer_group.transfer.xml</code></p>
        <h3>Adding Additional File Locations</h3>
        <p>If you have third-party modules using our transfer objects, you can easily add additional source directories in your projects. To do so you can extend <code class="bash">Spryker\Zed\Transfer\TransferConfig</code> and return all additional glob-patterns from <code class="bash">getAdditionalSourceDirectoryGlobPatterns(</code>).</p>
        <p>Let’s say you have a custom extension package called <code class="bash">my-vendor/my-package</code> that uses transfer objects. Using Composer, by default this package will install under <code class="bash">vendor/my-vendor/my-package</code>.</p>
        <p>If you want your transfer objects to be created from definitions stored under <code class="bash">vendor/my-vendor/my-package/src/Transfer</code>, provide the necessary glob-pattern like so:</p><pre><code class="language-PHP line-numbers">&lt;?php

namespace Pyz\Zed\Transfer;

use Spryker\Shared\Application\ApplicationConstants;
use Spryker\Shared\Config\Config;
use Spryker\Zed\Transfer\TransferConfig as SprykerTransferConfig;

class TransferConfig extends SprykerTransferConfig
{

    /**
     * @return string[]
     */
    protected function getAdditionalSourceDirectoryGlobPatterns()
    {
        return [
            APPLICARION_ROOT_DIR . '/vendor/my-vendor/my-package/src/Transfer/',
        ];
    }

}</code></pre>
        <p class="info"><b>Naming</b>
            <br />Please make sure your transfer object definition files end with <code class="bash">.transfer.xml</code> (even for your custom packages).</p>
        <p class="tip"><b>Glob patterns</b>
            <br />The Transfer module uses <code class="bash">PHP's glob() </code>function to resolve paths. <br />For more information see: <a href="http://php.net/manual/en/function.glob.php" target="_blank">PHP documentation</a>.</p>
        <h2>Transfer Object Generation</h2>
        <p>To generate the objects there is a console command:</p><pre>vendor/bin/console transfer:generate</pre>
        <p>This call will retrieve all <code class="bash">*.transfer.xml</code> files from project- and core-level, merge them and generate PHP classes: <code class="bash">src/Generated/Shared/Transfer/(Name)Transfer.php</code></p>
        <h2>Transfer File Expansion</h2>
        <p>Transfer objects can be expanded from different bundles. Any other module can add properties to existing transfer objects. For instance the Tax module may expect a “customer tax-id”. So in the <code class="bash">tax.transfer.xml</code> you can add the required properties to the customer. Please obey that it is not possible to remove existing properties or to change their type.</p><pre><code class="language-PHP line-numbers">&lt;?xml version="1.0"?&gt;
&lt;transfers xmlns="spryker:transfer-01"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="spryker:transfer-01 http://static.spryker.com/transfer-01.xsd"&gt;

    &lt;transfer name="Customer"&gt;
        &lt;property name="taxId" type="int"/&gt;
    &lt;/transfer&gt;

&lt;/transfers&gt;</code></pre>
        <p>After generation you can set and get the customer’s <code class="bash">taxId</code> like this:</p><pre><code class="language-PHP line-numbers">&lt;?php
use \Generated\Shared\Transfer\CustomerTransfer;

$customerTransfer = new CustomerTransfer();
$customerTransfer-&gt;setTaxId(54321);
$taxId = $customerTransfer-&gt;getTaxId();</code></pre>
        <h2>Related Spryks</h2>
        <p>You might use the following definitions to generate related code:</p>
        <ul>
            <li>Add Shared Transfer Schema</li>
        </ul>
        <p>See the <a href="https://documentation.spryker.com/capabilities/development/development_tools/spryk.htm">Spryk</a> documentation for details.</p>
    </body>
</html>