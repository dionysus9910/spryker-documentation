<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="" MadCap:lastBlockDepth="2" MadCap:lastHeight="17540" MadCap:lastWidth="1921">
    <head>
    </head>
    <body>
        <h1>Internal Server Error Handling</h1>
        <p MadCap:conditions="General.Hidden Comment">Used to be: http://spryker.github.io/development-guide/reference/handling-internal-server-error/</p>
        <p>This document describes how to configure the behavior when an internal server error occurs. Whether you need to show the details of the error or render a static page for any internal error, this is done through configuration.

</p>
        <h2>Configure Internal Server Error </h2>
        <p>Page
Depending on the environment on which the application is running, you can configure if you wish to show the stack trace of the error or to display a static HTML page.
</p>
        <p>
E.g. : for development environment you would want to see the details of the error, so you need have the following configuration in <var>Config/Shared/config_default.php</var>:

</p><pre><code class="language-PHP line-numbers">&lt;?php
$config[YvesConfig::YVES_SHOW_EXCEPTION_STACK_TRACE]  = true;
$config[SystemConfig::ZED_SHOW_EXCEPTION_STACK_TRACE] = true;
</code></pre>
        <p>For production environments, you would need to set those fields to false. To configure the error page you want to display, you need to set the path to the error page to the following fields in the config files:

</p><pre><code class="language-PHP line-numbers">&lt;?php
$config[YvesConfig::YVES_ERROR_PAGE]  = APPLICATION_ROOT_DIR.'/static/public/Yves/errorpage/error.html';
$config[SystemConfig::ZED_ERROR_PAGE] = APPLICATION_ROOT_DIR.'/static/public/Yves/errorpage/error.html';
</code></pre>
        <h2>Custom Error Pages for HTTP errors
</h2>
        <p>By default behavior, HTTP errors are converted to Exceptions. To render different content when a specific error occurs, we have a built-in custom error handler.

</p>
        <p><strong>To create a custom error</strong>:<br />Register the exception  in the exception handlers under the <var>ApplicationFactory</var>, as  below:

</p><pre><code class="language-PHP line-numbers">&lt;?php
/**
 * @return ExceptionHandlerInterface[]
 */
public function createExceptionHandlers()
{
    return [
        Response::HTTP_NOT_FOUND =&gt;  new DefaultExceptionHandler(),
        Response::HTTP_UNAUTHORIZED =&gt;  new DefaultExceptionHandler(),
    ];
}</code></pre>
        <p xml:space="preserve">
If one of the configured exceptions occurs, the request will be forwarded to a route named <var>error/[STATUS_CODE]</var>. </p>
        <p>Next, register this route and map it to the corresponding controller and view.

The route mapping can be registered in <var>ApplicationControllerProvider</var>, as in the example below:

</p><pre><code class="language-PHP line-numbers">&lt;?php
const ROUTE_ERROR_404 = 'error/404';
const ROUTE_ERROR_404_PATH = '/error/404';
 
protected function defineControllers(Application $app)
{
    $this-&gt;createGetController('/', static::ROUTE_HOME, 'Application', 'Index');
 
    $this-&gt;createGetController(static::ROUTE_ERROR_404_PATH, static::ROUTE_ERROR_404, 'Application', 'Error404');
}
</code></pre>
    </body>
</html>