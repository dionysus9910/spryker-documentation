<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:conditions="ReleaseVersions.2018-10">
    <head><title>Documenting GLUE API Resources | Spryker</title>
        <link href="../../../Resources/TableStyles/PatternedRows2.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <meta name="description" content="This tutorial describes how to set up and use the means of writing documentation for your project and gives advice on how to describe your REST API." />
    </head>
    <body>
        <h1>Documenting GLUE API Resources</h1>
        <p>To help developers understand and use the public API of your project, you need to cover it with complete and up-to-date documentation. Spryker Glue provides the possibility to generate it automatically with the help of the <b>DocumentationGeneratorRestApi</b> Module. It extracts information on your REST API endpoints directly from their implementation. It also adds the possibility to provide additional information on endpoints, such as their purpose, usage details, request parameters (e.g. in headers, paths, queries, or cookies), etc.</p>
        <p>The resulting document is a full description of your REST API following the <a href="https://github.com/OAI/OpenAPI-Specification">OpenAPI Specification</a> (formerly known as Swagger Document Format). It can be viewed, edited and consumed with the help of such tools as <a href="https://swagger.io/">Swagger Tools</a>, <a href="https://www.getpostman.com/">Postman</a> etc.</p>
        <p class="tip">REST API endpoints shipped by Spryker will be covered by documentation by default. A snapshot of the latest state of Spryker REST API can be found in Spryker Documentation. See <a href="https://documentation.spryker.com/glue_rest_api/rest-api-reference.htm">Rest API Reference</a>.</p>
        <h2>Prerequisites</h2>
        <p>Before you begin, make sure that you have <a href="https://documentation.spryker.com/feature_integration_guides/glue_api/glue-api-installation-and-configuration.htm">Spryker Glue installed and enabled</a>. Also, consider studying the following documents:</p>
        <ul>
            <li><a href="https://github.com/OAI/OpenAPI-Specification" target="_blank">Open API Specification</a>
            </li>
            <li><a href="https://swagger.io/" target="_blank">Swagger Tools Reference</a>
            </li>
        </ul>
        <h2>1. Installation and Configuration</h2>
        <p>To be able to generate REST API documentation, first, you need to install the <i>DocumentationGeneratorRestApi</i> Module. To do this, run the following command in the console:</p><pre><code class="language-PHP line-numbers">composer require spryker/rest-api-documentation-generator</code></pre>
        <p>After installation, open file <i>src/Pyz/Zed/DocumentationGeneratorRestApi/DocumentationGeneratorRestApiConfig.php</i> and modify the values of the following variables, if necessary:</p>
        <table style="mc-table-style: url('../../../Resources/TableStyles/PatternedRows2.css');" class="TableStyle-PatternedRows2" cellspacing="0">
            <thead>
                <tr class="TableStyle-PatternedRows2-Head-Header1">
                    <th class="TableStyle-PatternedRows2-HeadE-Regular-Header1">Variable</th>
                    <th class="TableStyle-PatternedRows2-HeadE-Regular-Header1">Description</th>
                    <th class="TableStyle-PatternedRows2-HeadD-Regular-Header1">Default Value</th>
                </tr>
            </thead>
            <tbody>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows"><var>GENERATED_FILE_OUTPUT_DIRECTORY</var>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">Sets the directory where the API specification file will be generated.</td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-LightRows">
                        <p><var>APPLICATION_SOURCE_DIR/Generated/Glue/Specification/</var>
                        </p>
                        <p class="info">By default, the <i>APPLICATION_SOURCE_DIR</i> variable is substituted with <i>src/Pyz</i>. In other words, the resulting directory will be <var>src/Pyz/Generated/Glue/Specification/</var>.</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows"><var>GENERATED_FILE_PREFIX</var>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows">Sets the generated file name.</td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-DarkerRows"><var>spryker_rest_api.schema.yml</var>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows"><var>REST_API_DOCUMENTATION_INFO_VERSION</var>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">Sets the API version. For details, see <a href="https://github.com/OAI/OpenAPI-Specification/tree/master/versions">versions</a>.</td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-LightRows"><var>1.0.0</var>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows"><var>REST_API_DOCUMENTATION_INFO_TITLE</var>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows">Sets the name of your API.</td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-DarkerRows"><var>Spryker API</var>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows"><var>APPLICATION_PROJECT_ANNOTATION_SOURCE_DIRECTORY_PATTERN</var>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">Specifies a template for paths where to search for REST API controllers on the <b>project</b> level.</td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-LightRows"><var>/Glue/%1$s/Controller/</var>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows2-BodyB-Regular-DarkerRows"><var>APPLICATION_CORE_ANNOTATION_SOURCE_DIRECTORY_PATTERN</var>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyB-Regular-DarkerRows">Specifies a template for paths where to search for REST API controllers on the <b>vendor</b> level.</td>
                    <td class="TableStyle-PatternedRows2-BodyA-Regular-DarkerRows"><var>/*/*/src/*/Glue/%1$s/Controller/</var>
                    </td>
                </tr>
            </tbody>
        </table>
        <p>For details on REST API controllers, see <MadCap:xref href="implementing-rest-api-resource.htm#create-resource-controller">4. Create a Resource Controller</MadCap:xref>.</p>
        <h2>2. Test Run</h2>
        <p>To make sure that the documentation generator is working properly, run the following command in the console:</p><pre><code class="language-PHP line-numbers">vendor/bin/console rest-api:generate:documentation</code></pre>
        <p>When the command completes, you should see a specification file generated in the directory and with the filename as you configured in step <b>2. Configuration</b>. By default, it is <var>src/Pyz/Generated/Glue/Specification/spryker_rest_api.schema.yml</var>.</p>
        <h2>3. Describe Your REST API</h2>
        <p>
            <h3>Requests and Responses</h3>
        </p>
        <p>Data models of requests used in your REST API are described with the help of transfer objects. Such objects contain a list of fields for each request or response, their data type, which of the fields are required etc. By default, the fields are not included in the specification automatically. To include them, you need to modify the XML schema definitions of the transfer objects.</p>
        <p>The visibility of request and response fields is controlled by XML attribute <i>restRequestParameter</i>. It can have <b>3</b> possible values:</p>
        <ul>
            <li><b>required</b> - the field will be included in the documentation and also required for a valid request;</li>
            <li><b>yes</b> - the field will be included in the documentation, but optional;</li>
            <li><b>no</b> - the field will not be included in the documentation.</li>
        </ul>
        <p>If the <i>restRequestParameter</i> attribute is not present for a field, the default value <b>no</b> is assumed.</p>
        <p>A response is generated using all properties of a transfer object. Below, you can see an example definition of a request transfer object:</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>auth_rest_api.transfer.xml</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-XML line-numbers">&lt;transfer name="RestAccessTokensAttributes"&gt;
    &lt;property name="username" type="string" restRequestParameter="required" /&gt; &lt;!-- field is included in the specification and required --&gt;
    &lt;property name="password" type="string" restRequestParameter="required" /&gt; &lt;!-- field is included in the specification and required --&gt;
    &lt;property name="tokenType" type="string" restRequestParameter="yes" /&gt; &lt;!-- field is included in the specification and optional --&gt;
    &lt;property name="expiresIn" type="string" restRequestParameter="no" /&gt; &lt;!-- field is not included in the specification --&gt;
    &lt;property name="accessToken" type="string" /&gt; &lt;!-- field is not included in the specification --&gt;
    &lt;property name="refreshToken" type="string" /&gt; &lt;!-- field is not included in the specification --&gt;
&lt;/transfer&gt;</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p>To apply the changes, run the following console command:</p><pre><code class="language-PHP line-numbers">vendor/bin/console transfer:generate</code></pre>
        <h3>REST Methods</h3>
        <p>In addition to requests and responses, you can also supply additional information on your API endpoints. To do so, you need to modify the resource controllers of your REST API modules.</p>
        <p>Each controller has <i>getAction</i>, <i>postAction</i>, <i>patchAction</i>, or <i>deleteAction</i> functions, each providing functionality for the respective REST verbs (GET, POST, PATCH, DELETE). In the PHP-DOC blocks of such functions, you can use a new type of annotations: <i>@Glue</i>. The annotations use JSON-like format as follows:</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>View sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">/**
 * @Glue({
 *     "post": {
 *          "summary": [
 *              "Summary example."
 *          ],
 *          "parameters": [
 *              {
 *                  name: "Accept-Language",
 *                  in: "header",
 *              },
 *              {
 *                  name: "X-Anonymous-Customer-Unique-Id",
 *                  in: "header",
 *                  required: true,
 *                  description: "Guest customer unique ID"
 *              },
 *          ],
 *          "responses": {
 *              "400": "Bad Response.",
 *              "404": "Item not found.",
 *              "500": "Server Error."
 *          }
 *     }
 * })
 * ...
 */
public function getAction(RestRequestInterface $restRequest)</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p>The annotation keys are described below:</p>
        <table style="mc-table-style: url('../../../Resources/TableStyles/PatternedRows2.css');" class="TableStyle-PatternedRows2" cellspacing="0">
            <thead>
                <tr class="TableStyle-PatternedRows2-Head-Header1">
                    <th class="TableStyle-PatternedRows2-HeadE-Regular-Header1">Annotation</th>
                    <th class="TableStyle-PatternedRows2-HeadE-Regular-Header1">Description</th>
                    <th class="TableStyle-PatternedRows2-HeadD-Regular-Header1">Notes</th>
                </tr>
            </thead>
            <tbody>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows"><var>getResourceById</var>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">When set to <b>true</b>, indicates a <i>GET</i> endpoint that returns a single resource, for example: <i>/wishlists/{ID}. *</i></td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-LightRows" style="font-style: normal;" rowspan="2">The <var>getResourceById</var> and <var>getCollection</var> annotations are used for GET endpoints only. If neither of the notations are present for the <i>getAction</i> function or they are both set to <b>false</b>, a GET endpoint will be generated anyway. However, in such a case, the resource ID will not be included in the response.</td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows"><var>getCollection</var>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows">When set to <b>true</b>, indicates a <i>GET</i> endpoint that returns a collection of resources, for example: <i>/wishlists.</i> *</td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows"><var>summary</var>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">Sets a description for the endpoint. Use it to describe, in as much detail as possible, what the endpoint is used for, its purpose and intention.</td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-LightRows" style="font-style: normal;">If a summary is not specified explicitly, it will be generated automatically. </td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows"><var>parameters</var>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows">Sets optional parameters for the request.</td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-DarkerRows" style="font-style: normal;">Parameters can be passed in HTTP headers, queries, cookies or as a part of the resource URI. For more details on parameter use and the available fields, see <a href="https://swagger.io/specification/#parameterObject" target="_blank">Parameter Object</a>.</td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows"><var>responses</var>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">Use this parameter to describe all possible responses that can be generated by this endpoint and their respective response codes.</td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-LightRows" style="font-style: normal;">The <b>default</b> response is included automatically. There is no need to include it here.</td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows"><var>responseAttributesClassName</var>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows">Sets the FQCN of a custom transfer class that represents the response object.</td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-DarkerRows" style="font-style: normal;">	Use this annotation when a response object is different from the corresponding request object.				</td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <td class="TableStyle-PatternedRows2-BodyB-Regular-LightRows"><var>isEmptyResponse</var>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyB-Regular-LightRows">When set to true, indicates that the HTTP method does not have a response body.</td>
                    <td class="TableStyle-PatternedRows2-BodyA-Regular-LightRows" style="font-style: normal;">Do not use this annotation for the DELETE method. It has an empty response body by default.				</td>
                </tr>
            </tbody>
        </table>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot><b>Example 1:</b> GET endpoint that returns a single resource</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">/**
 * @Glue({
 *     "getResourceById": {
 *          "summary": [
 *              "My GET Endpoint"
 *          ],
 *          "responses": {
 *              "400": "Bad Response.",
 *              "404": "Item not found.",
 *              "500": "Server Error."
 *          }
 *     }
 * })
 * ...
 */
public function getAction(RestRequestInterface $restRequest): RestResponseInterface
{
    // TODO: your implementation here
}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot><b>Example 2:</b> POST endpoint with an optional header</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">/**
 * @Glue({
 *     "post": {
 *          "summary": [
 *              "My POST Endpoint"
 *          ],
 *          "parameters": [
 *              {
 *                  name: "Accept-Language",
 *                  in: "header",
 *              },
 *          ],
 *          "responses": {
 *              "400": "Bad Response.",
 *              "500": "Server Error."
 *          }
 *     }
 * })
 * ...
 */
public function postAction(RestRequestInterface $restRequest, MyRequestAttributesTransfer $requestAttributesTransfer): RestResponseInterface
{
    // TODO: your implementation here
}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h2>4. Generate</h2>
        <p>Run the following command in the console:</p><pre><code class="language-PHP line-numbers">vendor/bin/console rest-api:generate:documentation</code></pre>
        <h2>Result</h2>
        <p>When the command completes, you should see a specification file generated in the directory and with the filename as you configured in step <b>2. Configuration</b>. By default, it is <i>src/Pyz/Generated/Glue/Specification/spryker_rest_api.schema.yml</i>. The specification will contain all REST API endpoints configured in Glue, both on the global and project levels, along with data models for all requests and responses. You can upload the file to <a href="https://editor.swagger.io/" target="_blank">Swagger Editor</a> to get a visual representation of your API or use it in tools like Postman (with the OpenAPI v3 support) for development purposes.</p>
        <h2>See also:</h2>
        <ul>
            <li><a href="https://documentation.spryker.com/glue_rest_api/glue_api_developer_guides/glue-infrastructure.htm">Glue API infrastructure</a>
            </li>
            <li><a href="https://documentation.spryker.com/feature_integration_guides/glue_api/glue-api-installation-and-configuration.htm">Glue API installation and configuration</a>
            </li>
            <li><a href="https://documentation.spryker.com/glue_rest_api/rest-api-reference.htm">Glue API reference</a>
            </li>
        </ul>
        <p><i>Last review date: Feb. 28th, 2019</i>
            <MadCap:conditionalText MadCap:conditions="General.Hidden Comment"><i>by Volodymyr Volkov</i>
            </MadCap:conditionalText>
        </p>
    </body>
</html>