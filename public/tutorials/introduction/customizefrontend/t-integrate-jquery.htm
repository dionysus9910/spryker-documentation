<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title>Tutorial - Frontend - Integrate JQuery into Atomic Frontend | Spryker</title>
        <meta name="description" content="This tutorial discribes the procedure of integration JQuery into Atomic Frontend using jquery-countdown plugin as an example. " />
    </head>
    <body>
        <h1>Tutorial - Frontend - Integrate JQuery into Atomic Frontend</h1>
        <p>&#160;</p>
        <p>This guide aims to illustrate how to use <i>JQuery</i> and any <i>JQuery</i> plugin inside Spryker components.</p>
        <p>To do so, we will show how to integrate a plugin called <i>jquery-countdown</i>.</p>
        <h2>Setup</h2>
        <h3>Install <i>JQuery</i> and <i>jquery-countdown</i> plugin</h3>
        <p>First of all, you need to add <i>JQuery</i> and <i>jquery-countdown</i> as dependencies in the project. To do so, from the root folder, type in the terminal:</p><pre><code class="language-PHP">npm install jquery jquery-countdown --save</code></pre>
        <p><var>./package.json</var> file gets updated as follows:</p><pre><code class="language-PHP line-numbers">"dependencies": {
  ...
  "jquery": "~3.3.1",
  "jquery-countdown": "~2.2.0",
  ...
}</code></pre>
        <h3>Update webpack configuration</h3>
        <p><i>JQuery</i> is generally used (and extended in plugins) as global. To allow that,  add the following lines to the plugin section of the webpack development configuration. Open <var>./frontend/configs/development.js</var> and add the following:</p><pre><code class="language-PHP line-numbers">plugins: [
  ...
  new webpack.ProvidePlugin({
    // jquery global
    $: 'jquery',
    'window.jQuery': 'jquery',
    'window.$': 'jquery'
  }),
  ...
]</code></pre>
        <p><var>ProvidePlugin</var> will inject <i>JQuery</i> as a global variable into the DOM, allowing any plugin/usage to rely on $,  window.jQuery or window.$ variables.</p>
        <h3>Add <i>JQuery</i> declaration for <i>Typescript</i> (optional)</h3>
        <p>If you're using <i>Typescript</i>, you need to tell it how to resolve the "$" symbol, or the transpiling will fail. In order to do so, you can use 2 approaches:</p>
        <ol>
            <li>add <var>declare const $: any;</var> at the very beginning of every file that uses <i>JQuery</i></li>
            <li>create the file <var>./src/Pyz/Yves/ShopUi/Theme/default/global.d.ts</var> and add the line <var>declare const $: any;</var><br /><p class="info">This approach is a permanent solution and you won't need to declare <i>JQuery</i> anywhere else as the global definition file will be used to recognize the "$" symbol in the whole application.</p></li>
        </ol>
        <h3>Add <i>JQuery</i> to vendor.ts</h3>
        <p>To be sure that <i>JQuery</i> will be included into the final output, add the following line to <var>./src/Pyz/Yves/ShopUi/Theme/default/vendor.ts</var>:</p><pre><code class="language-PHP">import 'jquery';</code></pre>
        <p>By doing this, we make Webpack know to place <i>JQuery</i> source code into the vendor chunk and require it from there whenever needed.</p>
        <h3>Add <i>jquery-countdown</i> to vendor.ts (optional)</h3>
        <p>If you want to serve <i>jquery-countdown</i> as global and simply use it in every component you need, add the following line to .<var>/src/Pyz/Yves/ShopUi/Theme/default/vendor.ts</var>:</p><pre><code class="language-PHP">import 'jquery-countdown';</code></pre>
        <div class="info">If you want to include the plugin as a local resource used only by certain specific components, ignore this step.</div>
        <h2>Configure application</h2>
        <p>The main integration step is to be implemented <var>in ./src/Pyz/Yves/ShopUi/Theme/default/app.ts</var>. This file defines the entry point for the whole Atomic Frontend, therefore it needs to be updated in order to properly integrate with <i>JQuery</i>. The main reason is that <i>JQuery</i> needs some time to load itself in the DOM; every plugin or code that uses it must wait for document.ready event before doing anything.</p>
        <p>Same goes for this component: In order to safely have <i>JQuery</i> available in the component, you need to be sure that the <var>mountCallback</var> (or <var>readyCallback</var> which is deprecated now) is called after the document.ready event.</p>
        <p style="font-weight: bold;"><span style="font-weight: normal;">To do so, add one of the following code chunks to</span> <var>./src/Pyz/Yves/ShopUi/Theme/default/app.ts</var>.</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot style="font-weight: bold;">ShopUi module сonfiguration version 1.9 or earlier:</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">import { mount } from 'ShopUi/app';
import { LogLevel, log, info, error, config as setLogConfig } from 'ShopUi/app/logger';
import { get as config, set as setConfig, defaultConfig, Config } from 'ShopUi/app/config';

function fireReadyEvent(): void {
    const readyEvent = new CustomEvent(config().events.ready);
    document.dispatchEvent(readyEvent);
}

function fireErrorEvent(err: Error): void {
    const errorEvent = new CustomEvent(config().events.error, { detail: err });
    document.dispatchEvent(errorEvent);
}

async function onDocumentReady(): Promise&lt;void&gt; {
    log('DOM ready');

    try {
        await mount();
        fireReadyEvent();
        log('application ready');
    } catch (err) {
        fireErrorEvent(err);
        error('application error\n', err);
    }
}

setConfig(defaultConfig);
setLogConfig(config().log.level, config().log.prefix);
info('mode:', config().isProduction ? 'PRODUCTION,' : 'DEVELOPMENT,', 'log-level:', LogLevel[config().log.level]);

$(() =&gt; onDocumentReady());</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot style="font-weight: bold;">ShopUi module сonfiguration version 1.10 or later:</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">import { setup, mount } from 'ShopUi/app';
import { log, error } from 'ShopUi/app/logger';

setup();

$(async () =&gt; {
    try {
        await mount();
        log('application ready');
    } catch (err) {
        error('application error\n', err);
    }
});</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h2>Usage</h2>
        <h3>Add <i>jquery-countdown</i> to the component (optional)</h3>
        <div class="info">If you already added the plugin to <var>vendor.ts</var> as a global resource, ignore this step.</div>
        <p>If you want to serve <i>jquery-countdown</i> as a local plugin used only in the current component, add the following line to the specific <var>component-name.ts</var> file:</p><pre><code class="language-PHP">import 'jquery-countdown';</code></pre>
        <h3>Use the plugin</h3>
        <p>At this point, you can start using the <i>jquery-countdown</i>plugin in the necessary components. The following code is used to load the plugin:</p><pre><code class="language-PHP line-numbers">$('.any-target-selector').countdown('2100/01/01', function (event: any) {
				$(this).html(event.strftime('%w weeks %d days %H:%M:%S'));
		});</code></pre>
        <div class="important">Make sure that it is invoked inside/after <var>mountCallback</var> (<var>readyCallback</var> can be used as well, but it's now deprecated).</div>
    </body>
</html>