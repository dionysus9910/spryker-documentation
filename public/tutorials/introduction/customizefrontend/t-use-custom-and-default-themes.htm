<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title>Tutorial - Frontend - Use Custom and Default Themes | Spryker</title>
        <meta name="description" content="It is a tutorial which describes the procedure of adding a component to Spryker Shop front end. There are two possible strategies for this purpose: include and embed. The procedural steps are provided for both of them. " />
    </head>
    <body>
        <h1>Tutorial - Frontend - Use Custom and Default Themes</h1>
        <p>If the default theme shipped with Spryker front end or some of its components do not meet your business requirements, you can replace it with a customized theme of your own. The following article provides instructions on changing the default theme with a custom one.</p>
        <ol>
            <li>Firstly, create a new constant to be able to use it in config files.  Extend <var>TwigConstants</var> by creating the file <var>src/Pyz/Shared/Twig/TwigConstants.php</var> with the following content:</li><pre><code class="language-PHP line-numbers">
&lt;?php
​
/**
 * This file is part of the Spryker Suite.
 * For full license information, please view the LICENSE file that was distributed with this source code.
 */
​
namespace Pyz\Shared\Twig;
​
use Spryker\Shared\Twig\TwigConstants as SprykerTwigConstants;
​
interface TwigConstants extends SprykerTwigConstants
{
    const YVES_DEFAULT_THEME = 'YVES_DEFAULT_THEME';
}</code></pre>
            <li>Replace the value of <var>$YVES_THEME</var> variable with your theme name and add the <var>$config[TwigConstants::YVES_DEFAULT_THEME] = 'default';</var> line to a config file of your environment or store. This will allow you to change themes simply by updating config files in a per-store manner. For example, it can be set up in <var>config/Shared/config_default.php</var> as follows:</li><pre><code class="language-PHP line-numbers">
use Pyz\Shared\Twig\TwigConstants;
​
// ---------- Theme
$YVES_THEME = 'custom_theme_name';
$config[TwigConstants::YVES_THEME] = $YVES_THEME;
$config[TwigConstants::YVES_DEFAULT_THEME] = 'default';
$config[CmsConstants::YVES_THEME] = $YVES_THEME;</code></pre>
            <li>The next step is to add paths to be used by the twig loader to find your new theme and have a fallback. Extend <var>TwigConfig</var> by creating the following file in <var>src/Pyz/Yves/Twig</var> folder:</li>
            <MadCap:dropDown>
                <MadCap:dropDownHead>
                    <MadCap:dropDownHotspot><b>TwigConfig.php</b>
                    </MadCap:dropDownHotspot>
                </MadCap:dropDownHead>
                <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">
&lt;?php
​
/**
 * This file is part of the Spryker Suite.
 * For full license information, please view the LICENSE file that was distributed with this source code.
 */
​
namespace Pyz\Yves\Twig;
​
use Pyz\Shared\Twig\TwigConstants;
use Spryker\Shared\Kernel\KernelConstants;
use Spryker\Yves\Twig\TwigConfig as SprykerTwigConfig;
​
class TwigConfig extends SprykerTwigConfig
{
    /**
     * @return array
     */
    public function getTemplatePaths()
    {
        $paths = parent::getTemplatePaths();
​
        $paths = $this-&gt;addDefaultProjectTemplatePaths($paths);
        $paths = $this-&gt;addDefaultCoreTemplatePaths($paths);
​
        return $paths;
    }
​
    /**
     * @param array $paths
     *
     * @return array
     */
    protected function addDefaultProjectTemplatePaths(array $paths)
    {
        $namespaces = $this-&gt;get(KernelConstants::PROJECT_NAMESPACES);
        $storeName = $this-&gt;getStoreName();
        $themeName = $this-&gt;getDefaultThemeName();
​
        foreach ($namespaces as $namespace) {
            $paths[] = APPLICATION_SOURCE_DIR . '/' . $namespace . '/Yves/%s/' . $storeName . '/Theme/' . $themeName;
            $paths[] = APPLICATION_SOURCE_DIR . '/' . $namespace . '/Yves/%s/Theme/' . $themeName;
            $paths[] = APPLICATION_SOURCE_DIR . '/' . $namespace . '/Shared/%s/' . $storeName . '/Theme/' . $themeName;
            $paths[] = APPLICATION_SOURCE_DIR . '/' . $namespace . '/Shared/%s/Theme/' . $themeName;
        }
​
        return $paths;
    }
​
    /**
     * @param array $paths
     *
     * @return array
     */
    protected function addDefaultCoreTemplatePaths(array $paths)
    {
        $namespaces = $this-&gt;get(KernelConstants::CORE_NAMESPACES);
        $themeName = $this-&gt;getDefaultThemeName();
​
        foreach ($namespaces as $namespace) {
            $paths[] = APPLICATION_VENDOR_DIR . '/*/*/src/' . $namespace . '/Yves/%s/Theme/' . $themeName;
            $paths[] = APPLICATION_VENDOR_DIR . '/*/*/src/' . $namespace . '/Shared/%s/Theme/' . $themeName;
        }
​
        $paths[] = APPLICATION_VENDOR_DIR . '/spryker/*/src/Spryker/Yves/%s/Theme/' . $themeName;
        $paths[] = APPLICATION_VENDOR_DIR . '/spryker/*/src/Spryker/Shared/%s/Theme/' . $themeName;
​
        return $paths;
    }
​
    /**
     * @return string
     */
    protected function getDefaultThemeName(): string
    {
        return $this-&gt;get(TwigConstants::YVES_DEFAULT_THEME);
    }
}</code></pre>
                </MadCap:dropDownBody>
            </MadCap:dropDown>
            <p class="info">The default theme name is set up in the config file from step 2. Create a constant <var>TwigConstants::YVES_DEFAULT_THEME</var>, add it to the config file or just return a value from <var>getDefaultThemeName</var> function.</p>
            <li>Extend front-end settings by adding <var>theme</var> and <var>defaultTheme</var> values to the following file:</li>
            <MadCap:dropDown>
                <MadCap:dropDownHead>
                    <MadCap:dropDownHotspot><b>frontend/settings.js</b>
                    </MadCap:dropDownHotspot>
                </MadCap:dropDownHead>
                <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">
const path = require('path');
​
// define the applicatin name
// important: the name must be normalized
const name = 'yves_default';
​
// define the current theme
const theme = 'custom';
​
const defaultTheme = 'default';
​
// define the current context (root)
const context = process.cwd();
​
// define project relative paths to context
const paths = {
    // locate the typescript configuration json file
    tsConfig: './tsconfig.json',
​
    // assets folder
    assets: './frontend/assets',
​
    // public folder
    public: './public/Yves/assets',
​
    // core folders
    core: {
        // all modules
        modules: './vendor/spryker-shop',
        // ShopUi source folder
        shopUiModule: `./vendor/spryker-shop/shop-ui/src/SprykerShop/Yves/ShopUi/Theme/${theme}`
    },
​
    // project folders
    project: {
        // all modules
        modules: './src/Pyz/Yves',
        // ShopUi source folder
        shopUiModule: `./src/Pyz/Yves/ShopUi/Theme/${theme}`
    }
};
​
// define relative urls to site host (/)
const urls = {
    // assets base url
    assets: '/assets'
};
​
// export settings
module.exports = {
    name,
    theme,
    context,
    paths,
    urls,
​
    // define settings for suite-frontend-builder finder
    find: {
        // webpack entry points (components) finder settings
        componentEntryPoints: {
            // absolute dirs in which look for
            dirs: [
                path.join(context, paths.core.modules),
                path.join(context, paths.project.modules)
            ],
            // files/dirs patterns
            patterns: [
                `**/Theme/${theme}/components/atoms/*/index.ts`,
                `**/Theme/${theme}/components/molecules/*/index.ts`,
                `**/Theme/${theme}/components/organisms/*/index.ts`,
                `**/Theme/${theme}/templates/*/index.ts`,
                `**/Theme/${theme}/views/*/index.ts`,
                `**/Theme/${defaultTheme}/components/atoms/*/index.ts`,
                `**/Theme/${defaultTheme}/components/molecules/*/index.ts`,
                `**/Theme/${defaultTheme}/components/organisms/*/index.ts`,
                `**/Theme/${defaultTheme}/templates/*/index.ts`,
                `**/Theme/${defaultTheme}/views/*/index.ts`,
                '!config',
                '!data',
                '!deploy',
                '!node_modules',
                '!public',
                '!test'
            ]
        },
​
        // core component styles finder settings
        // important: this part is used in shared scss environment
        // do not change unless necessary
        componentStyles: {
            // absolute dirs in which look for
            dirs: [
                path.join(context, paths.core.modules)
            ],
            // files/dirs patterns
            patterns: [
                `**/Theme/${theme}/components/atoms/*/*.scss`,
                `**/Theme/${theme}/components/molecules/*/*.scss`,
                `**/Theme/${theme}/components/organisms/*/*.scss`,
                `**/Theme/${theme}/templates/*/*.scss`,
                `**/Theme/${theme}/views/*/*.scss`,
                `!**/Theme/${theme}/**/style.scss`,
                `**/Theme/${defaultTheme}/components/atoms/*/*.scss`,
                `**/Theme/${defaultTheme}/components/molecules/*/*.scss`,
                `**/Theme/${defaultTheme}/components/organisms/*/*.scss`,
                `**/Theme/${defaultTheme}/templates/*/*.scss`,
                `**/Theme/${defaultTheme}/views/*/*.scss`,
                `!**/Theme/${defaultTheme}/**/style.scss`,
                '!config',
                '!data',
                '!deploy',
                '!node_modules',
                '!public',
                '!test'
            ]
        }
    }
}</code></pre>
                </MadCap:dropDownBody>
            </MadCap:dropDown>
            <li>Allow webpack to complie the project with the new theme by copying <var>src/Pyz/Yves/ShopUi/Theme/default</var> to <var>src/Pyz/Yves/ShopUi/Theme/nameOfYorNewTheme</var>.</li>
            <li>Drop twig cache for the changes to take place by running the console command:</li>
        </ol><pre><code class="language-PHP">console cache:empty-all</code></pre>
    </body>
</html>