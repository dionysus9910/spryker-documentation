<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
    </head>
    <body>
        <h1>Tutorial - Testing and TDD - <MadCap:variable name="General.ProductName" /></h1>
        <p class="info">This tutorial is also available on the Spryker Training web-site. For more information and hands-on exercises, visit the <a href="https://training.spryker.com/courses/developer-bootcamp">Spryker Training</a> web-site.</p>
        <h2>Challenge Description</h2>
        <p>This task helps to understand the main concepts of testing with Spryker and see how simple it is to build tests. You will use the <MadCap:expanding><MadCap:expandingHead>TDD</MadCap:expandingHead><MadCap:expandingBody>Test-Driven Development</MadCap:expandingBody></MadCap:expanding> approach.</p>
        <p>Spryker's testing structure and data handling make it very easy to develop using TDD. You will build a simple module that reverses a string and test it.</p>
        <p>Using TDD, you will write the test first, see it fails, and then write the string reverser that makes the test pass.</p>
        <h2>1. Build the test that fails</h2>
        <p>As everything in Spryker is modular, tests are also modular. To build a new test, you simply add a new module inside your tests. </p>
        <p class="note">Spryker introduces a new namespace for testing in your project called <b>PyzTest</b>.</p>
        <p>As you are going to work with Zed, the test module will be for Zed:</p>
        <ol>
            <li>Create a new test module inside the tests directory in you project <code>tests/PyzTest/Zed</code> and call it <var>StringReverser</var>.</li>
            <li>Spryker uses <var>Codeception</var> as a testing framework. Using <code>Codeception</code>, add the config file for your new module inside <code>tests/PyzTest/Zed/StringReverser</code> and call it <var>codeception.yml</var>. The config looks like this:
			<MadCap:dropDown><MadCap:dropDownHead><MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot></MadCap:dropDownHead><MadCap:dropDownBody><p><pre><code class="language-PHP line-numbers">
namespace: PyzTest\Zed\StringReverser
 
paths:
	tests: .
	data: _data
	support: _support
	log: _output
 
coverage:
	enabled: true
	remote: false
	whitelist: { include: ['../../../../src/*'] }
 
suites:
	Business:
		path: Business
		class_name: StringReverserBusinessTester
		modules:
			enabled:
				- Asserts
				- \PyzTest\Shared\Testify\Helper\Environment
				- \SprykerTest\Shared\Testify\Helper\ConfigHelper
				- \SprykerTest\Shared\Testify\Helper\DependencyHelper
				- \SprykerTest\Shared\Propel\Helper\TransactionHelper
				- \SprykerTest\Shared\Testify\Helper\LocatorHelper:
						projectNamespaces: ['Pyz']			
				</code></pre></p></MadCap:dropDownBody></MadCap:dropDown></li>
            <li>Add the Business folder inside <code>tests/PyzTest/Zed/StringReverser</code>.</li>
            <li>To generate the needed test classes from Codeception, run the command <code>vendor/bin/codecept build -c tests/PyzTest/Zed/StringReverser</code>.</li>
            <li>Create a facade test class to add your test inside it. The facade test class looks like this:
			<MadCap:dropDown><MadCap:dropDownHead><MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot></MadCap:dropDownHead><MadCap:dropDownBody><p><pre><code class="language-PHP line-numbers">
namespace PyzTest\Zed\StringReverser\Business;
 
use Codeception\Test\Unit;
 
/**
 * @group PyzTest
 * @group Zed
 * @group StringReverser
 * @group Business
 * @group Facade
 * @group StringReverserFacadeTest
 * Add your own group annotations below this line
 */
class StringReverserFacadeTest extends Unit
{
	/**
	 * @var \PyzTest\Zed\StringReverser\StringReverserBusinessTester
	 */
	protected $tester;
}			
			</code></pre></p></MadCap:dropDownBody></MadCap:dropDown></li>
            <li>Spryker can generate transfer objects for testing using a concept called <b>Data Builders</b>. <b>Data Builders</b> generators work similarly to transfer generators, except that they use data fakers to generate random data for testing purposes. You can generate Data Builders using the same transfer object schemas and running the command <code>console transfer:databuilder:generate</code>.
				<p>To add the data faker rules for the test we need to create a data builder schema. Inside <i>tests/</i>, create a new directory called <i>_data</i> and inside it add the data builder schema. Call it <i>string_reverser.databuilder.xml</i>.</p><p class="info">The schema looks very similar to a transfer object schema. This schema will only add the rules when generating the data builders.</p><p class="tip">Remember, you can generate the data builders without the rules and without the schema.</p><MadCap:dropDown><MadCap:dropDownHead><MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot></MadCap:dropDownHead><MadCap:dropDownBody><p><pre><code class="language-PHP line-numbers">
&lt;?xml version="1.0"?&gt;
	&lt;transfers
		xmlns="spryker:transfer-01"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="spryker:transfer-01 http://static.spryker.com/transfer-01.xsd"
	&gt;
 
	&lt;transfer name="StringReverser"&gt;
		&lt;property name="originalString" dataBuilderRule="realText(20, 2)"/&gt;
		&lt;property name="reversedString" dataBuilderRule="realText(20, 2)"/&gt;
	&lt;/transfer&gt;
 
&lt;/transfers&gt;						
				</code></pre></p></MadCap:dropDownBody></MadCap:dropDown></li>
            <li>Data builders return transfer objects of the same type of the data builder. So, you need to have a transfer object called <var>StringReverser</var> in order for the data builder to work. 
			<p>Data builders cannot even be generated if the transfer object is not there. Add the <var>StringReverser</var> transfer inside <code>src/Pyz/Shared/StringReverser</code>.</p><MadCap:dropDown><MadCap:dropDownHead><MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot></MadCap:dropDownHead><MadCap:dropDownBody><p><pre><code class="language-PHP line-numbers">
&lt;?xml version="1.0"?&gt;
&lt;transfers xmlns="spryker:transfer-01"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="spryker:transfer-01 http://static.spryker.com/transfer-01.xsd"&gt;
 
	&lt;transfer name="StringReverser"&gt;
		&lt;property name="originalString" type="string"/&gt;
		&lt;property name="reversedString" type="string"/&gt;
	&lt;/transfer&gt;
&lt;/transfers&gt;				
			</code></pre></p></MadCap:dropDownBody></MadCap:dropDown></li>
            <li>Run the command <code>console transfer:generate</code> to generate the transfer object first, then run the command <code>console transfer:databuilder:generate</code> to generate the data builder. 
			<p>You should have both of them generated by now.</p></li>
            <li>It is time to add the test method. You will test if the string is reversed correctly. 
			<p>A test in Spryker consists of three main blocks
				<ul><li><b>arrange</b> - to prepare the test datas.</li><li><b>act</b> - to act on the data.
						<p class="info">In the case describes in this tutorial, <b>act</b> will be calling the facade method.</p></li><li><b>assert</b> - to check the results.</li></ul></p><MadCap:dropDown><MadCap:dropDownHead><MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot></MadCap:dropDownHead><MadCap:dropDownBody><p><pre><code class="language-PHP line-numbers">
/**
 * @return void
 */
public function testStringIsReversedCorrectly()
{
	// Arrange
	$stringReverserTransfer = (new StringReverserBuilder([
		'originalString' =&gt; 'Hello Spryker!'
	]))-&gt;build();
 
	// Act
	$stringReverserFacade = $this-&gt;tester-&gt;getLocator()-&gt;stringReverser()-&gt;facade();
	$stringReverserResultTransfer = $stringReverserFacade-&gt;reverseString($stringReverserTransfer);
 
	// Assert
	$this-&gt;assertEquals(
		'!rekyrpS olleH',
		$stringReverserResultTransfer-&gt;getReversedString()
	);
}
				</code></pre></p></MadCap:dropDownBody></MadCap:dropDown></li>
            <li>Run the test using the command <code>vendor/bin/codecept run -c tests/PyzTest/Zed/StringReverser</code>.
			<p>The test at this point should fail and give an error that the <var>StringReverserFacade</var> cannot be resolved because it does not exist.</p> </li>
        </ol>
        <h2>2. Make the test pass</h2>
        <p>Now you can write the actual logic (feature) to reverse a string and make the test pass:</p>
        <ol>
            <li>Add a new module in Zed called <b>StringReverser</b>. </li>
            <li>Add the facade and the needed logic  to reverse the string in a model. Your Zed module should have a <var>StringReverserConfig</var> and a <var>StringReverserDependencyProvider</var> so that the class locator work with you test. 
			<p class="tip">Use the code generators to generate the module in Zed console <code>code:generate:module:zed StringReverser</code>.</p><MadCap:dropDown><MadCap:dropDownHead><MadCap:dropDownHotspot>Click to expand the code samples</MadCap:dropDownHotspot></MadCap:dropDownHead><MadCap:dropDownBody><p><pre><code class="language-PHP line-numbers">
namespace Pyz\Zed\StringReverser\Business;
 
use Generated\Shared\Transfer\StringReverserTransfer;
use Spryker\Zed\Kernel\Business\AbstractFacade;
 
class StringReverserFacade extends AbstractFacade implements StringReverserFacadeInterface
{
	/**
	 * @param \Generated\Shared\Transfer\StringReverserTransfer $stringReverserTransfer
	 *
	 * @return \Generated\Shared\Transfer\StringReverserTransfer
	 */
	public function reverseString(StringReverserTransfer $stringReverserTransfer)
	{
		return $this-&gt;getFactory()
			-&gt;createStringReverser()
			-&gt;reverse($stringReverserTransfer);
	}
}	
			</code></pre></p><p><pre><code class="language-PHP line-numbers">	
namespace Pyz\Zed\StringReverser\Business;
 
use Pyz\Zed\StringReverser\Business\Model\StringReverser;
use Spryker\Zed\Kernel\Business\AbstractBusinessFactory;
 
class StringReverserBusinessFactory extends AbstractBusinessFactory
{
	/**
	 * @return \Pyz\Zed\StringReverser\Business\Model\StringReverser
	 */
	public function createStringReverser()
	{
		return new StringReverser();
	}
}			
			</code></pre></p><p><pre><code class="language-PHP line-numbers">
namespace Pyz\Zed\StringReverser\Business\Model;
 
use Generated\Shared\Transfer\StringReverserTransfer;
use Spryker\Zed\Kernel\Business\AbstractFacade;
 
class StringReverser extends AbstractFacade
{
	/**
	 * @param \Generated\Shared\Transfer\StringReverserTransfer $stringReverserTransfer
	 *
	 * @return \Generated\Shared\Transfer\StringReverserTransfer
	 */
	public function reverse(StringReverserTransfer $stringReverserTransfer)
	{
		$reversedString = strrev($stringReverserTransfer-&gt;getOriginalString());
		$stringReverserTransfer-&gt;setReversedString($reversedString);
 
		return $stringReverserTransfer;
	}
}						
			</code></pre></p></MadCap:dropDownBody></MadCap:dropDown></li>
            <li>Run the test again <code>vendor/bin/codecept run -c tests/PyzTest/Zed/StringReverser</code>. The test should pass.</li>
        </ol>
        <p>&#160;</p>
        <p>&#160;</p>
        <p><i>Last review date: Jul 31, 2018 </i>
            <MadCap:conditionalText MadCap:conditions="General.Hidden Comment" style="font-style: italic;"> by Hussam Hebbo, Anastasija Datsun</MadCap:conditionalText>
        </p>
    </body>
</html>