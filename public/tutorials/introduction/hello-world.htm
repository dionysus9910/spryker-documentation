<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="" MadCap:conditions="Spryker.DemoShop">
    <head>
    </head>
    <body>
        <h1>Tutorial - Hello World <img src="../../Resources/Images/shoptype/Demoshop.png" /></h1>
        <p MadCap:conditions="General.Hidden Comment">used to be: http://spryker.github.io/challenge/hello-world/</p>
        <h2>Challenge Description</h2>
        <p>Build a <strong>HelloWorld </strong> module in Yves that will render the <code>Hello world!</code> string on the page.</p>
        <h2>Manually building the <strong>HelloWorld</strong> module in Yves</h2>
        <table>
            <col style="width: 26px;" />
            <col />
            <tbody>
                <tr>
                    <td>
                        <p>1.</p>
                    </td>
                    <td>
                        <p>Create a module folder in Yves under <code>src/Pyz/Yves/</code>. This will be the location for all the module  files.</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>2.</p>
                    </td>
                    <td>
                        <p>Create an <code>IndexController</code> (as extension of <code>AbstractController</code>) including an <code>indexAction()</code> action under <code>src/Pyz/Yves/HelloWorld/Controller/</code>. This controller action will be called when URL is requested.</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>3.</p>
                    </td>
                    <td>
                        <p>Create a Twig template in the presentation layer <code>src/Pyz/Yves/HelloWorld/Theme/default/index/index.twig</code>. The template is needed to show information in the browser.</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>4.</p>
                    </td>
                    <td>
                        <p>Create a controller provider for our module  and register URL <code>/hello-world</code> in it. URL Routing gives additional details on doing this.</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>5.</p>
                    </td>
                    <td>
                        <p>Add the controller provider into <code>YvesBootstrap::getControllerProviderStack()</code>. This ensures that the defined controller is correctly routed by Silex.</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>6.</p>
                    </td>
                    <td>
                        <p>Open the newly created page <a href="http://www.de.demoshop.local/hello-world" target="_blank" title="http://www.de.demoshop.local/hello-world" alt="http://www.de.demoshop.local/hello-world">http://www.de.demoshop.local/hello-world</a>.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2> Using Code Generator</h2>
        <p class="info">To save even more time, you can use code generator from development tools shipped with Spryker Code Generator</p>
        <table>
            <col />
            <col />
            <tbody>
                <tr>
                    <td>
                        <p>1.</p>
                    </td>
                    <td>
                        <p>To generate an Yves skeleton of the module  just execute:</p>
                    </td>
                </tr>
            </tbody>
        </table><pre><code class="language-PHP line-numbers">console code:generate:module:yves HelloWorld</code></pre>
        <table>
            <col />
            <col />
            <tbody>
                <tr>
                    <td>
                        <p>2.</p>
                    </td>
                    <td>
                        <p>Check the generated <code>HelloWorldControllerProvider</code>, the Yves route should look like this:</p>
                    </td>
                </tr>
            </tbody>
        </table><pre><code class="language-PHP line-numbers">&lt;?php
$this-&gt;createController('/hello-world', 'hello-world', 'HelloWorld', 'Index', 'index');</code></pre>
        <p>This registers our controller action under <code>/hello-world</code> URL.</p>
        <table>
            <col />
            <col />
            <tbody>
                <tr>
                    <td>
                        <p>3.</p>
                    </td>
                    <td>
                        <p>Change body of <code>IndexController::indexAction</code> method in our module  to return some value to our template:</p>
                    </td>
                </tr>
            </tbody>
        </table><pre><code class="language-PHP line-numbers">&lt;?php
return [
    'helloWorld' =&gt; 'Hello World!'
];</code></pre>
        <table>
            <col />
            <col />
            <tbody>
                <tr>
                    <td>
                        <p>4.</p>
                    </td>
                    <td>
                        <p>Now open the generated <code>index.twig</code> template of our module . Let’s extend the template from the base application layout and render variable <code>helloWorld</code> we are returning in the controller:</p>
                    </td>
                </tr>
            </tbody>
        </table><pre><code class="language-PHP line-numbers">{% extends "@application/layout/layout.twig" %}

{% block title %}
    &lt;h3&gt;{{ helloWorld }}&lt;/h3&gt;
{% endblock %}</code></pre>
        <table>
            <col />
            <col />
            <tbody>
                <tr>
                    <td>
                        <p>5.</p>
                    </td>
                    <td>
                        <p>Add the controller provider into <code>YvesBootstrap::getControllerProviderStack()</code>. This ensures that the defined controller is correctly routed by Silex.</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>6.</p>
                    </td>
                    <td>
                        <p>Now we can test the results. Open <code>/hello-world</code> URL in your browser, you should see “Hello World!” in the page’s header section.</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>7.</p>
                    </td>
                    <td>
                        <p>Optionally, run <code>vendor/bin/console dev:ide:generate-auto-completion</code> to also get IDE type hinting for the new module .</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p>&#160;</p>
        <p><b>See also:</b>
        </p>
        <ul>
            <li><a href="http://documentation.spryker.com/developer-guide.htm">Developer Guide to start developing with Spryker
</a>
            </li>
            <li><a href="http://documentation.spryker.com/yves/yves-url-routing.htm">URL Routing</a>
            </li>
            <li><a href="http://documentation.spryker.com/front-end_developer_guide/demoshop/twig_templates/twig-best-practices.htm">Twig Templating</a>
            </li>
        </ul>
        <p>&#160;</p>
        <p>We value people who contribute to improvement of our documentation:</p>
        <ul>
            <li MadCap:conditions="General.Contributors">Thank you to: <a href="https://github.com/PetarAtanasov">Petar Atanasov</a> for taking the time  to provide us with your feedback (December 2017).</li>
        </ul>
        <p class="note">You too can be credited in our documentation by stating that you wish to be mentioned when you send us feedback. Click "Edit on Github" (top right) to send feedback for this page.</p>
    </body>
</html>