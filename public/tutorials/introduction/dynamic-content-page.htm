<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="">
    <head>
    </head>
    <body>
        <h1>Tutorial - Dynamic Content Page - Legacy Demoshop</h1>
        <p>
            <img src="../../Resources/Images/shoptype/Demoshop.png" />
        </p>
        <p MadCap:conditions="General.Hidden Comment">used to be: http://spryker.github.io/challenge/dynamic-content/</p>
        <h2>Challenge Description</h2>
        <p>Create a CMS page that displays some (marketing) text and a list of personalized products as offers.</p>
        <h2>Challenge Solving Highlights</h2>
        <h4>Static page</h4>
        <p>For creating a CMS page, follow these steps:</p>
        <ol>
            <li>Create a CMS template called <code>personalized_products.twig</code> under <code>src/Pyz/Shared/Cms/Theme/default/template/</code>. The template must contain at least one placeholder that will represent the marketing text.</li>
            <li>Go to Zed UI and open the <a href="http://zed.de.demoshop.local/cms/page" target="_blank" title="CMS pages" alt="CMS pages">CMS Pages</a> backend. Add a CMS page that uses the <code>/my-offers</code> URL and the <code>personalized_products</code> template that we’ve just created.</li>
            <li>Then add the text you would like to show on the static page.</li>
            <li>Activate the page.</li>
            <li>Run the storage collectors to export the static page by running <code>vendor/bin/console collector:storage:export</code> from your command line. You can have a look into Redis from the <a href="http://zed.de.demoshop.local/storage/maintenance/list" target="_blank" title="storage" alt="storage">Storage</a> backend page.</li>
            <li>You can see the page <a href="http://www.de.demoshop.local/my-offers" target="_blank" title="my offers" alt="my offers">here</a>.</li>
        </ol>
        <h4>Personalized Offers</h4>
        <p>To display some personalized product offers, follow the steps below:</p>
        <ol>
            <li>Create a new Yves module called <code>SpecialOffers</code>.</li>
            <li>Create <code>Pyz\Yves\SpecialOffers\Plugin\Provider\SpecialOffersControllerProvider</code> that defines a new route to get the list of offers. The route should accept an integer parameter for the <code>limit</code> of how many offers we’d like to display.</li>
            <li>In order to make the <code>SpecialOffersControllerProvider</code> work, it needs to be registered under <code>Pyz\Yves\Application\YvesBootstrap::registerControllerProviders()</code>.</li>
            <li>Create a controller and a template for the defined route. At this point you should be able to display template you’ve created through the URL of your new route.</li>
            <li>To get products, we’ll need to query Elasticsearch. For querying we can use the <code>Spryker\Client\Search\SearchClient::search()</code> method from the <code>SearchClient</code>. We’ll create <code>Pyz\Client\SpecialOffers\SpecialOffersClient</code> class with <code>getPersonalizedProducts()</code> method that will call the <code>search()</code> of the search client. (Read here about how to implement a client.)</li>
            <li>The <code>search()</code> method requires us to implement <code>Spryker\Client\Search\Dependency\Plugin\QueryInterface</code> that returns an <code>Elastica\Query</code> object. This is the pure representation of our Elasticsearch query. <span>Below</span> you’ll find a code snippet for the full implementation of a query that returns random products based on the session ID, e.g. listed products will be different for every user. (In real life this of course shouldn’t be a random list of products, but should contain some filters based on collected user information instead. For detailed info about the query, check <a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/random-scoring.html" target="_blank" title="random scoring" alt="random scoring">Random scoring</a> documentation page from Elasticsearch.)</li>
            <li>The second parameter of the <code>search()</code> method is a stack of result formatter plugins. For our case it’s enough to provide only an instance of <code>Spryker\Client\Catalog\Plugin\Elasticsearch\ResultFormatter\RawCatalogSearchResultFormatterPlugin</code> that will return only necessary product data from Elasticsearch.</li>
            <li>Returning back to our controller, now we can execute the search request and provide the result as it is for our template.</li>
            <li>In the template we should be able to access and iterate through the <code>products</code> variable (provided by the <code>RawCatalogSearchResultFormatterPlugin</code>) and display the products. Check template snippet below, that uses the catalog template to render products.</li>
            <li>Checking the URL (defined under step 2.) should now show a list of personalized product offers.</li>
        </ol>
        <h4>Putting Everything Together</h4>
        <p>Now that we have a CMS page and can have a list of personalized product offers, we can finish our task by the following steps:</p>
        <ol>
            <li>Open our <code>personalized_products.twig</code> template and place a <code>{{ render() }}</code> method call where you’d like to display the personalized product offer list.</li>
            <li>The <code>render()</code> twig method is provided by Silex (check documentation <a href="https://silex.sensiolabs.org/doc/2.0/cookbook/sub_requests.html#rendering-pages-in-twig-templates" target="_blank" title="Silex documentation" alt="Silex documentation">here</a>). All we need to provide as parameter is a path to our personalized products route and the limit of the list (i.e. <code>{{ render(path('personalized-products', {'limit': 12})) }}</code>). This will create an internal sub-request to any of the paths that can be matched by the application router.</li>
            <li>As the final result you should be able to see the CMS page with the marketing text you defined on the backend, and a limited list of personalized product offers.</li>
        </ol>
        <h4><a name="Snippet"></a>Snippet for Implementing Elasticsearch Query with Personalized (Random) Results</h4>
        <p><code>src/Pyz/Client/SpecialOffers/Plugin/Elasticsearch/Query/PersonalizedProductsQueryPlugin.php</code>
        </p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Code Sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php

namespace Pyz\Client\SpecialOffers\Plugin\Elasticsearch\Query;

use Elastica\Query;
use Elastica\Query\BoolQuery;
use Elastica\Query\FunctionScore;
use Elastica\Query\Match;
use Elastica\Query\MatchAll;
use Generated\Shared\Search\PageIndexMap;
use Pyz\Shared\ProductSearch\ProductSearchConfig;
use Spryker\Client\Search\Dependency\Plugin\QueryInterface;

class PersonalizedProductsQueryPlugin implements QueryInterface
{

    /**
     * @var int
     */
    protected $limit;

    /**
     * @param int $limit
     */
    public function __construct($limit)
    {
        $this-&gt;limit = $limit;
    }

    /**
     * @return \Elastica\Query
     */
    public function getSearchQuery()
    {
        $boolQuery = (new BoolQuery())
            -&gt;addMust((new FunctionScore())
                -&gt;setQuery(new MatchAll())
                -&gt;addFunction('random_score', ['seed' =&gt; session_id()])
                -&gt;setScoreMode('sum'))
            -&gt;addMust((new Match())
                -&gt;setField(PageIndexMap::TYPE, ProductSearchConfig::PRODUCT_ABSTRACT_PAGE_SEARCH_TYPE));

        $query = (new Query())
            -&gt;setSource([PageIndexMap::SEARCH_RESULT_DATA])
            -&gt;setQuery($boolQuery)
            -&gt;setSize($this-&gt;limit);

        return $query;
    }

}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h4><a name="Snippet2"></a>Snippet for Product Offers Template</h4>
        <p><code>src/Pyz/Yves/SpecialOffers/Theme/default/personalized-products/index.twig</code>
        </p><pre><code class="language-PHP line-numbers">&lt;div class="row"&gt;
    {% if products is defined %}
        {% for product in products %}
            &lt;div class="small-12 medium-6 large-4 xlarge-3 columns"&gt;
                {% include "@catalog/catalog/partials/product.twig" with {
                    detailsUrl: product.url,
                    name: product.abstract_name,
                    priceValue: product.price,
                    imageUrl: (product.images|length ? product.images.0.external_url_small : '')
                } %}
            &lt;/div&gt;
        {% endfor %}
    {% endif %}
&lt;/div&gt;</code></pre>
        <p>&#160;</p>
        <p><b>See also:</b>
        </p>
        <ul>
            <li><a href="http://documentation.spryker.com/capabilities/cms/cms_page/content-fields-max-size.htm">CMS Manual</a><![CDATA[
        ]]></li>
            <li><a href="http://documentation.spryker.com/yves/yves-url-routing.htm">URL Routing in Yves</a>
            </li>
            <li><a href="http://documentation.spryker.com/capabilities/search_and_filter/search-4-0.htm">Search</a>
            </li>
            <li><a href="http://documentation.spryker.com/resources_and_developer_tools/cronjob-scheduling.htm">Cronjob Scheduling
</a>
            </li>
        </ul>
    </body>
</html>