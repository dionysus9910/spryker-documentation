<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
    </head>
    <body>
        <h1>Tutorial - Checkout and Step Engine - <MadCap:variable name="General.ProductName" /></h1>
        <p class="info">This tutorial is also available on the Spryker Training web-site. For more information and hands-on exercises, visit the <a href="https://training.spryker.com/courses/developer-bootcamp">Spryker Training</a> web-site.</p>
        <h2>Challenge Description</h2>
        <p>This task helps you to learn how to:</p>
        <ul>
            <li>Work with Checkout and the Step Engine</li>
            <li>Apply and use discounts</li>
            <li>Extend the Spryker core code and functionalities</li>
        </ul>
        <p class="info">In this task we will add a voucher step to the existing out-of-the-box Spryker checkout.</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>1. Add the Voucher Step</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <ol>
                    <li>Before adding the step, you need to define the route for the step. 
					<ul><li>Add a <code>CheckoutPageControllerProvider</code> that extends the core <code>CheckoutPageControllerProvider</code> in <code>src/Pyz/Yves/CheckoutPage/Plugin/Provider</code>.</li><li>Then add the route for the step.</li></ul><p><pre><code class="language-PHP line-numbers">
class CheckoutPageControllerProvider extends SprykerShopCheckoutPageControllerProvider
{
	const CHECKOUT_VOUCHER = 'checkout-voucher';
 
	/**
	 * @param \Silex\Application $app
	 *
	 * @return void
	 */
	protected function defineControllers(Application $app)
	{
		$this-&gt;addCheckoutIndexRoute()
			-&gt;addCustomerStepRoute()
			-&gt;addAddressStepRoute()
			-&gt;addShipmentStepRoute()
			-&gt;addVoucherStepRoute()
			-&gt;addPaymentStepRoute()
			-&gt;addCheckoutSummaryStepRoute()
			-&gt;addPlaceOrderStepRoute()
			-&gt;addCheckoutErrorRoute()
			-&gt;addCheckoutSuccessRoute();
	}
 
	/**
	 * @return $this
	 */
	protected function addVoucherStepRoute(): self
	{
		$this-&gt;createController('/{checkout}/voucher', self::CHECKOUT_VOUCHER, 'CheckoutPage', 'Checkout', 'voucher')
			-&gt;assert('checkout', $this-&gt;getAllowedLocalesPattern() . 'checkout|checkout')
			-&gt;value('checkout', 'checkout')
			-&gt;method('GET|POST');
 
		return $this;
	}
}				
					</code></pre></p></li>
                    <li>Update the <code>getControllerProviderStack()</code> method in <i>YvesBootstrap</i> in <code>src/Yves/ShopApplication</code> to use the new Controller Provider instead of the core one.</li>
                    <li>Next, add the voucher step class inside <code>src/Pyz/Yves/CheckoutPage/Process/Steps</code> and call it <i>VoucherStep</i>. 
						<div class="info"><i>VoucherStep</i> should extend the <b>AbstractBaseStep</b> class from core. 
						<p>As you may notice, the <code>CalculationClient</code> is injected into the class. We will use this client later when we apply the discount, as we need to recalculate the grand total with the applied voucher code.</p></div><p><pre><code class="language-PHP line-numbers">
namespace Pyz\Yves\CheckoutPage\Process\Steps;
 
use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
use Spryker\Yves\StepEngine\Dependency\Step\StepWithBreadcrumbInterface;
use SprykerShop\Yves\CheckoutPage\Dependency\Client\CheckoutPageToCalculationClientInterface;
use SprykerShop\Yves\CheckoutPage\Process\Steps\AbstractBaseStep;
use Symfony\Component\HttpFoundation\Request;
 
class VoucherStep extends AbstractBaseStep implements StepWithBreadcrumbInterface
{
	/**
	 * @var \SprykerShop\Yves\CheckoutPage\Dependency\Client\CheckoutPageToCalculationClientInterface
	 */
	protected $calculationClient;
 
	/**
	 * @param \SprykerShop\Yves\CheckoutPage\Dependency\Client\CheckoutPageToCalculationClientInterface $calculationClient
	 * @param string $stepRoute
	 * @param string $escapeRoute
	 */
	public function __construct(
		CheckoutPageToCalculationClientInterface $calculationClient,
		$stepRoute,
		$escapeRoute
	) {
		parent::__construct($stepRoute, $escapeRoute);
 
		$this-&gt;calculationClient = $calculationClient;
	}
 
	/**
	 * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $quoteTransfer
	 *
	 * @return bool
	 */
	public function preCondition(AbstractTransfer $quoteTransfer)
	{
		return true;
	}
 
	/**
	 * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $quoteTransfer
	 *
	 * @return bool
	 */
	public function requireInput(AbstractTransfer $quoteTransfer)
	{
		return true;
	}
 
	/**
	 * @param \Symfony\Component\HttpFoundation\Request $request
	 * @param \Generated\Shared\Transfer\QuoteTransfer|\Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
	 *
	 * @return \Generated\Shared\Transfer\QuoteTransfer
	 */
	public function execute(Request $request, AbstractTransfer $quoteTransfer)
	{
		return $quoteTransfer;
	}
 
	/**
	 * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
	 *
	 * @return bool
	 */
	public function postCondition(AbstractTransfer $quoteTransfer)
	{
			return true;
	}
 
	/**
	 * @return string
	 */
	public function getBreadcrumbItemTitle()
	{
		return 'Voucher';
	}
 
	/**
	 * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
	 *
	 * @return bool
	 */
	public function isBreadcrumbItemEnabled(AbstractTransfer $dataTransfer)
	{
		return $this-&gt;postCondition($dataTransfer);
	}
 
	/**
	 * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
	 *
	 * @return bool
	 */
	public function isBreadcrumbItemHidden(AbstractTransfer $dataTransfer)
	{
		return !$this-&gt;requireInput($dataTransfer);
	}
}			
						</code></pre></p></li>
                    <li>Now, add the step to the <code>StepFactory</code>. 
					<p>To do so, extend the core <code>StepFactory</code> in <code>src/Pyz/Yves/CheckoutPage/Process</code>.</p><p><pre><code class="language-PHP line-numbers">
namespace Pyz\Yves\CheckoutPage\Process;
 
use Pyz\Yves\CheckoutPage\Plugin\Provider\CheckoutPageControllerProvider;
use Pyz\Yves\CheckoutPage\Process\Steps\VoucherStep;
use Spryker\Yves\StepEngine\Process\StepCollection;
use SprykerShop\Yves\CheckoutPage\Process\StepFactory as SprykerShopStepFactory;
use SprykerShop\Yves\HomePage\Plugin\Provider\HomePageControllerProvider;
 
/**
 * @method \SprykerShop\Yves\CheckoutPage\CheckoutPageConfig getConfig()
 */
class StepFactory extends SprykerShopStepFactory
{
	/**
	 * @return \Spryker\Yves\StepEngine\Process\StepCollectionInterface
	 */
	public function createStepCollection()
	{
		$stepCollection = new StepCollection(
			$this-&gt;getUrlGenerator(),
			CheckoutPageControllerProvider::CHECKOUT_ERROR
		);
 
		$stepCollection
			-&gt;addStep($this-&gt;createEntryStep())
			-&gt;addStep($this-&gt;createCustomerStep())
			-&gt;addStep($this-&gt;createAddressStep())
			-&gt;addStep($this-&gt;createShipmentStep())
			-&gt;addStep($this-&gt;createPaymentStep())
			-&gt;addStep($this-&gt;createVoucherStep())
			-&gt;addStep($this-&gt;createSummaryStep())
			-&gt;addStep($this-&gt;createPlaceOrderStep())
			-&gt;addStep($this-&gt;createSuccessStep());
 
		return $stepCollection;
	}
 
	/**
	 * @return \Pyz\Yves\CheckoutPage\Process\Steps\VoucherStep
	 */
	public function createVoucherStep()
	{
		return new VoucherStep(
			$this-&gt;getCalculationClient(),
			CheckoutPageControllerProvider::CHECKOUT_VOUCHER,
			HomePageControllerProvider::ROUTE_HOME
		);
	}
}
					</code></pre></p></li>
                    <li>To get the step factory to work, you also need to extend the <code>CheckoutPageFactory</code> in order to use the new factory instead of the core one.
					<p><pre><code class="language-PHP line-numbers">
namespace Pyz\Yves\CheckoutPage;
 
use Pyz\Yves\CheckoutPage\Form\FormFactory;
use Pyz\Yves\CheckoutPage\Process\StepFactory;
use SprykerShop\Yves\CheckoutPage\CheckoutPageFactory as SprykerShopCheckoutPageFactory;
 
class CheckoutPageFactory extends SprykerShopCheckoutPageFactory
{
	/**
	 * @return \Pyz\Yves\CheckoutPage\Process\StepFactory
	 */
	 public function createStepFactory()
	 {
		return new StepFactory();
	}
}
					</code></pre></p></li>
                    <li>Finally, extend the <code>CheckoutController</code> in <code>src/Pyz/Yves/CheckoutPage/Controller</code>. 
					<p>Add a controller action and call it <b>voucherAction</b>.</p><p class="info">You can return any string for now, just to make sure that the step works correctly. We will get back to this action once we build the form in the next step.</p><p><pre><code class="language-PHP line-numbers">
namespace Pyz\Yves\CheckoutPage\Controller;
 
use SprykerShop\Yves\CheckoutPage\Controller\CheckoutController as SprykerShopCheckoutController;
use Symfony\Component\HttpFoundation\Request;
 
/**
 * @method \Pyz\Yves\CheckoutPage\CheckoutPageFactory getFactory()
 */
class CheckoutController extends SprykerShopCheckoutController
{
	/**
	 * @param \Symfony\Component\HttpFoundation\Request $request
	 *
	 * @return mixed
	 */
	public function voucherAction(Request $request)
	{
		return 'Hello Voucher Step';
	}
}
					</code></pre></p></li>
                </ol>
                <div class="info">The step is now created: 
				<ul><li>Go to the shop.</li><li>Add any product to the cart.</li><li>Checkout.</li></ul><p>The Voucher step should be working now.</p></div>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>2. Add the Voucher Form</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>Spryker uses Symfony forms as a foundation to build and handle forms. One of the main concepts in Symfony forms is binding form fields with data objects. This helps in setting and getting different data fields directly from/to the form. As Spryker uses transfer objects, they can be directly bound to your forms. </p>
                <p>Let’s build the form and get the customers input for the voucher:</p>
                <ol>
                    <li>Create the form type in <code>src/Pyz/Yves/CheckoutPage/Form/Steps/</code>. Call it <b>VoucherForm</b>.
<p><pre><code class="language-PHP line-numbers">
namespace Pyz\Yves\CheckoutPage\Form\Steps;
 
use Spryker\Yves\Kernel\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Validator\Constraints\NotBlank;
 
class VoucherForm extends AbstractType
{
	const FIELD_ID_VOUCHER_CODE = 'voucher-code';
	const VOUCHER_PROPERTY_PATH = 'voucher';
 
	/**
	 * @return string
	 */
	public function getBlockPrefix()
	{
		return 'voucherForm';
	}
 
	/**
	 * @param \Symfony\Component\Form\FormBuilderInterface $builder
	 * @param array $options
	 *
	 * @return $this
	 */
	public function buildForm(FormBuilderInterface $builder, array $options)
	{
		$builder-&gt;add(self::FIELD_ID_VOUCHER_CODE, TextType::class, [
			'required' =&gt; true,
			'property_path' =&gt; static::VOUCHER_PROPERTY_PATH,
			'constraints' =&gt; [
				new NotBlank(),
			],
			'label' =&gt; false,
		]);
 
		return $this;
	}
}									
</code></pre></p></li>
                    <li>Extend the core's <b>FormFactory</b> in <code>src/Pyz/Yves/CheckoutPage/Form</code> and create the form collection for the <code>VoucherForm</code>.
<p><pre><code class="language-PHP line-numbers">
namespace Pyz\Yves\CheckoutPage\Form;
 
use Pyz\Yves\CheckoutPage\Form\Steps\VoucherForm;
use SprykerShop\Yves\CheckoutPage\Form\FormFactory as SprykerShopFormFactory;
 
class FormFactory extends SprykerShopFormFactory
{
	/**
	 * @return \Spryker\Yves\StepEngine\Form\FormCollectionHandlerInterface
	 */
	public function createVoucherFormCollection()
	{
		return $this-&gt;createFormCollection($this-&gt;getVoucherFormTypes());
	}
 
	/**
	 * @return string[]
	 */
	public function getVoucherFormTypes()
	{
		return [
			$this-&gt;getVoucherForm(),
		];
	}
 
	/**
	 * @return string
	 */
	public function getVoucherForm()
	{
		return VoucherForm::class;
	}
}
</code></pre></p></li>
                    <li>Override the method <code>createCheckoutFromFactory()</code> in <code>CheckoutPageFactory</code> in order to use the new <b>FormFactory</b>.
<p><pre><code class="language-PHP line-numbers">					
namespace Pyz\Yves\CheckoutPage;
 
use Pyz\Yves\CheckoutPage\Form\FormFactory;
use Pyz\Yves\CheckoutPage\Process\StepFactory;
use SprykerShop\Yves\CheckoutPage\CheckoutPageFactory as SprykerShopCheckoutPageFactory;
 
class CheckoutPageFactory extends SprykerShopCheckoutPageFactory
{
	/**
	 * @return \Pyz\Yves\CheckoutPage\Process\StepFactory
	 */
	public function createStepFactory()
	{
		return new StepFactory();
	}
 
	/**
	 * @return \Pyz\Yves\CheckoutPage\Form\FormFactory
	 */
	public function createCheckoutFormFactory()
	{
		return new FormFactory();
	}
}					
</code></pre></p></li>
                    <li>The only missing thing is the twig template for it. 
					<p>Add the twig template for the voucher form in <code>src/Pyz/Yves/CheckoutPage/Theme/default/views/voucher</code>. Call it <b>voucher.twig</b>.</p><p><pre><code class="language-PHP line-numbers">						
{% extends template('page-layout-checkout', 'CheckoutPage') %}
 
{% define data = {
	backUrl: _view.previousStepUrl,
	forms: {
		voucher: _view.voucherForm
	},
 
	title: 'Voucher' | trans
} %}
 
{% block content %}
	{% embed molecule('form') with {
		class: 'box',
		data: {
			form: data.forms.voucher,
			options: {
				attr: {
					id: 'voucher-form'
				}
			},
			submit: {
				enable: true,
				text: 'checkout.step.summary' | trans
			},
			cancel: {
				enable: true,
				url: data.backUrl,
				text: 'general.back.button' | trans
			}
		}
	} only %}
		{% block fields %}
 
		{% endblock %}
	{% endembed %}
{% endblock %}
</code></pre></p></li>
                    <li>Next, let’s bind the form to the transfer object. 
					<p class="info">In the form class <b>VoucherForm</b>, we already added the <i>property_path</i> to the text field with the value 'voucher'.</p><p>To finish the binding, you need to extend the <code>QuoteTransfer</code> in <code>src/Pyz/Shared/Checkout/Transfer</code> and call it <b>checkout.transfer.xml</b>.</p><p>When you add a new schema with exactly the same names for the schema file and the transfer object of the core ones, you are then extending the transfer object.</p><p>Now, add the voucher field in the <i>Quote</i> transfer.</p><p><pre><code class="language-PHP line-numbers">	
&lt;?xml version="1.0"?&gt;
&lt;transfers xmlns="spryker:transfer-01"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="spryker:transfer-01 http://static.spryker.com/transfer-01.xsd"&gt;
 
	&lt;transfer name="Quote"&gt;
		&lt;property name="voucher" type="string"/&gt;
	&lt;/transfer&gt;
 
&lt;/transfers&gt;						
					</code></pre></p></li>
                    <li>Run the command <code>console transfer:generate</code> to generate the new transfer object.</li>
                    <li>Back to the controller, let's use the new form instead of the returned string. 
					<p>Modify the voucher action to create the process for the voucher step and use the form collection.</p><p><pre><code class="language-PHP line-numbers">						
/**
 * @param \Symfony\Component\HttpFoundation\Request $request
 *
 * @return mixed
 */
public function voucherAction(Request $request)
{
	$response = $this-&gt;createStepProcess()-&gt;process(
		$request,
		$this-&gt;getFactory()
			-&gt;createCheckoutFormFactory()
			-&gt;createVoucherFormCollection()
	);
 
	if (!is_array($response)) {
		return $response;
	}
 
	return $this-&gt;view(
		$response,
		$this-&gt;getFactory()-&gt;getCustomerPageWidgetPlugins(),
		'@CheckoutPage/views/voucher/voucher.twig'
	);
}
					</code></pre></p></li>
                </ol>
                <p class="info">The step has a form now and receives the voucher code value from the customer. Go to the <a href="http://www.de.suite.local/">shop</a> and try it out.</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>3. Apply the Voucher in the Step Execution</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <ol>
                    <li>Generate some voucher codes from the Backend Office: 
					<ol><li>Go to the Discount back-end page, create a new discount, and generate some voucher codes.</li><li>Choose the discount type <i>Voucher code</i> and make sure that the Valid to field is in the future.</li><li>Add the rule <i>Sku equals to *</i>, so the voucher code is applied on all products in the shop.</li><li>Save and then go the <b>Voucher codes</b> tab and generate the codes.</li></ol></li>
                    <li>Now, you need to implement the <code>execute()</code> method in the <b>VoucherStep</b> in order to calculate the new grand total after applying the discount.
					<p>To do so, it is time to use the <code>CalculationClient</code>:
					<ol><li>Add the voucher code which you from the form into a discount transfer object.</li><li>The <b>CalculationClient</b> in the checkout works only with the quoteTransfer, thus you need to add the discount transfer back to the quoteTransfer using the method <code>$quoteTransfer→addVoucherDiscount()</code>.</li><li>Finally, call the method <code>recalculate()</code> from the <b>CalculationClient</b> and pass the <b>quoteTransfer</b> as a parameter and the discount should be applied.</li></ol></p><p><pre><code class="language-PHP line-numbers">
/**
 * @param \Symfony\Component\HttpFoundation\Request $request
 * @param \Generated\Shared\Transfer\QuoteTransfer|\Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
 *
 * @return \Generated\Shared\Transfer\QuoteTransfer
 */
public function execute(Request $request, AbstractTransfer $quoteTransfer)
{
	$discountTransfer = new DiscountTransfer();
	$discountTransfer-&gt;setVoucherCode($quoteTransfer-&gt;getVoucher());
	$quoteTransfer-&gt;addVoucherDiscount($discountTransfer);
 
	return $this-&gt;calculationClient-&gt;recalculate($quoteTransfer);
}									
</code></pre></p></li>
                </ol>
                <div class="info">Done and ready for testing! 
				<ol><li>Go to the shop.</li><li>Add any product to cart.</li><li>Go the checkout and enter any of the available voucher codes.</li></ol><p>You should receive a discount on your order.</p></div>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p>&#160;</p>
        <p>&#160;</p>
        <p><i>Last review date: Jul 31, 2018 </i>
            <MadCap:conditionalText MadCap:conditions="General.Hidden Comment" style="font-style: italic;"> by Hussam Hebbo, Anastasija Datsun</MadCap:conditionalText>
        </p>
    </body>
</html>