<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="">
    <head>
    </head>
    <body>
        <h1>Tutorial - Architectural Walkthrough</h1>
        <p MadCap:conditions="General.Hidden Comment">TODO:&#160;Optimize the internal links in this page</p>
        <p MadCap:conditions="General.Hidden Comment">used to be: http://spryker.github.io/onboarding/hello-spryker/</p>
        <p>This is an architecture walkthrough as a coding exercise.</p>
        <h2>Challenge Description</h2>
        <ol>
            <li>Build a <strong>HelloSpryker</strong> module in Zed that will render the <code>Hello Spryker!</code> string, in reverse order, on the screen. The string must be retrieved from the config.</li>
            <li>Build a <strong>HelloSpryker</strong> module in Yves that will render the <code>Hello Spryker!</code> string, in reverse order, on the screen. Yves must communicate with Zed in order to retrieve the string.</li>
            <li>Add Zed persistence layer in <strong>HelloSpryker</strong> module</li>
            <li>Move the functionality that returns a string in reverse order to a new module (<strong>StringFormat</strong>). Use this functionality from the <strong>HelloSpryker</strong> module.</li>
        </ol>
        <h2>Challenge Solving Highlights</h2>
        <h3>1. Building the HelloSpryker Module in Zed</h3>
        <ul>
            <li class="bullet_list">Add the module folder in Zed.</li>
            <li class="bullet_list">Add the config class with a method <code>getString</code> holding the default string <code>'Hello Spryker!'</code>.</li>
            <li class="bullet_list">Add the logic for returning the string reversed under the business layer in <code>/Model</code> sub-folder.</li>
            <li class="bullet_list">Create a business factory under the business layer to create this class.</li>
            <li class="bullet_list">Create a <code>HelloSprykerFacade</code> under the business layer and call the business class here.</li>
            <li class="bullet_list">Create a controller with an <code>indexAction()</code> method that will use the facade.</li>
            <li class="bullet_list">Create the Twig template <code>index.twig</code> under the presentation layer inside a <code>HelloSpryker</code> subfolder.</li>
            <li class="bullet_list">Display the string on the screen, navigate to the URL <code>/hello-spryker/hello-spryker</code> for this.</li>
            <li class="bullet_list">Add the controller in your navigation on the left by providing a <code>navigation.xml</code> file in the Communication folder (see references at the bottom).</li>
            <li class="bullet_list">Run <code>vendor/bin/console application:build-navigation-cache</code> to generate the new navigation tree.</li>
        </ul>
        <h4>Implementation Tips</h4>
        <p>Make sure you facade only delegates and the factory itself creates the HelloSpryker business class including the necessary constructor arguments:</p><pre><code class="language-PHP line-numbers">&lt;?php
return new HelloSpryker($this-&gt;getConfig());</code></pre>
        <p>The facade method should then just call</p><pre><code class="language-PHP line-numbers">&lt;?php
return $this-&gt;getFactory()-&gt;createHelloSpryker()-&gt;getReversedString();</code></pre>
        <p>Make the Config class configurable in a way that you can provide any string via <code>config_default.php</code>. You would use a <code>HelloSprykerConstants</code> class and inside the <code>getString()</code> method you would use <code>$this-&gt;get(HelloSprykerConstants::STRING, 'Hello Spryker!')</code>. The second argument is the default string in case no config has yet been provided. Constants classes are put into the <code>Pyz\Shared\</code> namespace.</p>
        <p>To test if you can use any string via config now, add this to <code>config_default.php</code>, for example:</p><pre><code class="language-PHP line-numbers">&lt;?php
$config[HelloSprykerConstants::STRING] = 'Foo Bar';</code></pre>
        <p>Your <code>index.twig</code> template ideally extends from the Gui layout to have the complete layout included:</p><pre><code class="language-PHP line-numbers">{% extends '@Gui/Layout/layout.twig' %}

{% block content %}
&lt;div class="row"&gt;
    &lt;div class="col-sm-12"&gt;
        {{ reversedString }}
    &lt;/div&gt;
&lt;/div&gt;
{% endblock %}</code></pre>
        <h3>2. Building a <strong>HelloSpryker</strong> Module in Yves</h3>
        <p>Add Yves layer:</p>
        <ul>
            <li class="bullet_list">Add the module folder in Yves.</li>
            <li class="bullet_list">Add controller + action.</li>
            <li class="bullet_list">Create the Twig template under the presentation layer (<code>/HelloSpryker/Theme/default/hello-spryker/index.twig</code>).</li>
            <li class="bullet_list">Add route in the controller provider (for URL <code>/hello-spryker</code>).</li>
            <li class="bullet_list">Register the controller provider in YvesBootstrap.</li>
        </ul>
        <p>Communicate with Zed:</p>
        <ul>
            <li class="bullet_list">Create a <code>hello_spryker.transfer.xml</code> file in <code>Shared/HelloSpryker/Transfer</code> building a <code>HelloSprykerTransfer</code> object which contains a <code>reversedString</code> property.</li>
            <li class="bullet_list">Run <code>vendor/bin/console transfer:generate</code> to generate the class.</li>
            <li class="bullet_list">Create client directory for Zed (<code>/Pyz/Client/HelloSpryker/Zed</code>).</li>
            <li class="bullet_list">Add client and stub (see references at the bottom).</li>
            <li class="bullet_list">Add a <code>HelloSprykerDependencyProvider</code> for Client layer.</li>
            <li class="bullet_list">Add a gateway call in client/stub with an empty transfer object</li>
            <li class="bullet_list">Add a <code>GatewayController</code> with a <code>getReversedStringAction()</code> method in Zed which calls the facade and returns the filled transfer object.</li>
        </ul>
        <h4>Implementation Tips</h4>
        <p>The Yves route you need to set up, can look like this:</p><pre><code class="language-PHP line-numbers">&lt;?php
$this-&gt;createController('/hello-spryker', 'hello-spryker', 'HelloSpryker', 'HelloSpryker', 'index');</code></pre>
        <p>The <code>HelloSprykerStub</code> class must have a constructor argument and property for <code>zedStub</code> which will be passed in from the Client layer factory. The gateway call could look like this:</p><pre><code class="language-PHP line-numbers">&lt;?php
$helloSprykerTransfer = new HelloSprykerTransfer();

return $this-&gt;zedStub-&gt;call(
    '/hello-spryker/gateway/get-reversed-string',
    $helloSprykerTransfer
);</code></pre>
        <p>The dependency provider needs to provide the client to the factory:</p><pre><code class="language-PHP line-numbers">&lt;?php
$container['HelloSpryker client'] = function (Container $container) {
    return $container-&gt;getLocator()-&gt;helloSpryker()-&gt;client();
};</code></pre>
        <p>The GatewayController just populates the passed in transfer object and returns this again:</p><pre><code class="language-PHP line-numbers">&lt;?php
public function getReversedStringAction(HelloSprykerTransfer $helloSprykerTransfer)
{
	$reversedString = $this-&gt;getFacade()-&gt;getReversedString();
	$helloSprykerTransfer-&gt;setReversedString($reversedString);

	return $helloSprykerTransfer;
}</code></pre>
        <p>The Twig template here should extend the main layout:</p><pre><code class="language-PHP line-numbers">{% extends "@application/layout/layout.twig" %}

{% block title %}
    &lt;h3&gt;{{ helloSpryker.reversedString }}&lt;/h3&gt;
{% endblock %}</code></pre>
        <h3>3. Make <strong>HelloSpryker</strong> Module Read from Database</h3>
        <ul>
            <li class="bullet_list">In Zed add a persistence layer and a schema XML file with a very basic table holding the string.</li>
            <li class="bullet_list">Run <code>vendor/bin/console propel:install</code> to generate the table and classes.</li>
            <li class="bullet_list">Also pass the new QueryContainer into the HelloSpryker class as a second constructor dependency.</li>
            <li class="bullet_list">You can populate the database from the config, e.g. in the constructor of the HelloSpryker class.</li>
            <li class="bullet_list">Read inside the Zed business logic from the QueryContainer now instead of config.</li>
        </ul>
        <h4>Implementation Tips</h4>
        <p>The snippet to store our test string could look like this:</p><pre><code class="language-PHP line-numbers">&lt;?php
protected function initDatabaseFromConfig(HelloSprykerConfig $helloSprykerConfig)
{
    $helloSprykerEntity = $this-&gt;helloSprykerQueryContainer-&gt;queryHelloSpryker()-&gt;findOne();
    if (!$helloSprykerEntity) {
        $helloSprykerEntity = new PyzHelloSpryker();
        $helloSprykerEntity-&gt;setString($helloSprykerConfig-&gt;getString());
    } else {
        $helloSprykerEntity-&gt;setString($helloSprykerConfig-&gt;getString());
    }
    $helloSprykerEntity-&gt;save();
}</code></pre>
        <p>It will always update the database according to your config.</p>
        <p>The <code>/Pyz/Zed/HelloSpryker/Persistence/Propel/Schema/pyz_hello_spryker.schema.xml</code> could look like this:</p><pre><code class="language-PHP line-numbers">&lt;?xml version="1.0"?&gt;
&lt;database xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    name="zed" xsi:noNamespaceSchemaLocation="http://static.spryker.com/schema-01.xsd"
    namespace="Orm\Zed\HelloSpryker\Persistence"
    namespaceAutoPackage="false"
    package="src.Orm.Zed.HelloSpryker.Persistence"&gt;

    &lt;table name="pyz_hello_spryker" idMethod="native"&gt;
        &lt;column name="id_hello_spryker" required="true" type="INTEGER" autoIncrement="true" primaryKey="true"/&gt;
        &lt;column name="string" required="true" size="128" type="VARCHAR"/&gt;

        &lt;unique name="pyz_hello_spryker-string"&gt;
            &lt;unique-column name="string"/&gt;
        &lt;/unique&gt;
        &lt;id-method-parameter value="pyz_hello_spryker_pk_seq"/&gt;
    &lt;/table&gt;

&lt;/database&gt;</code></pre>
        <h3>4. <strong>StringFormat</strong> Module</h3>
        <ul>
            <li class="bullet_list">Create the <strong>StringFormat</strong> module in Zed.</li>
            <li class="bullet_list">In the HelloSpryker module, create a dependency provider class and call it <code>HelloSprykerDependencyProvider</code>.</li>
            <li class="bullet_list">Extract the functionality that formats the string and move it to the new module.</li>
            <li class="bullet_list">Create <code>StringFormatFacade</code> class.</li>
            <li class="bullet_list">Provide the business layer dependency to the <strong>HelloSpryker</strong> module and internally use this other facade now.</li>
        </ul>
        <h4>Implementation Tips</h4>
        <ul>
            <li class="bullet_list">The HelloSpryker class will now have a third constructor argument, the provided facade.</li>
            <li class="bullet_list">You can use the transfer object to pass the string between modules.</li>
            <li class="bullet_list">Try to add interfaces for your classes so that the constructor typehints are abstract instead of concrete.</li>
        </ul>
        <h2>More Tips</h2>
        <p>Run <code>vendor/bin/console dev:ide:generate-auto-completion </code>to also get IDE typehinting for the new module for both Yves and Zed.</p>
        <p>Add <code>@method</code> annotations to your classes to get complete IDE type-hinting and clickability:</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php
/**
 * @method \Pyz\Zed\HelloSpryker\Business\HelloSprykerFacade getFacade()
 */
class HelloSprykerController extends AbstractController
{
}

/**
 * @method \Pyz\Zed\HelloSpryker\Business\HelloSprykerBusinessFactory getFactory()
 */
class HelloSprykerFacade extends AbstractFacade
{
}

/**
 * @method \Pyz\Zed\HelloSpryker\HelloSprykerConfig getConfig()
 * @method \Pyz\Zed\HelloSpryker\Persistence\HelloSprykerQueryContainer getQueryContainer()
 */
class HelloSprykerBusinessFactory extends AbstractBusinessFactory
{
}

/**
 * @method \Pyz\Client\HelloSpryker\HelloSprykerFactory getFactory()
 */
class HelloSprykerClient extends AbstractClient
{
}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p>This is useful for all OS internal “locatable” classes.</p>
        <p>&#160;</p>
        <p style="font-weight: bold;">See also:</p>
        <ul>
            <li><a href="../Advanced/t-add-new-bundle.htm">How to Add a New Module
        
</a>
            </li>
            <li><a href="http://documentation.spryker.com/capabilities/navigation/t-add-navigation-zed.htm">How to Add Navigation in Zed</a><![CDATA[
        ]]></li>
            <li><a href="../Advanced/t-transfer-data-yves-zed.htm">Communication Between Yves and Zed
        
</a>
            </li>
        </ul>
    </body>
</html>