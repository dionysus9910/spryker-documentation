<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
    </head>
    <body>
        <h1>Tutorial - OMS and State Machines - <MadCap:variable name="General.ProductName" /></h1>
        <p class="info">This tutorial is also available on the Spryker Training web-site. For more information and hands-on exercises, visit the <a href="https://training.spryker.com/courses/developer-bootcamp">Spryker Training</a> web-site.</p>
        <h2>Challenge Description</h2>
        <p>In this task you will create a full order management process (OMS) using the Spryker state machine and then use it in your shop.</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>1. Create the State Machine Skeleton</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>In this order process, you will use the following states: <i>new</i>, <i>paid</i>, <i>shipped</i>, <i>returned</i>, <i>refunded</i>, <i>unauthorized</i> and <i>closed</i>.</p>
                <p>You will build all the transitions and events between these states as well. The skeleton of Spryker state machines is simply an XML file.</p>
                <ol>
                    <li>Create a new XML file in <i>config/Zed/oms</i> and call it <b>Demo01.xml</b>.</li>
                    <li>Add the <b>Demo01</b> state machine process schema as following:</li>
                    <p><pre><code class="language-PHP line-numbers">
&lt;?xml version="1.0"?&gt;
&lt;statemachine
	xmlns="spryker:oms-01"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="spryker:oms-01 http://static.spryker.com/oms-01.xsd"&gt;
	&lt;!-- Used as example XML for OMS implementation --&gt;
 
	&lt;process name="Demo01" main="true"&gt;
		&lt;states&gt;
		&lt;/states&gt;
 
		&lt;transitions&gt;
		&lt;/transitions&gt;
 
		&lt;events&gt;
		&lt;/events&gt;
	&lt;/process&gt;
&lt;/statemachine&gt;								
					</code></pre>
                    </p>
                    <li>Activate the OMS process in <code class="language-PHP">config_default.php</code> in <i>config/shared</i> by adding the name of the process <i>Demo01</i> to the key <code>[OmsConstants::ACTIVE_PROCESSES]</code>.
					<p><pre><code class="language-PHP line-numbers">
$config[OmsConstants::ACTIVE_PROCESSES] = [
	'Demo01'
];
					</code></pre></p></li>
                    <li>Now, let's go back to the skeleton XML and add the first state. Simply, add a state element with the name.
					<p><pre><code class="language-PHP line-numbers">
&lt;states&gt;
	&lt;state name="new" /&gt;
&lt;/states&gt;					
					</code></pre></p></li>
                    <li>Check the state machine graph while building it.
					<ol><li>Go to the OMS page in the Backend Office, you will see your state machine <b>Demo01</b>.</li><li>Click on it and you will see the graph that represents your XML file. </li><p class="info">Whenever you change the skeleton in the XML file, refresh the page so see the new changes.</p></ol></li>
                    <li>Add the rest of the states to the state machine. Refresh the state machine graph after adding them.
					<p><pre><code class="language-PHP line-numbers">
&lt;states&gt;
	&lt;state name="new" /&gt;
	&lt;state name="paid" /&gt;
	&lt;state name="unauthorized" /&gt;
	&lt;state name="shipped" /&gt;
	&lt;state name="returned" /&gt;
	&lt;state name="refunded" /&gt;
	&lt;state name="closed" /&gt;
&lt;/states&gt;					
					</code></pre></p></li>
                    <li>The next step is to add the transitions with the statuses' events. 
					<p>Every transition has a source, a target, and an optional event. The source and target are simply state names, and the event is the name of the event defined in the events section.</p><p>Let's start with the first transition. Refresh after adding the transition and check the updated state machine.</p><p><pre><code class="language-PHP line-numbers">	
&lt;transitions&gt;
	&lt;transition happy="true" condition="Demo/IsAuthorized"&gt;
		&lt;source&gt;new&lt;/source&gt;
		&lt;target&gt;paid&lt;/target&gt;
	&lt;/transition&gt;
&lt;/transitions&gt;
					</code></pre></p></li>
                    <li>Now, add the event in the events section and in the transition you already have. Refresh the graph afterwards.
					<p><pre><code class="language-PHP line-numbers">
&lt;transitions&gt;
   &lt;transition happy="true" condition="Demo/IsAuthorized"&gt;
        &lt;source&gt;new&lt;/source&gt;
        &lt;target&gt;paid&lt;/target&gt;
        &lt;event&gt;pay&lt;/event&gt;
    &lt;/transition&gt;
&lt;/transitions&gt;
 
&lt;events&gt;
    &lt;event name="pay" onEnter="true" /&gt;
&lt;/events&gt;					
					</code></pre></p></li>
                    <li>Finally, add rest of the transitions and events:
					<p><pre><code class="language-PHP line-numbers">
&lt;transitions&gt;
	&lt;transition&gt;
		&lt;source&gt;new&lt;/source&gt;
		&lt;target&gt;paid&lt;/target&gt;
		&lt;event&gt;pay&lt;/event&gt;
	&lt;/transition&gt;
 
	&lt;transition&gt;
		&lt;source&gt;new&lt;/source&gt;
		&lt;target&gt;unauthorized&lt;/target&gt;
		&lt;event&gt;pay&lt;/event&gt;
	&lt;/transition&gt;
 
	&lt;transition&gt;
		&lt;source&gt;paid&lt;/source&gt;
		&lt;target&gt;shipped&lt;/target&gt;
		&lt;event&gt;ship&lt;/event&gt;
	&lt;/transition&gt;
 
	&lt;transition&gt;
		&lt;source&gt;shipped&lt;/source&gt;
		&lt;target&gt;returned&lt;/target&gt;
		&lt;event&gt;return&lt;/event&gt;
	&lt;/transition&gt;
 
	&lt;transition&gt;
		&lt;source&gt;returned&lt;/source&gt;
		&lt;target&gt;refunded&lt;/target&gt;
		&lt;event&gt;refund&lt;/event&gt;
	&lt;/transition&gt;
 
	&lt;transition&gt;
		&lt;source&gt;shipped&lt;/source&gt;
		&lt;target&gt;closed&lt;/target&gt;
		&lt;event&gt;close&lt;/event&gt;
	&lt;/transition&gt;
 
	&lt;transition&gt;
		&lt;source&gt;refunded&lt;/source&gt;
		&lt;target&gt;closed&lt;/target&gt;
		&lt;event&gt;close after refund&lt;/event&gt;
	&lt;/transition&gt;
&lt;/transitions&gt;
 
&lt;events&gt;
	&lt;event name="pay" onEnter="true" /&gt;
	&lt;event name="ship" manual="true" /&gt;
	&lt;event name="return" manual="true" /&gt;
	&lt;event name="refund" onEnter="true" /&gt;
	&lt;event name="close" timeout="14 days" /&gt;
	&lt;event name="close after refund" onEnter="true" /&gt;
&lt;/events&gt;	
					</code></pre></p></li>
                </ol>
                <p class="info">The skeleton of the order process is now done. Refresh the graph and check your process.</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>2. Add a Command and a Condition to the State Machine</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>Order process usually needs PHP implementations for certain functionalities like calling a payment provider or checking if a payment is authorized or not.</p>
                <p>To do so, Spryker introduces <b>Commands</b> and <b>Conditions</b>:
				<ul><li>Commands are used for any implementation of any functionality used in the process.</li><li>Conditions are used to replace an if-then statement in your process.</li><p>They are both implemented in PHP and injected in the state machine skeleton.</p></ul></p>
                <ol>
                    <li>Add a dummy command to perform the payment. 
					<p class="info">In a real scenario, this command would call a payment provider to authorize the payment.</p><p>A command in the Spryker state machine is added to an event. So add the command <i>Pay</i> to the pay event.
					<pre><code>
&lt;event name="pay" onEnter="true" command="Demo/Pay" /&gt;
</code></pre></p><p class="info">Refresh the graph again. You will see that the command is added with the label <i>not implemented</i>. This means that the PHP implementation is not hooked yet.</p></li>
                    <li>The next step is to add the command and hook it into the skeleton. The command is simply a Spryker plugin connected to the OMS module. 
					<p class="info">For the demo, we will add the command plugin directly to the OMS module. In a real life scenario, you can the plugin in any other module depending on your software design of your shop.</p><p>Add the command plugin in <code>src/Pyz/Zed/Oms/Communication/Plugin/Command/Demo</code> and call it <i>PayCommand</i>.</p><p>As the command is a plugin, it should implement some interface. The interface for the command here is <code>CommandByOrderInterface</code> which has the method <i>run();</i></p><p><pre><code class="language-PHP line-numbers">	
namespace Pyz\Zed\Oms\Communication\Plugin\Command\Demo;
 
use Orm\Zed\Sales\Persistence\SpySalesOrder;
use Spryker\Zed\Oms\Business\Util\ReadOnlyArrayObject;
use Spryker\Zed\Oms\Communication\Plugin\Oms\Command\AbstractCommand;
use Spryker\Zed\Oms\Dependency\Plugin\Command\CommandByOrderInterface;
 
class PayCommand extends AbstractCommand implements CommandByOrderInterface
{
	/**
	 *
	 * Command which is executed per order basis
	 *
	 * @api
	 *
	 * @param \Orm\Zed\Sales\Persistence\SpySalesOrderItem[] $orderItems
	 * @param \Orm\Zed\Sales\Persistence\SpySalesOrder $orderEntity
	 * @param \Spryker\Zed\Oms\Business\Util\ReadOnlyArrayObject $data
	 *
	 * @return array
	 */
	public function run(array $orderItems, SpySalesOrder $orderEntity, ReadOnlyArrayObject $data)
	{
		return [];
	}
}
					</code></pre></p></li>
                    <li>The next step is to hook the command to your state machine using the <code>OmsDependencyProvider</code>. 
					<p>In the <code>OmsDependencyProvider</code>, there is a method called <code>provideBusinessLayerDependencies</code>.</p><p>Add your new command to the command collection inside the container and use the same command name you have used in the XML skeleton like this:</p><p><pre><code class="language-PHP line-numbers">
/**
 * @param \Spryker\Zed\Kernel\Container $container
 *
 * @return \Spryker\Zed\Kernel\Container
 */
public function provideBusinessLayerDependencies(Container $container)
{
	$container = parent::provideBusinessLayerDependencies($container);
 
	$container-&gt;extend(self::COMMAND_PLUGINS, function (CommandCollectionInterface $commandCollection) {
		$commandCollection-&gt;add(new PayCommand(), 'Demo/Pay');
 
		return $commandCollection;
	});
 
	return $container;
}
					</code></pre></p><p class="info">Refresh the graph. You should not see the <i>not implemented</i> label anymore meaning that the state machine  recognizes the command.</p></li>
                    <li>The next step is to add the condition in the same way but using the <code>ConditionInterface</code> interface for the plugin instead of the command one. The state machine engine recognizes where to move next using the event name. In this case, the transitions <i>paid-&gt;shipped</i> and <i>paid-&gt;unauthorized</i> should use the same event name with a condition on one of the transitions. 
					<p class="info">The machine then will examine the condition, if it returns true then go to shipped state, otherwise go to unauthorized.</p><p>The skeleton will look like this:
<pre><code class="language-PHP line-numbers">
&lt;transition condition="Demo/IsAuthorized"&gt;
	&lt;source&gt;new&lt;/source&gt;
	&lt;target&gt;paid&lt;/target&gt;
	&lt;event&gt;pay&lt;/event&gt;
&lt;/transition&gt;
 
&lt;transition&gt;
	&lt;source&gt;new&lt;/source&gt;
	&lt;target&gt;unauthorized&lt;/target&gt;
	&lt;event&gt;pay&lt;/event&gt;
&lt;/transition&gt;									
</code></pre></p><p>The condition plugin:
<pre><code class="language-PHP line-numbers">
namespace Pyz\Zed\Oms\Communication\Plugin\Condition\Demo;
 
use Orm\Zed\Sales\Persistence\SpySalesOrderItem;
use Spryker\Zed\Oms\Communication\Plugin\Oms\Condition\AbstractCondition;
use Spryker\Zed\Oms\Dependency\Plugin\Condition\ConditionInterface;
 
class IsAuthorizedCondition extends AbstractCondition implements ConditionInterface
{
	/**
	 * @param \Orm\Zed\Sales\Persistence\SpySalesOrderItem $orderItem
	 *
	 * @return bool
	 */
	public function check(SpySalesOrderItem $orderItem)
	{
			return true;
	}
}							
</code></pre></p><p>And the <code>OmsDependencyProvider</code>:
<pre><code class="language-PHP line-numbers">		
/**
 * @param \Spryker\Zed\Kernel\Container $container
 *
 * @return \Spryker\Zed\Kernel\Container
 */
public function provideBusinessLayerDependencies(Container $container)
{
	$container = parent::provideBusinessLayerDependencies($container);
	$container-&gt;extend(self::COMMAND_PLUGINS, function (CommandCollectionInterface $commandCollection) {
		$commandCollection-&gt;add(new PayCommand(), 'Demo/Pay');
 
		return $commandCollection;
	});
 
	$container-&gt;extend(self::CONDITION_PLUGINS, function (ConditionCollectionInterface $conditionCollection) {
			$conditionCollection-&gt;add(new IsAuthorizedCondition(), 'Demo/IsAuthorized');
 
			return $conditionCollection;
	});
 
	return $container;
}
</code></pre></p></li>
                </ol>
                <p class="info">The order process for your shop is done. Refresh the graph and check it out.</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>3. Use the State Machine for Your Orders</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>The final step is to use the state machine by hooking it into the checkout.</p>
                <p>To do so, open the configuration file <code>config/Shared/config_default.php</code> and make the invoice payment method use the <i>Demo01</i> process.
				<pre><code>
$config[SalesConstants::PAYMENT_METHOD_STATEMACHINE_MAPPING] = [
	DummyPaymentConfig::PAYMENT_METHOD_INVOICE =&gt; 'Demo01',
];							
				</code></pre></p>
                <p>That's it! Your process should be working now.</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>4. Test the State Machine</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>You have just built a new order process. To test it, do the following:</p>
                <ol>
                    <li>Go to the <a href="http://www.de.suite.local/">shop</a>, chose a product, add it to cart, and checkout using the Invoice payment method.</li>
                    <li>Open the <a href="http://zed.de.demoshop.local/sales">orders page</a> in Zed UI and then open your order. 
                        <p class="info">This order is now applying the process you have defined in the state machine. </p></li>
                    <li>You will notices that there is a button next to your order called <b>ship</b>, this one triggers the manual event ship.</li>
                    <li>You can click on the last state name under the state column to see what the current state for a specific item is.
						<p class="info"> The current state has a yellowish background color.</p></li>
                    <li>Click on ship to move the item into the next state.</li>
                    <li>Click again on the last state name and check the current state.
					<p class="tip">You can keep moving the item until the order is closed.</p></li>
                </ol>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Nice Addition</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>Along with the nice representation of the state machine as a graph, Spryker provides a flag called <b>happy</b>.</p>
                <p>This flags add green arrows on the transitions in order to define the happy path of an order item.</p>
                <p>To add this flag, just write <code>happy = true</code> on the transitions that are part of your process happy path and refresh the graph.</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p>&#160;</p>
        <p>&#160;</p>
        <p><i>Last review date: Jul 20, 2018 </i>
            <MadCap:conditionalText MadCap:conditions="General.Hidden Comment" style="font-style: italic;"> by Anastasija Datsun</MadCap:conditionalText>
        </p>
    </body>
</html>