<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="">
    <head>
    </head>
    <body>
        <h1>HowTo - Extend a Core Module That is Used by Another</h1>
        <p class="info">This topic describes how to extend a core module that is used by another core module.

</p>
        <p>Extra consideration must be taken when extending core modules that are already in use by another module. </p>
        <p>In the following example we will extend the <code>Cart</code> -&gt; <code>Calculation</code> modules.

</p>
        <h2>Step 1:&#160;Modify the Interface</h2>
        <p>Add a <code>foo()</code> method to <code>CalculationFacade</code> in the project level and call it from the cart-module. </p>
        <p>The <code>CalculationFacade</code> needs to implement the <code>CartToCalculationInterface</code> because this interface is used in the Cart-module. </p>
        <p>You can also add your own interface as follows:</p>
<pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Zed\Cart\Dependency\Facade;

use Spryker\Zed\Cart\Dependency\Facade\CartToCalculationInterface as SprykerCartToCalculationInterface;

interface CartToCalculationInterface extends SprykerCartToCalculationInterface
{
    public function foo();
}</code></pre>
        <h2>Step 2: Add the New Method To the Interface</h2>
        <p>The interface needs to extend the one from core.</p><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Zed\Calculation\Business;

use Pyz\Zed\Cart\Dependency\Facade\CartToCalculationInterface;
use Spryker\Zed\Calculation\Business\CalculationFacade as SprykerCalculationFacade;

class CalculationFacade extends SprykerCalculationFacade implements CartToCalculationInterface
{
    public function foo()
    {
        die('&lt;pre&gt;&lt;b&gt;'.print_r('!!', true).'&lt;/b&gt;'.PHP_EOL.__CLASS__.' '.__LINE__);
    }

}</code></pre>

        <h2>Step 3: Remove the Bridge</h2>
        <p>In the Cart module's dependency provider, remove the bridge to directly use the facade.</p><pre><code class="language-PHP line-numbers">class CartDependencyProvider extends SprykerCartDependencyProvider
{

public function provideBusinessLayerDependencies(Container $container)
{
	self::provideBusinessLayerDependencies($container);

	$container[self::FACADE_CALCULATION] = function (Container $container) {
		return $container-&gt;getLocator()-&gt;calculation()-&gt;facade();
	};
}</code></pre>
=======
        <h2>

Step 2: Add the New Method To the Interface</h2>
        <p>The interface needs to extend the one from core.</p><pre><code class="language-PHP line-numbers">

&lt;?php
namespace Pyz\Zed\Cart\Dependency\Facade;

use Spryker\Zed\Cart\Dependency\Facade\CartToCalculationInterface as SprykerCartToCalculationInterface;

interface CartToCalculationInterface extends SprykerCartToCalculationInterface
{
    public function foo();
}</code></pre>
        <h2>

Step 3: Remove the Bridge</h2>
        <p>In the Cart module's dependency provider, remove the bridge to directly use the facade.</p><pre><code class="language-PHP line-numbers">
	class CartDependencyProvider extends SprykerCartDependencyProvider
	{

		public function provideBusinessLayerDependencies(Container $container): Container
		{
			$container = parent::provideBusinessLayerDependencies($container);

			$container = $this->addCalculationFacade($container);

			return $container;
		}

		protected function addCalculationFacade(Container $container): Container
		{
			$container[static::FACADE_CALCULATION] = function (Container $container) {
				return $container->getLocator()->calculation()->facade();
			};

			return $container;
		}
		</code></pre>

        <p class="important">
Bridges are for core-level only. If you use them at the project-level, you are doing it wrong!
</p>
        <p class="info">
The described case is only practical when you are “between” two core-bundles and you want to make it right. For you own modules, use the general module-interface (e.g. <code>MyModuleInterface</code>).</p>
    </body>
</html>