<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="">
    <head>
    </head>
    <body>
        <h1>HowTo - Setup Spryker with MySQL</h1>
        <p>Spryker supports MySQL database and for installing it with this database, follow these instructions to adjust the configuration.</p>
        <h2>MySQL Version</h2>
        <p>Currently Spryker works only with MySQL version 5.7 or higher.</p>
        <h2> Adjusting Spryker to Run with MySQL</h2>
        <p>
    For running the Spryker Demoshop with MySQL, it is necessary to adjust some parts in our configs:
    </p>
        <p>
            <ol>
                <li> Go to <code>config/Shared/config_default.php</code> and modify the database configuration:</li><pre><code class="language-PHP line-numbers">
    $config[PropelConstants::ZED_DB_PORT] = 3306;
    $config[PropelConstants::ZED_DB_ENGINE] = $config[PropelConstants::ZED_DB_ENGINE_MYSQL];
    $config[PropelQueryBuilderConstants::ZED_DB_ENGINE] = $config[PropelConstants::ZED_DB_ENGINE_MYSQL];
    </code></pre>
                <li>Go to <code>deploy/setup/params.sh</code> and modify <code>DATABASE_DEFAULT_ENGINE</code> to MySQL:</li><pre><code class="language-PHP line-numbers">
    DATABASE_DEFAULT_ENGINE='mysql'
    </code></pre>
                <li>That's it, now run <code>`./setup -i`</code> to install Spryker with MySQL.</li>
            </ol>
        </p>
        <h2>Demoshop Collectors</h2>
        <p>Spryker Demoshop ships with set of collectors. Make sure you have all MySQLcollectors in <code>`CollectorConfig.php`</code> :</p><pre><code class="language-PHP line-numbers">
    public function getStoragePdoQueryAdapterClassNames($dbEngineName)
    {
        $data = [
            'MySql' =&gt; [
                'ProductCollectorQuery' =&gt; MySqlProductAbstractCollectorQuery::class,
                'ProductConcreteCollectorQuery' =&gt; MySqlProductConcreteCollectorQuery::class,
                'CategoryNodeCollectorQuery' =&gt; MySqlStorageCategoryNodeCollectorQuery::class,
                'NavigationCollectorQuery' =&gt; MySqlNavigationCollectorQuery::class,
                'UrlCollectorQuery' =&gt; MySqlUrlCollectorQuery::class,
                'ProductOptionCollectorQuery' =&gt; MySqlProductOptionCollectorQuery::class,
            ],
            'PostgreSql' =&gt; [
                ...
            ],
        ];

        ...
    }

    public function getSearchPdoQueryAdapterClassNames($dbEngineName)
    {
        $data = [
            'MySql' =&gt; [
                'ProductCollectorQuery' =&gt; MySqlSearchProductCollector::class,
                'CategoryNodeCollectorQuery' =&gt; MySqlSearchCategoryNodeCollectorQuery::class,
            ],
            'PostgreSql' =&gt; [
                ...
            ],
        ];

        ...
    }
    </code></pre>
        <h2>MySQL GroupBy Setting</h2>
        <p>In some MySQL servers there is <code>`ONLY_FULL_GROUP_BY`</code> option which forces all columns to be present in group_by. This option should be removed from
        your configurations of MySQL:
        </p>
        <p><b>Wrong setting</b>:<pre><code class="language-PHP line-numbers">
            [mysqld]

            # server mode
            sql-mode = STRICT_ALL_TABLES,ONLY_FULL_GROUP_BY</code></pre></p>
        <p><b>Correct setting:</b><pre xml:space="preserve"><code class="bash">
            [mysqld]

            # server mode
            sql-mode = STRICT_ALL_TABLES</code></pre>
        </p>
        <p>&#160;</p>
        <p><![CDATA[
		]]><i>Last review date: Sep 20, 2017</i><MadCap:conditionalText MadCap:conditions="General.Hidden Comment">by Ehsan Zanjani
</MadCap:conditionalText><![CDATA[    ]]></p>
    </body>
</html>