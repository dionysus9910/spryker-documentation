<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="" MadCap:conditions="Spryker.B2B,Spryker.B2C,Spryker.DemoShop">
    <head>
    </head>
    <body>
        <h1>HowTo - Implement Invoice Payment Back End <img src="../../../Resources/Images/shoptype/B2B_Shop.png" /> <img src="../../../Resources/Images/shoptype/B2C_Shop.png" /> <img src="../../../Resources/Images/shoptype/Demoshop.png" /></h1>
        <h2>Checkout Plugins
</h2>
        <p>To integrate the invoice payment method into the checkout, we need to provide implementations for these 2 plugins:</p>
        <ul>
            <li class="bullet_list"><![CDATA[

]]><var>CheckoutPreCondition</var> </li>
            <li class="bullet_list"><var>PaymentSaveOrder</var> </li>
        </ul>
        <p>Perform the following procedure:</p>
        <ol>
            <li>Add the following 2 plugins in Zed, inside the <var>Communication/Plugin/Checkout/</var> folder of the new added module.
			<MadCap:dropDown><MadCap:dropDownHead><MadCap:dropDownHotspot><p>InvoicePreCheckPlugin</p></MadCap:dropDownHotspot></MadCap:dropDownHead><MadCap:dropDownBody><pre xml:space="preserve"><code class="language-PHP line-numbers">&lt;?php

namespace Pyz\Zed\PaymentMethods\Communication\Plugin\Checkout;

use Generated\Shared\Transfer\CheckoutResponseTransfer;
use Generated\Shared\Transfer\QuoteTransfer;
use Spryker\Zed\Kernel\Communication\AbstractPlugin;
use Spryker\Zed\Payment\Dependency\Plugin\Checkout\CheckoutPreCheckPluginInterface;


class InvoicePreCheckPlugin extends AbstractPlugin implements CheckoutPreCheckPluginInterface
{

    /**
     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
     * @param \Generated\Shared\Transfer\CheckoutResponseTransfer $checkoutResponseTransfer
     *
     * @return \Generated\Shared\Transfer\CheckoutResponseTransfer
     */
    public function checkCondition(QuoteTransfer $quoteTransfer, CheckoutResponseTransfer $checkoutResponseTransfer)
    {
        return $checkoutResponseTransfer;
    }

}</code></pre></MadCap:dropDownBody></MadCap:dropDown><MadCap:dropDown><MadCap:dropDownHead><MadCap:dropDownHotspot><p>InvoiceSaveOrderPlugin</p></MadCap:dropDownHotspot></MadCap:dropDownHead><MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php

namespace Pyz\Zed\PaymentMethods\Communication\Plugin\Checkout;

use Generated\Shared\Transfer\CheckoutResponseTransfer;
use Generated\Shared\Transfer\QuoteTransfer;
use Spryker\Zed\Kernel\Communication\AbstractPlugin;
use Spryker\Zed\Payment\Dependency\Plugin\Checkout\CheckoutSaveOrderPluginInterface;

/**
 * @method \Pyz\Zed\PaymentMethods\Business\PaymentMethodsFacade getFacade()
 */
class InvoiceSaveOrderPlugin extends AbstractPlugin implements CheckoutSaveOrderPluginInterface
{

    /**
     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
     * @param \Generated\Shared\Transfer\CheckoutResponseTransfer $checkoutResponseTransfer
     *
     * @return void
     */
    public function saveOrder(QuoteTransfer $quoteTransfer, CheckoutResponseTransfer $checkoutResponseTransfer)
    {

    }
}</code></pre></MadCap:dropDownBody></MadCap:dropDown></li>
            <li>Next, inject these 2 plugins iin the <var>Payment</var> module by creating a <var>PaymentDependencyInjector</var> under <var>Dependency/Injector/</var> folder:
<MadCap:dropDown><MadCap:dropDownHead><MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot></MadCap:dropDownHead><MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Zed\PaymentMethods\Dependency\Injector;

use Pyz\Zed\PaymentMethods\Communication\Plugin\Checkout\InvoicePreCheckPlugin;
use Pyz\Zed\PaymentMethods\Communication\Plugin\Checkout\InvoiceSaveOrderPlugin;
use Spryker\Zed\Kernel\Container;
use Pyz\Shared\PaymentMethods\PaymentMethodsConstants;
use Spryker\Zed\Kernel\Dependency\Injector\AbstractDependencyInjector;
use Spryker\Zed\Payment\Dependency\Plugin\Checkout\CheckoutPluginCollection;
use Spryker\Zed\Payment\PaymentDependencyProvider;

class PaymentDependencyInjector extends AbstractDependencyInjector
{

    /**
     * @param \Spryker\Zed\Kernel\Container $container
     *
     * @return \Spryker\Zed\Kernel\Container
     */
    public function injectBusinessLayerDependencies(Container $container)
    {
        $container = $this-&gt;injectPaymentPlugins($container);

        return $container;
    }

    /**
     * @param \Spryker\Zed\Kernel\Container $container
     *
     * @return \Spryker\Zed\Kernel\Container
     */
    protected function injectPaymentPlugins(Container $container)
    {
        $container-&gt;extend(PaymentDependencyProvider::CHECKOUT_PLUGINS, function (CheckoutPluginCollection $pluginCollection) {
            $pluginCollection-&gt;add(new InvoicePreCheckPlugin(), PaymentMethodsConstants::PROVIDER, PaymentDependencyProvider::CHECKOUT_PRE_CHECK_PLUGINS);
            $pluginCollection-&gt;add(new InvoiceSaveOrderPlugin(), PaymentMethodsConstants::PROVIDER, PaymentDependencyProvider::CHECKOUT_ORDER_SAVER_PLUGINS);

            return $pluginCollection;
        });

        return $container;
    }

}</code></pre></MadCap:dropDownBody></MadCap:dropDown></li>
        </ol>
        <h2>State Machine
</h2>
        <p>
Once the preceding procedures are completed, we’ll need to design a state machine. This state machine is dedicated for processing orders that use direct debit as a payment type:
</p>
        <ol>
            <li>Add the <var>Invoice.xml</var> file inside the <var>config/Zed/oms/</var> folder, with the following content:
			<MadCap:dropDown><MadCap:dropDownHead><MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot></MadCap:dropDownHead><MadCap:dropDownBody><pre><code class="language-XML line-numbers">&lt;?xml version="1.0"?&gt;
&lt;statemachine
    xmlns="spryker:oms-01"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="spryker:oms-01 http://static.spryker.com/oms-01.xsd"&gt;

    &lt;process name="Invoice" main="true"&gt;
        &lt;states&gt;
            &lt;state name="new" reserved="true"/&gt;
            &lt;state name="invoice created"/&gt;
            &lt;state name="invoice sent" /&gt;
            &lt;state name="order exported" /&gt;
            &lt;state name="order shipped" /&gt;
            &lt;state name="waiting for payment" /&gt;
            &lt;state name="payment received" /&gt;
            &lt;state name="reminder I sent" /&gt;
            &lt;state name="reminder II sent" /&gt;
            &lt;state name="dunning process started" /&gt;
            &lt;state name="ready for return" /&gt;
            &lt;state name="completed" /&gt;
        &lt;/states&gt;

        &lt;transitions&gt;
            &lt;transition&gt;
                &lt;source&gt;new&lt;/source&gt;
                &lt;target&gt;invoice created&lt;/target&gt;
                &lt;event&gt;create invoice&lt;/event&gt;
            &lt;/transition&gt;

            &lt;transition&gt;
                &lt;source&gt;invoice created&lt;/source&gt;
                &lt;target&gt;invoice sent&lt;/target&gt;
                &lt;event&gt;send invoice&lt;/event&gt;
            &lt;/transition&gt;

            &lt;transition&gt;
                &lt;source&gt;invoice sent&lt;/source&gt;
                &lt;target&gt;order exported&lt;/target&gt;
                &lt;event&gt;export order&lt;/event&gt;
            &lt;/transition&gt;

            &lt;transition&gt;
                &lt;source&gt;order exported&lt;/source&gt;
                &lt;target&gt;order shipped&lt;/target&gt;
                &lt;event&gt;ship order&lt;/event&gt;
            &lt;/transition&gt;

            &lt;transition&gt;
                &lt;source&gt;order shipped&lt;/source&gt;
                &lt;target&gt;waiting for payment&lt;/target&gt;
                &lt;event&gt;waiting for payment&lt;/event&gt;
            &lt;/transition&gt;

            &lt;transition&gt;
                &lt;source&gt;waiting for payment&lt;/source&gt;
                &lt;target&gt;reminder I sent&lt;/target&gt;
                &lt;event&gt;payment not received&lt;/event&gt;
            &lt;/transition&gt;

            &lt;transition&gt;
                &lt;source&gt;waiting for payment&lt;/source&gt;
                &lt;target&gt;payment received&lt;/target&gt;
                &lt;event&gt;payment received&lt;/event&gt;
            &lt;/transition&gt;

            &lt;transition&gt;
                &lt;source&gt;reminder I sent&lt;/source&gt;
                &lt;target&gt;reminder II sent&lt;/target&gt;
                &lt;event&gt;payment not received&lt;/event&gt;
            &lt;/transition&gt;

            &lt;transition&gt;
                &lt;source&gt;reminder I sent&lt;/source&gt;
                &lt;target&gt;payment received&lt;/target&gt;
                &lt;event&gt;payment received&lt;/event&gt;
            &lt;/transition&gt;

            &lt;transition&gt;
                &lt;source&gt;reminder II sent&lt;/source&gt;
                &lt;target&gt;dunning process started&lt;/target&gt;
                &lt;event&gt;payment not received&lt;/event&gt;
            &lt;/transition&gt;

            &lt;transition&gt;
                &lt;source&gt;reminder II sent&lt;/source&gt;
                &lt;target&gt;payment received&lt;/target&gt;
                &lt;event&gt;payment received&lt;/event&gt;
            &lt;/transition&gt;

            &lt;transition&gt;
                &lt;source&gt;dunning process started&lt;/source&gt;
                &lt;target&gt;payment received&lt;/target&gt;
                &lt;event&gt;payment received&lt;/event&gt;
            &lt;/transition&gt;

            &lt;transition&gt;
                &lt;source&gt;payment received&lt;/source&gt;
                &lt;target&gt;ready for return&lt;/target&gt;
                &lt;event&gt;ready for return&lt;/event&gt;
            &lt;/transition&gt;

            &lt;transition&gt;
                &lt;source&gt;ready for return&lt;/source&gt;
                &lt;target&gt;completed&lt;/target&gt;
                &lt;event&gt;item not returned&lt;/event&gt;
            &lt;/transition&gt;

        &lt;/transitions&gt;

        &lt;events&gt;
            &lt;event name="create invoice" onEnter="true" /&gt;
            &lt;event name="send invoice" onEnter="true" /&gt;
            &lt;event name="export order" onEnter="true" /&gt;
            &lt;event name="ship order" manual="true" /&gt;
            &lt;event name="waiting for payment" onEnter="true" /&gt;
            &lt;event name="payment not received" timeout="1hour" /&gt;
            &lt;event name="payment received" manual="true" /&gt;
            &lt;event name="ready for return"  onEnter="true" /&gt;
            &lt;event name="item not returned" timeout="14days" /&gt;
        &lt;/events&gt;
    &lt;/process&gt;

&lt;/statemachine&gt;
</code></pre></MadCap:dropDownBody></MadCap:dropDown></li>
            <li>Add this new state machine to <var>OmsConfig</var>:
			<pre xml:space="preserve"><code class="language-PHP line-numbers">&lt;?php

    const ORDER_PROCESS_DIRECTDEBIT = 'DirectDebit';

     /**
     * @return array
     */
    public function getActiveProcesses()
    {
        return [
            //..
            static::ORDER_PROCESS_DIRECTDEBIT,
        ];
    }</code></pre></li>
            <li>
                <p>Link the invoice state machine to process the orders submitted with the payment method we’re implementing.

</p>
                <p>Add this configuration in the <var>SalesConfig class</var>:</p><pre><code class="language-XML line-numbers">/**
     * @var array
     */
    protected static $stateMachineMapper = [
        //..
        PaymentMethodsConstants::PAYMENT_INVOICE_FORM_PROPERTY_PATH =&gt; OmsConfig::ORDER_PROCESS_INVOICE,
    ];</code></pre>
            </li>
        </ol>
    </body>
</html>