<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
    </head>
    <body>
        <h1>HowTo - Setup Stores with Multiple Locales</h1>
        <p class="info"><strong>Multiple Locales</strong><![CDATA[

			]]><br />This article describes the steps that you need to consider when you have to setup stores with multiple locales.
		</p>
        <h2>Configure Locales for Store
		</h2>
        <p>The stores configuration can be found in the <var>config/Shared/stores.php</var> file. 

		</p>
        <p>For each store you can define a set of locales; the first locale is the default .

		</p><pre><code class="language-PHP line-numbers">
&lt;?php
'locales' =&gt; 				
[
// first entry is default
	'en' =&gt; 'en_US',
	'de' =&gt; 'de_DE',
]
		</code></pre>
        <p>In the example above, the <var>en</var> key is associated with the <var>en_US</var> locale.

		</p>
        <h2>URL Routing for Stores with Multiple Locales
		</h2>
        <p>In Yves, the key for the selected locale is contained in the URL; if no key is contained in the URL, then the default locale is considered as the current one.
<div class="example">
In Demoshop, for listing the current content of the cart, the following URLs are routed to the same controller and action:
<table style="width: 100%;"><col /><col /><tbody><tr><td>URL	</td><td>Locale
</td></tr><tr><td>http://www.de.demoshop.local/cart</td><td>en_US</td></tr><tr><td>http://www.de.demoshop.local/de/cart</td><td>de_DE</td></tr><tr><td>http://www.de.demoshop.local/en/cart</td><td>en_US</td></tr></tbody></table></div></p>
        <h3>Routing the URLs
		</h3>
        <p>For URL routing, when defining the controllers in your controller provider, you must include the allowed locales for the application. The allowed locales pattern can be retrieved using the <var>getAllowedLocalesPattern</var> from the base class of the controller provider (<var>AbstractYvesControllerProvider</var>).

		</p><pre><code class="language-PHP line-numbers">
&lt;?php
	$allowedLocalesPattern = $this-&gt;getAllowedLocalesPattern();

	$this-&gt;createGetController('/{cart}', static::ROUTE_CART, 'Cart', 'Cart')
		-&gt;assert('cart', $allowedLocalesPattern . 'cart|cart')
		-&gt;value('cart', 'cart');
		</code></pre>
        <h2>Products with Localized Attributes
		</h2>
        <p>The details of the abstract products are stored localized in the <var>spy_product_abstract_localized_attributes</var> table. For each abstract product there is an entry in this table that corresponds to each locale, containing the associated attributes for the defined locale
		</p>
        <p>Similar, the details of the concrete products are kept localized in the <var>spy_product_localized_attributes</var> table.

		</p>
        <p>The localized attributes are loaded in the key-value data storage by the Collectors, so that the details can be rendered in Yves according to the selected locale.

		</p>
        <p>The following details are stored localized in the Demoshop, for both abstract and concrete products:

		</p>
        <ul>
            <li class="bullet_list">name
			</li>
            <li class="bullet_list">short description
			</li>
            <li class="bullet_list">long description
			</li>
        </ul>
        <h3>Importing products with localized attributes

		</h3>
        <p>When importing product data in your application you need to consider the list of locales that are defined for the store.

		</p>
        <p>The CSV file containing the product data that needs to be imported must contain the name of the product for each locale:

		</p>
        <ul>
            <li class="bullet_list"><var>name.en_US</var>, <var>name.de_DE</var><![CDATA[
			]]></li>
        </ul>
        <p>The CSV file that contains the attributes for the products that need to be imported must contain the short and long description for each locale :
		</p>
        <p>
			short_description.en_US, short_description.de_DE
		</p>
        <p>long_description.en_US, long_description.de_DE
		</p>
        <h2>Categories with Localized Attributes
		</h2>
        <p>The details of the categories are kept in the <var>spy_category_attribute</var>. For each category defined in the <var>spy_category</var> table there is an entry for each defined locale containing the details of the category localized.

		</p>
        <p>The attributes are loaded in the key-value data storage by the Collectors, so that the details can be rendered in Yves according to the selected locale.

		</p>
        <p>The following category details are stored localized:

		</p>
        <ul>
            <li class="bullet_list">meta_title
			</li>
            <li class="bullet_list">meta_description
			</li>
            <li class="bullet_list">category_image_name
			</li>
        </ul>
        <h3>Importing categories with localized attributes
		</h3>
        <p>The product categories are imported through the Importer.

		</p>
        <p>Similar to importing product data, you need to consider each locale defined in the application when importing the attributes for the categories.

		</p>
        <p>The CSV file containing the product data that needs to be imported must contain the name of the product for each locale:

		</p>
        <p>category_name.en_US, category_name.de_DE
		</p>
        <p>low_pic.en_US, low_pic.de_DE
		</p>
        <p>category_description.en_US, category_description.de_DE
		</p>
        <h2>Importing CMS Blocks and Pages
		</h2>
        <p>The CMS blocks and pages are able to render localized content through the use of placeholders. The placeholders have a glossary key associated; at runtime, the placeholder is replaced with the glossary value that corresponds to the current locale. Also, a static page will have a distinct URL for each locale defined in the application.

		
		</p>
        <p>The CMS blocks and pages are imported through XML files. The structure of the XML file is very simple: it contains a list of blocks, each block has a template associated, a name and a list of placeholders for each locale.

		</p>
        <p>Example:</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">
&lt;?xml version="1.0"?&gt;
&lt;blocks&gt;
	&lt;block&gt;
		&lt;template&gt;data_privacy&lt;/template&gt;
		&lt;blockName&gt;data_privacy_block&lt;/blockName&gt;
		&lt;locales&gt;
			&lt;de_DE&gt;
		&lt;placeholders&gt;
		&lt;placeholder&gt;
		&lt;name&gt;privacy_policy&lt;/name&gt;
		&lt;translation&gt;Datenschutzerklärung&lt;/translation&gt;
		&lt;/placeholder&gt;
		&lt;/placeholders&gt;
			&lt;/de_DE&gt;
			&lt;en_US&gt;
		&lt;placeholders&gt;
		&lt;placeholder&gt;
		&lt;name&gt;privacy_policy&lt;/name&gt;
		&lt;translation&gt;Data Privacy Policy&lt;/translation&gt;
		&lt;/placeholder&gt;
		&lt;/placeholders&gt;
			&lt;/en_US&gt;
		&lt;/locales&gt;
	&lt;/block&gt;
&lt;/blocks&gt;
				</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p>The XML file structure for loading static pages is similar to the one for importing blocks; the only differences are that a page has also a URL associated for each locale and it doesn’t have a name linked to it.
		</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">
&lt;?xml version="1.0"?&gt;
&lt;pages&gt;
	&lt;page&gt;
		&lt;template&gt;data_privacy&lt;/template&gt;
		&lt;locales&gt;
			&lt;de_DE&gt;
			&lt;url&gt;/de/datenschutz&lt;/url&gt;
		&lt;placeholders&gt;
			&lt;placeholder&gt;
				&lt;name&gt;privacy_policy&lt;/name&gt;
				&lt;translation&gt;Datenschutzerklärung&lt;/translation&gt;
			&lt;/placeholder&gt;
		&lt;/placeholders&gt;
			&lt;/de_DE&gt;
			&lt;en_US&gt;
				&lt;url&gt;/en/privacy&lt;/url&gt;
		&lt;placeholders&gt;
			&lt;placeholder&gt;
				&lt;name&gt;privacy_policy&lt;/name&gt;
				&lt;translation&gt;Data Privacy Policy&lt;/translation&gt;
			&lt;/placeholder&gt;
		&lt;/placeholders&gt;
				&lt;/en_US&gt;
				&lt;/locales&gt;
	&lt;/page&gt;
&lt;/pages&gt;
				</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p>Localized URLs
			The <var>spy_url</var> table stores the URLs that correspond to:

		</p>
        <ul>
            <li class="bullet_list">category pages
			</li>
            <li class="bullet_list">product details pages
			</li>
            <li class="bullet_list">static pages defined in CMS
			</li>
        </ul>
        <p>For each category there is a distinct URL for each configured locale. Similar for product details pages. These URLs are automatically created and stored in the DB when importing products and categories through the <var>Importer</var>.

		</p>
        <p class="example"><var>/en/computers</var> and <var>/de/computers</var> are the URL’s for the same category but for different locales.</p>
        <p>The URLs assigned for each imported CMS static page are distinct for each defined locale.</p>
        <p class="example"><var>/en/privacy </var>and /<var>de/datenschutz</var> point to the same template; when rendered, they’ll be loaded with the glossary values that correspond to the associated locale.</p>
        <p>&#160;</p>
        <p><i>Last review date: Jan 18, 2018 </i>
            <MadCap:conditionalText MadCap:conditions="General.Hidden Comment" style="font-style: italic;">by Anastasija Datsun</MadCap:conditionalText>
        </p>
    </body>
</html>