<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="">
    <head>
    </head>
    <body>
        <h1>Tutorial - Database Transaction Handling</h1>
        <p>
            <img src="../../Resources/Images/shoptype/B2B_Shop.png" />
            <img src="../../Resources/Images/shoptype/B2C_Shop.png" />
            <img src="../../Resources/Images/shoptype/MasterSuite.png" />
            <img src="../../Resources/Images/shoptype/Demoshop.png" />
        </p>
        <p MadCap:conditions="General.Hidden Comment">Used to be:&#160;http://spryker.github.io/tutorials/zed/database-transaction-handling/</p>
        <p class="tip">To reduce boilerplate code and properly handle database transactions you can use <code>Spryker\Zed\PropelOrm\Business\Transaction\DatabaseTransacti<br />onHandlerTrait</code>.

</p>
        <h2>Usage
</h2>
        <p>To use database transactions in the <code>DatabaseTransactionHandlingExample</code> class:</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php

use Spryker\Zed\PropelOrm\Business\Transaction\DatabaseTransactionHandlerTrait;

class DatabaseTransactionHandlingExample
{

    use DatabaseTransactionHandlerTrait;
    
    /**
     * @param string $fooName
     * @param \Bar[] $barCollection
     *
     * @return \Foo
     */
    public function createFoo($fooName, array $barCollection)
    {
        return $this-&gt;handleDatabaseTransaction(function () use ($fooName, $barCollection) {
            return $this-&gt;executeCreateFooTransaction($fooName, $barCollection);
        });
    }
    
    /**
     * @param string $fooName
     * @param \Bar[] $barCollection
     *
     * @return \Foo
     */
    protected function executeCreateFooTransaction($fooName, array $barCollection)
    {
        $fooEntity = new Foo();
        $fooEntity-&gt;setFooName($fooName);
        $fooEntity-&gt;save();
        
        foreach ($barCollection as $bar) {
            $bar-&gt;setFkFoo($fooEntity-&gt;getIdFoo());
            $bar-&gt;save();
        }

        return $fooEntity;
    }

}
</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h2>Under the Hood
</h2>
        <p>In case of any error, the transaction will be rolled back and an exception will be rethrown. The code only has one method. The <code>$connection</code> parameter is optional and if not specified <code>Propel::getConnection()</code> will be used.
</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php

    /**
     * @param \Closure $callback
     * @param \Propel\Runtime\Connection\ConnectionInterface|null $connection
     *
     * @throws \Exception
     * @throws \Throwable
     *
     * @return mixed
     */
    protected function handleDatabaseTransaction(Closure $callback, ConnectionInterface $connection = null)
    {
        if (!$connection) {
            $connection = Propel::getConnection();
        }

        $connection-&gt;beginTransaction();

        try {
            $result = $callback();

            $connection-&gt;commit();

            return $result;
        } catch (\Exception $exception) {
            $connection-&gt;rollBack();
            throw $exception;
        } catch (\Throwable $exception) {
            $connection-&gt;rollBack();
            throw $exception;
        }
    }
</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
    </body>
</html>