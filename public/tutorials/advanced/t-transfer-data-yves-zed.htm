<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="">
    <head>
    </head>
    <body>
        <h1>Tutorial - Transfering Data Between Yves and Zed</h1>
        <p>
            <img src="../../Resources/Images/shoptype/B2B_Shop.png" />
            <img src="../../Resources/Images/shoptype/B2C_Shop.png" />
            <img src="../../Resources/Images/shoptype/MasterSuite.png" />
            <img src="../../Resources/Images/shoptype/Demoshop.png" />
        </p>
        <p MadCap:conditions="General.Hidden Comment">Used to be:&#160;http://spryker.github.io/tutorials/yves/communication-yves-zed/</p>
        <p>Yves gets most of its data from the client-side NoSQL data stores(data such as product details, product categories, prices, etc.). There are situations in which Yves needs to communicate with Zed either to submit data(e.g.: the customer has submitted a new order or subscribed to newsletter) or to retrieve data(e.g.: order history for the customer, customer account details).</p>
        <p>In this tutorial we’ll exemplify how you can setup the communication between Yves and Zed.</p>
        <p>We’ll display a random salutation message that is retrieved from Zed (please follow the tutorial from <a href="t-add-new-bundle.htm">here</a> to have the backend implementation ready).</p>
        <p>To implement this functionality, you need to follow the steps described below:</p>
        <ul>
            <li class="bullet_list"><a href="#Create">Create the transfer object</a>
            </li>
            <li class="bullet_list"><a href="#Create2">Create the Gateway Controller</a>
            </li>
            <li class="bullet_list"><a href="#Implemen">Implement the Stub</a>
            </li>
            <li class="bullet_list"><a href="#Implemen2">Implement the Client</a>
            </li>
            <li class="bullet_list"><a href="#Create3">Create the controller and view in Yves</a>
            </li>
        </ul>
        <h2><a name="Create"></a>Create the Transfer Object</h2>
        <p class="info"><strong>Transfer Objects</strong>
            <br />The communication between Yves and Zed is done using transfer objects.</p>
        <p>Create a new transfer object to facilitate the communication between Yves and Zed. The transfer object will be added under the <code>src/Pyz/Shared/HelloWorld/Transfer/</code> folder. We’ll call it <code>helloworld.transfer.xml</code> and it will contain one property:</p><pre><code class="language-PHP line-numbers">&lt;?xml version="1.0"?&gt;
&lt;transfers xmlns="spryker:transfer-01"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="spryker:transfer-01 http://static.spryker.com/transfer-01.xsd"&gt;

    &lt;transfer name="HelloWorldMessage"&gt;
        &lt;property name="value" type="string" /&gt;
    &lt;/transfer&gt;

&lt;/transfers&gt;</code></pre>
        <p>Now run the console command to generate the transfer object so that it’s ready to be used:</p><pre><code class="language-PHP line-numbers">console transfer:generate</code></pre>
        <p>Add an operation to your <code>HelloWorldFacade</code> that will return the random salutation message using the transfer object you just defined :</p><pre><code class="language-PHP line-numbers">&lt;?php
/**
 * @return \Generated\Shared\Transfer\HelloWorldMessageTransfer
 */
public function getSalutationMessage()
{
    return $this-&gt;getFactory()-&gt;createMessageGenerator()-&gt;generateHelloMessage();
}</code></pre>
        <p>More information about transfer objects and how to define them in Spryker can be read here.</p>
        <h2><a name="Create2"></a>Create the Gateway Controller</h2>
        <p>Create the <code>GatewayController</code> in Zed under <code>Pyz\Zed\HelloWorld\Communication\Controller</code>; the <code>GatewayController</code> is dedicated for communication with Yves. It must extend the <code>AbstractGatewayController</code> class.</p>
        <p>Add an action to this controller, that will call the functionality you have exposed through your facade:</p><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Zed\HelloWorld\Communication\Controller;

use Spryker\Zed\Kernel\Communication\Controller\AbstractGatewayController;

/**
 * @method \Pyz\Zed\HelloWorld\Business\HelloWorldFacade getFacade()
 */
class GatewayController extends AbstractGatewayController
{
    /**
     *  @return \Generated\Shared\Transfer\HelloWorldMessageTransfer
     */
    public function getSalutationMessageAction()
    {
        return $this-&gt;getFacade()
                    -&gt;getSalutationMessage();
    }
}</code></pre>
        <h2><a name="Implemen"></a>Implement the stub</h2>
        <p>Now let’s move to the client part, to add support to call the controller action we just added. Create a <code>HelloWorldStub</code> under <code>src/Pyz/Client/HelloWorld/Zed</code>.</p>
        <p>This stub will enable us to submit an HTTP request to Zed.</p><pre><code class="language-PHP line-numbers">&lt;?php

namespace Pyz\Client\HelloWorld\Zed;

use Generated\Shared\Transfer\HelloWorldMessageTransfer;
use Spryker\Client\ZedRequest\ZedRequestClientInterface;

class HelloWorldStub implements HelloWorldStubInterface
{

    /**
     * @var \Spryker\Client\ZedRequest\ZedRequestClientInterface
     */
    protected $zedRequestClient;

    /**
     * @param \Spryker\Client\ZedRequest\ZedRequestClientInterface $zedRequestClient
     */
    public function __construct(ZedRequestClientInterface $zedRequestClient)
    {
        $this-&gt;zedRequestClient = $zedRequestClient;
    }

    /**
     * @return \Generated\Shared\Transfer\HelloWorldMessageTransfer
     */
    public function getSalutationMessage()
    {
        return $this-&gt;zedRequestClient-&gt;call(
            '/hello-world/gateway/get-salutation-message',
            new HelloWorldMessageTransfer()
        );
    }

}
</code></pre>
        <p class="info"><strong>Request parameter</strong>
            <br />Through the second parameter you can pass a transfer object as a request parameter to the request client call.</p>
        <p>Add the corresponding interface for it (<code>HelloWorldStubInterface</code>), that contains the <code>getSalutationMessage()</code> method defined.</p>
        <p>Our stub depends on the <code>ZedRequestClient</code> what we can provide by implementing <code>HelloWorldDependencyProvider</code>.</p><pre><code class="language-PHP line-numbers">&lt;?php

namespace Pyz\Client\HelloWorld;

use Spryker\Client\Customer\CustomerDependencyProvider as SprykerCustomerDependencyProvider;
use Spryker\Client\Kernel\Container;

class HelloWorldDependencyProvider extends SprykerCustomerDependencyProvider
{

    const CLIENT_ZED_REQUEST = 'CLIENT_ZED_REQUEST';

    /**
     * @param \Spryker\Client\Kernel\Container $container
     *
     * @return \Spryker\Client\Kernel\Container
     */
    public function provideServiceLayerDependencies(Container $container)
    {
        $container = $this-&gt;addZedRequestClient($container);

        return $container;
    }

    /**
     * @param \Spryker\Client\Kernel\Container $container
     *
     * @return \Spryker\Client\Kernel\Container
     */
    protected function addZedRequestClient(Container $container)
    {
        $container[self::CLIENT_ZED_REQUEST] = function (Container $container) {
            return $container-&gt;getLocator()-&gt;zedRequest()-&gt;client();
        };

        return $container;
    }

}
</code></pre>
        <p>To be able to get an instance of the <code>HelloWorldStub</code>, create the <code>HelloWorldFactory</code> :</p><pre><code class="language-PHP line-numbers">&lt;?php

namespace Pyz\Client\HelloWorld;

use Pyz\Client\HelloWorld\Zed\HelloWorldStub;
use Spryker\Client\Kernel\AbstractFactory;

class HelloWorldFactory extends AbstractFactory
{

    /**
     * @return \Pyz\Client\HelloWorld\Zed\HelloWorldStubInterface
     */
    public function createZedStub()
    {
        return new HelloWorldStub($this-&gt;getZedRequestClient());
    }

    /**
     * @return \Spryker\Client\ZedRequest\ZedRequestClientInterface
     */
    protected function getZedRequestClient()
    {
        return $this-&gt;getProvidedDependency(HelloWorldDependencyProvider::CLIENT_ZED_REQUEST);
    }

}</code></pre>
        <h2><a name="Implemen2"></a>Implement the Client</h2>
        <p>Now that we have the <code>HelloWorldStub</code>, we can create the client that consumes this service.</p>
        <p>Create the <code>HelloWorldClient</code> under <code>src/Pyz/Client/HelloWorld</code> together with its corresponding interface.</p><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Client\HelloWorld;

use Spryker\Client\Kernel\AbstractClient;

/**
 * @method \Pyz\Client\HelloWorld\HelloWorldFactory getFactory()
 */
class HelloWorldClient extends AbstractClient implements HelloWorldClientInterface
{
    /**
     *
     * @return \Generated\Shared\Transfer\HelloWorldMessageTransfer
     */
    public function getSalutationMessage()
    {
        return $this-&gt;getFactory()
                    -&gt;createZedStub()
                    -&gt;getSalutationMessage();
    }
}</code></pre>
        <h2><a name="Create3"></a>Create controller and view in Yves</h2>
        <p>Now that we have everything setup, we can move to Yves and create the controller and the twig template that will render the random message. Under <code>src/Pyz/Yves/HelloWorld/Controller</code> create the <code>IndexController</code>.</p><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Yves\HelloWorld\Controller;

use Spryker\Yves\Kernel\Controller\AbstractController;

/**
 * @method \Pyz\Client\HelloWorld\HelloWorldClientInterface getClient()
 */
class IndexController extends AbstractController
{
    /**
     * @return array
     */
    public function indexAction()
    {

        return [
            'salutationMessage' =&gt; $this-&gt;getClient()-&gt;getSalutationMessage()
        ];
    }

}</code></pre>
        <p>Under <code>src/Pyz/Yves/HelloWorld/Theme/default/index</code> create the <code>index.twig</code> file.</p><pre><code class="language-PHP line-numbers">{% extends "@application/layout/layout.twig" %}

{% block content %}
    {{ salutationMessage.value }}
{% endblock %}</code></pre>
        <p>Now, the only thing left to do is to take care of the URL routing. Add the <code>HelloWorldControllerProvider</code> under <code>src/Pyz/Yves/HelloWorld/Plugin/Provider</code>.</p><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Yves\HelloWorld\Plugin\Provider;

use Pyz\Yves\Application\Plugin\Provider\AbstractYvesControllerProvider;
use Silex\Application;

class HelloWorldControllerProvider extends AbstractYvesControllerProvider
{
    /**
     * @param \Silex\Application $app
     */
    protected function defineControllers(Application $app) {
        $this-&gt;createController('/hello', 'hello', 'HelloWorld','index');
    }

}</code></pre>
        <p>Register your controller provider under <code>YvesBootstrap</code></p><pre><code class="language-PHP line-numbers">
	protected function getControllerProviderStack($isSsl)
	  {
		 return [
			//...
			 new HelloWorldControllerProvider($isSsl),
		 ];
	  }</code></pre>
        <p MadCap:conditions="Spryker.DemoShop">We are done! <a href="http://www.de.demoshop.local/hello" target="_blank" title="http://www.de.demoshop.local/hello" alt="http://www.de.demoshop.local/hello">http://www.de.demoshop.local/hello</a> will now display a random salutation message.</p>
    </body>
</html>