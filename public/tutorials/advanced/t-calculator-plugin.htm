<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="">
    <head>
    </head>
    <body>
        <h1>Tutorial - Calculator Plugin</h1>
        <p>
            <img src="../../Resources/Images/shoptype/B2B_Shop.png" />
            <img src="../../Resources/Images/shoptype/B2C_Shop.png" />
            <img src="../../Resources/Images/shoptype/MasterSuite.png" />
            <img src="../../Resources/Images/shoptype/Demoshop.png" />
        </p>
        <p MadCap:conditions="General.Hidden Comment">used to be: http://spryker.github.io/tutorials/zed/calculator-plugin/</p>
        <p>This tutorial explains how to add new calculation plugin to the calculator stack.</p>
        <p>Requirement : display the tax amount per item.</p>
        <p>Right now, you can get the tax amount from <code>grandTotal</code>. For this, you have to add a new calculator into the existing stack for the  module.</p>
        <p>First, there are some data structure changes that you need to make. Modify <code>ItemTransfer</code> object by adding two new properties :</p>
        <ul>
            <li class="bullet_list"><code>unitTaxAmount</code> for single item</li>
            <li class="bullet_list"><code>sumTaxAmount</code> tax amount for sum of items</li>
        </ul>
        <p>As this is Tax related ,you have to add this to project level in the Tax module.</p>
        <p>Modify the transfer object <code>tax.transfer.xml</code> to reflect the new data model. Add the following changes to <code>Pyz/Shared/Tax/Transfer/tax.transfer.xml file</code>:</p><pre><code class="language-PHP line-numbers">&lt;transfer name="Item"&gt;
     &lt;property name="unitTaxAmount" type="int" /&gt;
     &lt;property name="sumTaxAmount" type="int" /&gt;
 &lt;/transfer&gt;</code></pre>
        <p>run console command: <code>vendor/bin/console transfer:generate</code></p>
        <p>After this step, you should have in the <code>ItemTransfer</code> two new properties.</p>
        <p>Next, create the new calculator plugin and register it to the calculator plugin stack.</p>
        <p>In the <code>Pyz/Zed/Tax</code> namespace, create a new module if it does not exist. Create new plugin class under <code>Pyz/Zed/Tax/Communication/Plugin/ItemTaxAmountCalculatorPlugin</code>, as you see in the example below:</p><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Zed\Tax\Communication\Plugin;

use Generated\Shared\Transfer\QuoteTransfer;
use Spryker\Zed\Kernel\Communication\AbstractPlugin;
use Spryker\Zed\Calculation\Dependency\Plugin\CalculatorPluginInterface;

/**
 * @method \Spryker\Zed\Tax\Business\TaxFacade getFacade()
 */
class ItemTaxAmountCalculatorPlugin extends AbstractPlugin implements CalculatorPluginInterface
{
    /**
     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
     *
     * @return void
     */
    public function recalculate(QuoteTransfer $quoteTransfer)
    {
        $this-&gt;getFacade()-&gt;calculateItemTax($quoteTransfer);
    }
}</code></pre>
        <p>Add new plugin into calculator stack <code>Pyz\Zed\Calculation\CalculationDependencyProvider::getCalculatorStack()</code>:</p><pre><code class="language-PHP line-numbers">&lt;?php
   protected function getCalculatorStack(Container $container)
   {
       return [
           // ... other plugins add this to place where required amounts are already calculated, for example after ItemCalculator.
           new ItemTaxAmountCalculatorPlugin(),
       ];
   }</code></pre>
        <p>Add new facade method: <code>Pyz\Zed\Tax\TaxFacade::calculateItemTax()</code> and create TaxFacade class extending Spryker Core TaxFacade if not present.</p><pre><code class="language-PHP line-numbers">&lt;?php
    /**
      * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
      *
      * @return void
      */
   public function calculateItemTax(QuoteTransfer $quoteTransfer)
   {
       $this-&gt;getFactory()-&gt;createItemTaxCalculator()-&gt;recalculate($quoteTransfer);
   }</code></pre>
        <p>Create the <code>ItemTaxCalculator</code> that implements the tax calculation business logic. Place this class under <code>\Pyz\Zed\Calculation\Business\Model\ItemTaxCalculator</code>.</p><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Zed\Tax\Business\Model;

use Generated\Shared\Transfer\QuoteTransfer;

class ItemTaxCalculator
{
    /**
     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
     *
     * @return void
     */
    public function recalculate(QuoteTransfer $quoteTransfer)
    {
        //tax calculator business logic
    }
}</code></pre>
        <p>Add a new factory method for the new calculator into <code>Pyz\Zed\Tax\Business\TaxBusinessFactory</code>. Create the factory class if does not exist, extending the Spryker Core factory.</p><pre><code class="language-PHP line-numbers">&lt;?php
/**
    * @return \Pyz\Zed\Tax\Business\Model\ItemTaxCalculator
    */
   protected function createItemTaxCalculator()
   {
       return new ItemTaxCalculator();
   }</code></pre>
    </body>
</html>