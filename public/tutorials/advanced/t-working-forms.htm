<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="">
    <head>
    </head>
    <body>
        <h1>Tutorial - Working with Forms</h1>
        <p>
            <img src="../../Resources/Images/shoptype/B2B_Shop.png" />
            <img src="../../Resources/Images/shoptype/B2C_Shop.png" />
            <img src="../../Resources/Images/shoptype/MasterSuite.png" />
            <img src="../../Resources/Images/shoptype/Demoshop.png" />
        </p>
        <p MadCap:conditions="General.Hidden Comment">used to be: http://spryker.github.io/tutorials/yves/working-with-forms/ </p>
        <p>Spryker uses Symfony forms; this tutorial will help you get started on working with forms.</p>
        <p>You will build a simple newsletter subscription form that contains a field for entering the email address and a submit button.</p>
        <p>Follow the steps described below to create the newsletter subscription form:</p>
        <ul>
            <li class="bullet_list"><a href="#Create">Create the FormType</a>
            </li>
            <li class="bullet_list"><a href="#Render">Render the Form</a>
            </li>
            <li class="bullet_list"><a href="#Post">Post the Data</a>
            </li>
        </ul>
        <h2><a name="Create"></a>Create the FormType</h2>
        <p>The best practice is to create a <code>FormType</code> class for each form you need to handle; here you will define the fields contained in the form and the rules of validation.</p>
        <p>In our case, we need to define the email field that has two constraints attached:</p>
        <ul>
            <li class="bullet_list">it’s a required field</li>
            <li class="bullet_list">it must be a valid email address</li>
        </ul>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Yves\Newsletter\Form;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Validator\Constraints\Email;
use Symfony\Component\Validator\Constraints\NotBlank;

class SubscriptionFormType extends AbstractType
{

    /**
     * @param \Symfony\Component\Form\FormBuilderInterface $builder
     * @param array $options
     *
     * @return void
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $builder-&gt;add('email', 'email', [
            'label' =&gt; 'Email',
            'constraints' =&gt; [
                new NotBlank(),
                new Email(),
            ],
        ]);
    }

}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p>To instantiate your form, use Symfony’s FormBuilder in your module’s factory, as in the example bellow:</p><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Yves\Newsletter;

use Pyz\Yves\Newsletter\Form\SubscriptionFormType;
use Spryker\Yves\Kernel\AbstractFactory;

class NewsletterFactory extends AbstractFactory
{

    /**
     * @return \Symfony\Component\Form\FormInterface
     */
    public function createSubscriptionForm()
    {
        $subscriptionFormType = new SubscriptionFormType();

        return $this-&gt;getFormFactory()-&gt;create($subscriptionFormType);
    }

}</code></pre>
        <h2><a name="Render"></a>Render the Form</h2>
        <p>To render your form in a template, pass the form to the template through the controller action:</p>
        <ul>
            <li class="bullet_list">get an instance of your form(using the factory method implemented above)</li>
            <li class="bullet_list">pass the form to the template</li>
        </ul>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Yves\Newsletter\Controller;

use Spryker\Yves\Kernel\Controller\AbstractController;

/**
 * @method \Pyz\Yves\Newslette\NewsletterFactory getFactory()
 */
class SubscriptionController extends AbstractController
{

    /**
     * @return array
     */
    public function indexAction()
    {
        $subscriptionForm = $this
            -&gt;getFactory()
            -&gt;createSubscriptionForm();

        return $this-&gt;viewResponse([
            'subscriptionForm' =&gt; $subscriptionForm-&gt;createView(),
        ]);
    }

}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p>Add the form in your template together with a submit button; make sure you use the same string as in the controller action(<code>subscriptionForm</code>).</p><pre><code class="language-PHP line-numbers">{{ form_start(subscriptionForm) }}
    {{ form_widget(subscriptionForm.email) }}
    {{ form_errors(subscriptionForm.email) }}
  &lt;input type="submit" value="Subscribe" /&gt;
{{ form_end(subscriptionForm) }}</code></pre>
        <h2><a name="Post"></a>Post the Data</h2>
        <p>To handle the posted data, we’ll need to extend the controller action to handle the request and check if the form is valid when it’s being submitted; in here you can setup the page to which you want the user to be redirected after the form is being succesfully submitted.</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Yves\Newsletter\Controller;

use Spryker\Yves\Kernel\Controller\AbstractController;

/**
 * @method \Pyz\Yves\Newslette\NewsletterFactory getFactory()
 */
class SubscriptionController extends AbstractController
{

    /**
     * @param \Symfony\Component\HttpFoundation\Request $request
     *
     * @return array|\Symfony\Component\HttpFoundation\RedirectResponse
     */
    public function indexAction(Request $request)
    {
        $subscriptionForm = $this
            -&gt;getFactory()
            -&gt;createSubscriptionForm()
            -&gt;handleRequest($request);

        if ($subscriptionForm-&gt;isValid()) {
            // Call the client for e.g. to save the subscriber.

            // Redirect to home page after successful subscription
            return $this-&gt;redirectResponseInternal('home');
        }

        return $this-&gt;viewResponse([
            'subscriptionForm' =&gt; $subscriptionForm-&gt;createView(),
        ]);
    }

}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
    </body>
</html>