<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="">
    <head>
    </head>
    <body>
        <h1>Tutorial - Extending Spryker</h1>
        <p>
            <img src="../../Resources/Images/shoptype/B2B_Shop.png" />
            <img src="../../Resources/Images/shoptype/B2C_Shop.png" />
            <img src="../../Resources/Images/shoptype/MasterSuite.png" />
            <img src="../../Resources/Images/shoptype/Demoshop.png" />
        </p>
        <p MadCap:conditions="General.Hidden Comment">used to be: http://spryker.github.io/tutorials/zed/extending-spryker/</p>
        <p>To extend the Spryker-Core functionality and to use the Spryker Engine to develop a project, it’s important to understand the folder structure used in Spryker Commerce OS.</p>
        <p>The project consists of two parts : <b>Spryker Core</b> and <b>Project</b> implementation. They both follow the same structure and the project implementation goes on top of the Spryker Core functionalities.</p>
        <p>The picture below shows how a request is being handled :</p>
        <p>
            <img src="../../Resources/Images/request_handling.png" alt="Request handling" title="Click me" />
        </p>
        <h2>Project Structure Overview</h2>
        <p>The code is divided into three parts:</p>
        <ul>
            <li class="bullet_list"><code>src/</code> folder contains the code of the current project</li>
            <li class="bullet_list"><code>vendor/spryker/</code> folder contains the Spryker OS</li>
            <li class="bullet_list"><code>vendor/spryker-eco/</code> folder contains the Spryker Ecosystem modules, which are distributed separately from core</li>
        </ul>
        <p>All projects, SprykerCore and SprykerEco parts follow a very similar directory structure:</p>
        <p>E.g. : if <code>CustomerFacade</code> is extended on the project side, it will have the following locations and namespaces :</p>
        <p>in Spryker Core :</p>
        <ul>
            <li class="bullet_list">location : <code>/vendor/Spryker/Spryker/Bundles/Customer/src/SprykerFeature/Zed/Customer/Business</code></li>
            <li class="bullet_list">namespace : <code>SprykerFeature/Zed/Customer/Business</code></li>
        </ul>
        <p>on the Project layer :</p>
        <ul>
            <li class="bullet_list">location : <code>src/Pyz/Zed/Customer/Business</code></li>
            <li class="bullet_list">namespace : <code>Pyz/Zed/Customer/Business</code></li>
        </ul>
        <p>As it can be observed from the example above, the location of the file reflects the namespace its located in.</p>
        <p><b>SprykerEco modules can be treated as Spryker Core in the context of replacing.</b>
        </p>
        <h2>Folder organization</h2>
        <p>Depending on where and how the code is intended to be used, it can be placed in one of the following folders :</p>
        <ul>
            <li class="bullet_list">Client - the code placed in here handles communication between Yves and Zed</li>
            <li class="bullet_list">Shared - the code placed in here is used both by Yves and Zed ( to avoid code duplication)</li>
            <li class="bullet_list">Zed - the code in here is meant only for the backend application</li>
            <li class="bullet_list">Yves - the frontend code</li>
        </ul>
        <p>Each module contains one folder for every layer of the application :</p>
        <ul>
            <li class="bullet_list">Business</li>
            <li class="bullet_list">Communication</li>
            <li class="bullet_list">Persistence</li>
            <li class="bullet_list">Presentation</li>
        </ul>
        <h2>Extending SprykerCore Functionality</h2>
        <p>To extend the functionality of a class from SprykerCore, a new class with the same name must be added in the corresponding location on the project side.</p>
        <p>Replacement rules, described in this article work for the next classes in Spryker module:</p>
        <ul>
            <li class="bullet_list"><code>Facade</code>
            </li>
            <li class="bullet_list"><code>BusinessFactory</code>
            </li>
            <li class="bullet_list"><code>Controller</code>
            </li>
            <li class="bullet_list"><code>QueryContainer</code>
            </li>
            <li class="bullet_list"><code>DependencyProvider</code>
            </li>
            <li class="bullet_list"><code>Config</code>
            </li>
        </ul>
        <p>The example below illustrates how CategoryFacade can be extended on the project side:</p>
        <p>Spryker Core:</p><pre><code class="language-PHP line-numbers">&lt;?php
				namespace Spryker\Zed\Category\Business;
				use Spryker\Zed\Kernel\Business\AbstractFacade;
				class CategoryFacade extends AbstractFacade
				{
		}</code></pre>
        <p>Project:</p><pre><code class="language-PHP line-numbers">&lt;?php
				namespace Pyz\Zed\Category\Business;
				use Spryker\Zed\Category\Business\CategoryFacade as SprykerCategoryFacade;
				class CategoryFacade extends SprykerCategoryFacade
				{
		}</code></pre>
        <p>&#160;</p>
        <p><i>Last review date: November, 5th</i>
            <MadCap:conditionalText MadCap:conditions="General.Hidden Comment">by Sergey Sikachev, Oksana Karasyova</MadCap:conditionalText>
        </p>
    </body>
</html>