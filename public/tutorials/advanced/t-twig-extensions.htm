<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="">
    <head>
    </head>
    <body>
        <h1>Tutorial - Twig Extensions</h1>
        <p>
            <img src="../../Resources/Images/shoptype/B2B_Shop.png" />
            <img src="../../Resources/Images/shoptype/B2C_Shop.png" />
            <img src="../../Resources/Images/shoptype/MasterSuite.png" />
            <img src="../../Resources/Images/shoptype/Demoshop.png" />
        </p>
        <p MadCap:conditions="General.Hidden Comment">used to be: http://spryker.github.io/tutorials/yves/twig-extensions/</p>
        <p>As an example on how to implement a Twig extension, we’ll build a filter which can be used on displaying prices.</p>
        <ul>
            <li class="bullet_list">Implement the filter</li>
            <li class="bullet_list">Add the Twig extension</li>
            <li class="bullet_list">Register the new Twig extension</li>
            <li class="bullet_list">Test your Twig extension</li>
        </ul>
        <h2>Implement the filter</h2>
        <p>Add the logic in a dedicated class, in the module you’re currently working on:</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Zed\ExampleBundle\Communication\Plugin\Twig\Filters;
 
class PriceFilter
{
    const DECIMALS = 2;
 
    const DIVIDER = 100;
 
     /**
      * @var int
      */
    protected $price;
 
    /**
     * @param int $price
     */
    public function __construct($price)
    {
        $this-&gt;price = $price;
    }
 
    /**
     * @return string
     */
    protected function getCurrency()
    {
        // here can be more logic to get the used currency
        return '&amp;euro;';
    }
 
    /**
     * @return string
     */
    public function getConvertedPrice()
    {
        // here could be more logic to convert the price if it needs to be displayed in a different currency
        return sprintf(
            '%s %s',
            number_format($this-&gt;price / static::DIVIDER, static::DECIMALS),
            $this-&gt;getCurrency()
        );
    }
}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h2>Add the Twig Extension</h2>
        <p>Create a class that extends the <code>Twig_Extension</code> class and calls the logic implemented in the class mentioned above.</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Zed\ExampleBundle\Plugin\Twig;
 
use Spryker\Zed\ExampleBundle\Communication\Plugin\Twig\Filters\PriceFilter;
 
class ExampleTwigExtension extends \Twig_Extension
{

    /**
     * @return array
     */
    public function getFilters()
    {
        return [
            new \Twig_SimpleFilter('myFilter', function ($value) {
                
                return strtoupper($value);
            }, [
                'is_safe' =&gt; ['html'], // use this to allow HTML code output without raw filter
            ]),
        ];
    }
 
    /**
     * to add custom function you'll do the same as with filters
     *
     * @return array
     */
    public function getFunctions()
    {
        return [];
    }
 
    /**
     * @return string
     */
    public function getName()
    {
        return 'ExampleTwigExtension';
    }
}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h2>Register the Twig Extension that You Created</h2>
        <p>In order to be able to use it from the Twig templates, the extension must be registered in the <code>getTwigExtensions()</code> method from <code>ZedBootstrap</code> class. First, add a reference to the Twig extension in <code>ZedBootstrap.php</code>:</p><pre><code class="language-PHP line-numbers">&lt;?php
use Pyz\Zed\ExampleBundle\Plugin\Twig\ExampleTwigExtension;

// Instantiate the new Twig extension
protected function getTwigExtensions(Application $app)
{
    return [
        ...
        new ExampleTwigExtension(),
    ];
}</code></pre>
        <h2>Test the Twig Extension</h2>
        <p>Now the Twig extension is ready to be used in the Twig templates.</p><pre><code class="language-PHP line-numbers">&lt;?php
use Pyz\Zed\ExampleBundle\Plugin\Twig\ExampleTwigExtension;

// Instantiate the new Twig extension
protected function getTwigExtensions(Application $app)
{
    return [
        ...
        new ExampleTwigExtension(),
    ];
}</code></pre>
        <p>An input of <code>100</code> will be outputted as <code>1.00 &amp;euro</code>.</p>
    </body>
</html>