<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="">
    <head>
    </head>
    <body>
        <h1>Tutorial - Creating a Table View</h1>
        <p>
            <img src="../../Resources/Images/shoptype/B2B_Shop.png" />
            <img src="../../Resources/Images/shoptype/B2C_Shop.png" />
            <img src="../../Resources/Images/shoptype/MasterSuite.png" />
            <img src="../../Resources/Images/shoptype/Demoshop.png" />
        </p>
        <p MadCap:conditions="General.Hidden Comment">used to be: http://spryker.github.io/tutorials/zed/create-table-view/</p>
        <p>This tutorial explains how to retrieve data from the database and render it in a table.</p>
        <p>Prerequisites:</p>
        <ul>
            <li class="bullet_list">You have created a new <a href="t-add-new-bundle.htm">module</a>.</li>
        </ul>
        <h2>Create a QueryContainer</h2>
        <p>Create the <code>QueryContainer</code> class in the HelloWorld module:</p><pre><code class="language-PHP line-numbers">mkdir -p src/Pyz/Zed/HelloWorld/Persistence/
touch src/Pyz/Zed/HelloWorld/Persistence/HelloWorldQueryContainer.php</code></pre>
        <p>Add the <code>queryProducts</code> operation in the query container :</p><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Zed\HelloWorld\Persistence;

use Orm\Zed\Product\Persistence\SpyProductQuery;
use Spryker\Zed\Kernel\Persistence\AbstractQueryContainer;

interface HelloWorldQueryContainerInterface
{
    public function queryProducts();
}</code></pre><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Zed\HelloWorld\Persistence;

use Orm\Zed\Product\Persistence\SpyProductQuery;
use Spryker\Zed\Kernel\Persistence\AbstractQueryContainer;

class HelloWorldQueryContainer extends AbstractQueryContainer implements HelloWorldQueryContainerInterface
{
    public function queryProducts()
    {
        return new SpyProductQuery();
    }
}</code></pre>
        <h2>Create the Table</h2>
        <p>Create the <code>ProductTable</code> class :</p><pre><code class="language-PHP line-numbers">mkdir -p src/Pyz/Zed/HelloWorld/Communication/Table
touch src/Pyz/Zed/HelloWorld/Communication/Table/ProductTable.php</code></pre>
        <p>Add the configuration for the table:</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Zed\HelloWorld\Communication\Table;

use Orm\Zed\Product\Persistence\Map\SpyProductTableMap;
use Orm\Zed\Product\Persistence\SpyProductQuery;
use Pyz\Zed\HelloWorld\Persistence\HelloWorldQueryContainerInterface;
use Spryker\Zed\Gui\Communication\Table\AbstractTable;
use Spryker\Zed\Gui\Communication\Table\TableConfiguration;

class ProductTable extends AbstractTable
{

    /**
     * @var \Pyz\Zed\HelloWorld\Persistence\HelloWorldQueryContainerInterface
     */
    protected $queryContainer;

    /**
     * @param \Pyz\Zed\HelloWorld\Persistence\HelloWorldQueryContainerInterface $queryContainer
     */
    public function __construct(HelloWorldQueryContainerInterface $queryContainer)
    {
        $this-&gt;queryContainer = $queryContainer;
    }

    /**
     * @param TableConfiguration $config
     *
     * @return TableConfiguration
     */
    protected function configure(TableConfiguration $config)
    {
        $config-&gt;setHeader([
            SpyProductTableMap::COL_ID_PRODUCT =&gt; 'Product ID',
            SpyProductTableMap::COL_SKU =&gt; 'Product Sku',
            ]);

        return $config;
    }

    /**
     * @param TableConfiguration $config
     *
     * @return array
     */
    protected function prepareData(TableConfiguration $config)
    {
        $queryResult = $this-&gt;runQuery($this-&gt;queryContainer-&gt;queryProducts(), $config);

        $results = [];
        foreach ($queryResult as $resultItem)
        {
            $results[] = [
                SpyProductTableMap::COL_ID_PRODUCT =&gt; $resultItem[SpyProductTableMap::COL_ID_PRODUCT],
                SpyProductTableMap::COL_SKU =&gt; $resultItem[SpyProductTableMap::COL_SKU],
            ];
        }

        return $results;
    }
}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h2>Create the Factory</h2>
        <p>The factory should be placed in the communication layer and should contain a method that returns an instance of the <code>ProductTable</code> class.</p><pre><code class="language-PHP line-numbers">touch src/Pyz/Zed/HelloWorld/Communication/HelloWorldCommunicationFactory.php</code></pre>
        <p>Add the method that constructs the instance of <code>ProductTable</code> class :</p><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Zed\HelloWorld\Communication;

use Pyz\Zed\HelloWorld\Communication\Table\ProductTable;
use Pyz\Zed\HelloWorld\Persistence\HelloWorldQueryContainer;
use Spryker\Zed\Kernel\Communication\AbstractCommunicationFactory;

/**
 * @method HelloWorldQueryContainer getQueryContainer()
 */
class HelloWorldCommunicationFactory extends AbstractCommunicationFactory
{
    /**
     * @return ProductTable
     */
    public function createProductTable()
    {
        return new ProductTable($this-&gt;getQueryContainer());
    }
 }</code></pre>
        <h2>Add a Controller Action That Renders the Table</h2>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Zed\HelloWorld\Communication\Controller;

use Pyz\Zed\HelloWorld\Communication\HelloWorldCommunicationFactory;
use Spryker\Zed\Kernel\Communication\Controller\AbstractController;

/**
 * @method HelloWorldCommunicationFactory getFactory()
 */
class IndexController extends AbstractController
{
    /**
     * @return array
     */
    public function indexAction()
    {
        $table = $this-&gt;getFactory()-&gt;createProductTable();

        return [
            'products' =&gt; $table-&gt;render()
        ];
    }

    /**
     * @return \Symfony\Component\HttpFoundation\JsonResponse
     */
    public function tableAction()
    {
        $table = $this-&gt;getFactory()-&gt;createProductTable();

        return $this-&gt;jsonResponse(
            $table-&gt;fetchData()
        );
    }
}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p class="note">The tableAction() will be called by a jQuery Plugin ( <a href="https://datatables.net/" target="_blank" title="Datatables" alt="Datatables">Datatables</a> ) that renders the actual data as a table</p>
        <h2>Create the Twig Template</h2>
        <p>Add the <code>products</code> variable to <code>Pyz/Zed/HelloWorld/Presentation/Index/index.twig</code> in order to render the table containing the list of products.</p><pre><code class="language-PHP line-numbers">{% extends '@Gui/Layout/layout.twig' %}

{% block content %}

    {% embed '@Gui/Partials/widget.twig' with { widget_title: 'Orders List' } %}

        {% block widget_content %}

            {{ products | raw }}

        {% endblock %}

    {% endembed %}

{% endblock %}</code></pre>
        <p MadCap:conditions="Spryker.DemoShop">This is all! To see the table you created, go to <a href="http://zed.de.demoshop.local/hello-world" target="_blank">http://zed.de.demoshop.local/hello-world</a>. You will be able to see the products listed in the table.</p>
    </body>
</html>