<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="">
    <head>
    </head>
    <body>
        <h1>Tutorial - Console Commands</h1>
        <p>
            <img src="../../Resources/Images/shoptype/B2B_Shop.png" />
            <img src="../../Resources/Images/shoptype/B2C_Shop.png" />
            <img src="../../Resources/Images/shoptype/MasterSuite.png" />
            <img src="../../Resources/Images/shoptype/Demoshop.png" />
        </p>
        <p>A console command is a PHP class that contains the implementation of a functionality that can get executed from the command line.</p>
        <p>Spryker offers a wrapper over Symfony’s Console component, that makes the implementation and configuration of a console command easier.</p>
        <h2>Implementing a New Console Command</h2>
        <p>To exemplify how to implement and use a console command, we’ll build a console command that installs the application and updates the search and key-value storages. The <code>UpdateApplicationConsole</code> will run the following commands in one step :</p><pre><code class="language-PHP line-numbers">vendor/bin/console setup:install
vendor/bin/console setup:install-demo-data
vendor/bin/console collector:search:export
vendor/bin/console collector:storage:export</code></pre>
        <h3>1. Create the <code>UpdateApplicationConsole</code> class</h3>
        <p>The console commands must be added in Zed under the Communication layer of the module, in the Console folder. The console command must extend the Console class from Spryker, as you can see below :</p><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Zed\Tutorial\Communication\Console;
 
use Spryker\Zed\Kernel\Communication\Console\Console;
use Symfony\Component\Console\Input\ArrayInput;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
 
class UpdateApplicationConsole extends Console
{ 
//..
}</code></pre>
        <h3>2. Configure the new console command : specify the name and a short description</h3><pre><code class="language-PHP line-numbers">&lt;?php
const COMMAND_NAME = 'tutorial:update';
const DESCRIPTION = 'Install the application and update search and key-value data storage';

/**
 * @return void
 */
protected function configure()
{
    $this-&gt;setName(static::COMMAND_NAME);
    $this-&gt;setDescription(static::DESCRIPTION);
 
    parent::configure();
}</code></pre>
        <h3>3. Implement <code>UpdateApplicationConsole</code> command</h3>
        <p>The code that gets executed when the command is called from the command line must be placed in the <code>execute</code> function :</p><pre><code class="language-PHP line-numbers">&lt;?php
/**
 * @param \Symfony\Component\Console\Input\InputInterface $input
 * @param \Symfony\Component\Console\Output\OutputInterface $output
 *
 * @return int|null
 */
protected function execute(InputInterface $input, OutputInterface $output)
{
    $this-&gt;runDependingCommand('setup:install');
    $this-&gt;info('Application was successfully installed.', false);
    $this-&gt;runDependingCommand('setup:install-demo-data');
    $this-&gt;info('Demo data was successfully installed.', false);
    $this-&gt;runDependingCommand('collector:search:export');
    $this-&gt;info('Data was successfully exported to search storage.', false);
    $this-&gt;runDependingCommand('collector:storage:export');
    $this-&gt;info('Data was successfully exported to key-value storage.', false);
}</code></pre>
        <h3>4. Register the new console command</h3>
        <p>To enable the console command, it must be registered in the <code>getConsoleCommands()</code> operation in the <code>ConsoleConfig</code> class :</p><pre><code class="language-PHP line-numbers">&lt;?php
/**
 * @return \Symfony\Component\Console\Command\Command[]
 */
public function getConsoleCommands()
{
    $commands = [
        // ...
        $this-&gt;getLocator()-&gt;tutorial()-&gt;consoleUpdateApplicationConsole()
 
    ];
    return $commands;
}</code></pre>
        <h3>5. Test the new console command</h3><pre><code class="language-PHP line-numbers">vendor/bin/console tutorial:update</code></pre>
    </body>
</html>