<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" class="_Skins_HTML5___Top_Navigation" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../" data-mc-has-content-body="True" data-mc-conditions="Spryker.B2B,Spryker.B2C" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic;Default" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Tutorials|Advanced">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="msapplication-config" content="../../Skins/Favicons/browserconfig.xml" />
        <meta name="description" content="Depending on your version of spryker/kernel module, learn how to implement widgets or widget plugins." />
        <link rel="apple-touch-icon" sizes="180x180" href="../../Skins/Favicons/apple-touch-icon.png" />
        <link rel="shortcut icon" href="../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="96x96" href="../../Skins/Favicons/favicon-96x96.png" />
        <link rel="icon" sizes="32x32" href="../../Skins/Favicons/favicon-32x32.png" />
        <link rel="icon" sizes="16x16" href="../../Skins/Favicons/favicon-16x16.png" />
        <meta charset="utf-8" />
        <meta name="description" content="" />
        <meta name="author" content="" /><title>Tutorial - Implement Widgets and Widget Plugins</title>
        <!-- Google Tag Manager -->
        <script>/* <![CDATA[ */(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
			new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
			j=d.createElement(s),dl=l!='dataLayer'?'&amp;l='+l:'';j.async=true;j.src=
			'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
		})(window,document,'script','dataLayer','GTM-NP24S2');/* ]]> */</script>
        <!-- End Google Tag Manager -->
        <script>/* <![CDATA[ */
			var s = document.createElement("script");
			s.type = "text/javascript";
			s.src = "https://www.googletagmanager.com/gtag/js?id==UA-56589105-4";
			document.getElementsByTagName('head').item(0).appendChild(s);
		/* ]]> */</script>
        <script>/* <![CDATA[ */
			window.dataLayer = window.dataLayer || [];
			function gtag(){dataLayer.push(arguments);}
			gtag('js', new Date());
			gtag('config', 'UA-56589105-4');
		/* ]]> */</script>
        <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" />
        <link href="../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" />
        <link href="../../Skins/Fluid/stylesheets/foundation.6.2.3.css" rel="stylesheet" />
        <link href="../../Skins/Fluid/stylesheets/styles.css" rel="stylesheet" />
        <link href="../../Skins/Fluid/stylesheets/tablet.css" rel="stylesheet" />
        <link href="../../Skins/Fluid/stylesheets/mobile.css" rel="stylesheet" />
        <link href="../../resources/stylesheets/perfect-scrollbar.css" rel="stylesheet" />
        <link href="../../resources/stylesheets/prism.css" rel="stylesheet" />
        <style>/*&lt;meta /&gt;*/

.button.previous-topic-button
{
	-pie-background: url('../../Skins/Default/Stylesheets/Images/navigate-previous.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.next-topic-button
{
	-pie-background: url('../../Skins/Default/Stylesheets/Images/navigate-next.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.print-button
{
	-pie-background: url('../../Skins/Default/Stylesheets/Images/printer.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.expand-all-button
{
	-pie-background: url('../../Skins/Default/Stylesheets/Images/expand.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.button.collapse-all-button
{
	-pie-background: url('../../Skins/Default/Stylesheets/Images/collapse.png') no-repeat center center, linear-gradient(#ffffff, #ececec);
}

.needs-pie
{
	behavior: url('../../resources/scripts/PIE-no-motw.htc');
}

</style>
        <link href="../../resources/stylesheets/mainstyles.css" rel="stylesheet" />
        <link href="../../resources/tablestyles/patternedrows2.css" rel="stylesheet" />
        <script src="../../resources/scripts/custom.modernizr.js">
        </script>
        <script src="../../resources/scripts/jquery.min.js">
        </script>
        <script src="../../resources/scripts/require.min.js">
        </script>
        <script src="../../resources/scripts/require.config.js">
        </script>
        <script src="../../resources/scripts/foundation.6.2.3_custom.js">
        </script>
        <script src="../../resources/scripts/plugins.min.js">
        </script>
        <script src="../../resources/scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-right" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
                    <ul class="off-canvas-drilldown vertical menu off-canvas-list" data-drilldown="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-drilldown-submenu-parent" data-mc-css-tree-node-collapsed="is-drilldown-submenu-parent" data-mc-css-sub-menu="vertical menu slide-in-right is-drilldown-submenu" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="True" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.drilldown" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div data-sticky-container="" class="title-bar-container">
                        <nav class="title-bar tab-bar sticky" data-sticky="" data-options="marginTop:0" style="width:100%" data-sticky-on="small" data-mc-ignore="true">
                            <div class="middle title-bar-section outer-row clearfix">
                                <div class="menu-icon-container relative clearfix">
                                    <button class="menu-icon" data-toggle="offCanvas"><span></span>
                                    </button>
                                </div>
                            </div>
                            <div class="title-bar-layout outer-row">
                                <div class="logo-wrapper"><a class="logo" href="../../home.htm" alt="Logo"></a>
                                </div>
                                <div class="navigation-wrapper nocontent">
                                    <ul class="navigation clearfix" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="3" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                        <li class="placeholder" style="visibility:hidden"><a>placeholder</a>
                                        </li>
                                    </ul>
                                </div>
                                <div class="nav-search-wrapper">
                                    <div class="nav-search row">
                                        <form class="search" action="#">
                                            <div class="search-bar search-bar-container needs-pie">
                                                <input class="search-field needs-pie" type="search" placeholder="Search the Academy" />
                                                <div class="search-filter-wrapper">
                                                    <div class="search-filter">
                                                        <div class="search-filter-content">
                                                            <ul>
                                                                <li>All Files</li>
                                                            </ul>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="search-submit-wrapper" dir="ltr">
                                                    <div class="search-submit" title="Search">
                                                    </div>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </nav>
                    </div>
                    <section class="main-section">
                        <div class="row outer-row sidenav-layout">
                            <div class="sidenav-wrapper">
                                <div class="sidenav-container">
                                    <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                                </div>
                            </div>
                            <div class="body-container" data-mc-content-body="True">
                                <!-- Google Tag Manager (noscript) -->
                                <noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-NP24S2" height="0" width="0" style="display:none;visibility:hidden"></iframe>
                                </noscript>
                                <!-- End Google Tag Manager (noscript) -->
                                <div class="search-container">
                                    <form class="search" action="#">
                                        <div class="search-bar search-bar-container needs-pie _Skins_SearchTopics mc-component">
                                            <input class="search-field needs-pie" type="search" placeholder="Search" />
                                            <div class="search-filter-wrapper">
                                                <div class="search-filter">
                                                    <div class="search-filter-content">
                                                        <ul>
                                                            <li>All Files</li>
                                                        </ul>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="search-submit-wrapper" dir="ltr">
                                                <div class="search-submit" title="Search">
                                                </div>
                                            </div>
                                        </div>
                                    </form>
                                </div>
                                <div class="row collapse">
                                    <div class="top-bar">
                                        <div class="breadcrumbs-block">
                                            <div class="nocontent">
                                                <div class="MCBreadcrumbsBox_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="3" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">You are here: </span>
                                                </div>
                                            </div>
                                        </div>
                                        <div>
                                        </div>
                                        <form class="search" action="#">
                                            <div class="search-bar search-bar-container needs-pie _Skins_SearchHome mc-component">
                                                <input class="search-field needs-pie" type="search" placeholder="Search" />
                                                <div class="search-filter-wrapper">
                                                    <div class="search-filter">
                                                        <div class="search-filter-content">
                                                            <ul>
                                                                <li>All Files</li>
                                                            </ul>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="search-submit-wrapper" dir="ltr">
                                                    <div class="search-submit" title="Search">
                                                    </div>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                    <div class="topic-layout">
                                        <div>
                                            <div class="side-menu">
                                                <div data-sticky-container="" id="JEHxBM123UWS27emh7qfyw">
                                                    <div class="sticky sticky-menu" style="width:100%" data-sticky="" data-top-anchor="JEHxBM123UWS27emh7qfyw:top" data-bottom-anchor="contentBody:bottom" data-sticky-on="small" data-scroll-container-on="small">
                                                        <ul class="nocontent menu _Skins_SideMenu mc-component" data-mc-is-context-sensitive="True" data-mc-linked-toc="Data/Tocs/master.js" data-mc-side-menu="True" data-mc-max-depth="1" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                                        </ul>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div>
                                            <div class="side-menu">
                                                <div class="toolbar-wrapper">
                                                    <div class="widget-github js-widget-github"><a class="widget-github-link js-widget-github-link" href="https://github.com/spryker/spryker-documentation" target="_blank"><svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="0 0 26 26"><path d="M13.5 0C6.057 0 0 6.057 0 13.5c0 5.888 3.791 10.905 9.058 12.745a.463.463 0 0 0 .258.088c1.316.43 2.724.667 4.184.667C20.943 27 27 20.943 27 13.5S20.943 0 13.5 0zm0 .931c6.93 0 12.569 5.639 12.569 12.569 0 5.428-3.459 10.061-8.287 11.818a1.903 1.903 0 0 1-.092-.527v-2.446c0-.975-.477-2.037-.946-2.75 2.584-.436 5.537-1.776 5.537-6.779 0-1.37-.429-2.58-1.275-3.598.186-.611.415-1.9-.225-3.52a.47.47 0 0 0-.291-.272c-.13-.04-1.326-.35-3.806 1.277a12.921 12.921 0 0 0-6.36 0c-2.481-1.63-3.68-1.319-3.809-1.277a.47.47 0 0 0-.29.273C5.582 7.319 5.811 8.607 6 9.218c-.85 1.018-1.279 2.227-1.279 3.598 0 4.957 2.9 6.323 5.463 6.778-.322.407-.66.934-.81 1.47-.661.184-2.018.19-2.929-1.37-.032-.06-.829-1.475-2.4-1.584-.25.002-.882.042-1.035.525-.169.537.424.944.679 1.117l.058.034c.029.015.707.371 1.213 1.644.105.333 1.03 2.84 4.353 2.399.002.367 0 .552-.004.7v.26c0 .15-.045.378-.096.525C4.386 23.558.931 18.924.931 13.5.931 6.57 6.57.931 13.5.931zm6.51 5.375c.5 1.471.158 2.537.035 2.839a.468.468 0 0 0 .089.49c.805.883 1.214 1.952 1.214 3.181 0 4.72-2.796 5.666-5.535 5.97a.464.464 0 0 0-.253.815c.368.314 1.199 1.68 1.199 2.744v2.446c0 .009.001.414.134.809a12.513 12.513 0 0 1-6.792-.002c.135-.396.139-.802.139-.81l.001-.248c.002-.211.006-.497 0-1.266a.473.473 0 0 0-.174-.362.47.47 0 0 0-.391-.09c-3.126.681-3.802-1.576-3.828-1.67l-.016-.047c-.448-1.135-1.037-1.713-1.388-1.975.759.267 1.182 1.007 1.193 1.024 1.231 2.107 3.264 2.162 4.328 1.685a.463.463 0 0 0 .27-.36c.095-.665.826-1.545 1.196-1.87a.464.464 0 0 0 .136-.488.461.461 0 0 0-.39-.324c-2.73-.31-5.524-1.266-5.524-5.98 0-1.228.41-2.3 1.219-3.181a.464.464 0 0 0 .087-.491c-.124-.302-.467-1.364.031-2.837.396.013 1.362.182 2.988 1.286.112.076.256.1.387.063.973-.27 2.058-.416 3.135-.421 1.08.005 2.166.15 3.14.421.131.037.273.013.386-.063 1.635-1.11 2.6-1.275 2.984-1.288z" /></svg></a>
                                                    </div>
                                                    <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolbar mc-component nocontent" style="mc-topic-toolbar-items: PreviousTopic NextTopic Print ExpandAll CollapseAll;">
                                                        <div class="button-group-container-left">
                                                            <button class="button needs-pie previous-topic-button" title="Navigate previous">
                                                                <img src="../../Skins/Default/Stylesheets/Images/transparent.gif" alt="previous topic" />
                                                            </button>
                                                            <button class="button needs-pie next-topic-button" title="Navigate next">
                                                                <img src="../../Skins/Default/Stylesheets/Images/transparent.gif" alt="next topic" />
                                                            </button>
                                                            <button class="button needs-pie print-button" title="Print">
                                                                <img src="../../Skins/Default/Stylesheets/Images/transparent.gif" alt="print" />
                                                            </button>
                                                            <button class="button needs-pie expand-all-button" data-state1-class="expand-all-button" data-state2-class="collapse-all-button" data-state2-title="Collapse all" title="Expand all" data-state1-title="Expand all">
                                                                <img src="../../Skins/Default/Stylesheets/Images/transparent.gif" alt="expand all" />
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="js-anchorer main-content">
                                                    <h1>HowTo - Implement Widgets and Widget Plugins</h1>
                                                    <p>This tutorial provides instructions on how to implement Widgets and Widget Plugins into <a href="https://documentation.spryker.com/front-end_developer_guide/yves/modular-frontend.htm">Modular Frontend</a>. </p>
                                                    <h2>How to Implement a Widget?</h2>
                                                    <p>Each widget implementation is supposed to be designed as components: considering reusability and being able to render them on different Pages.</p>
                                                    <div class="MCDropDown MCDropDown_Closed dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Step 1 - Implement the Widget class</a></span>
                                                        <div class="MCDropDownBody dropDownBody">
                                                            <p>To implement a widget class follow the detailed example below.</p><pre><code class="language-PHP line-numbers">&lt;?php
  
namespace Pyz\Yves\FooModule\Widget;
  
use Spryker\Yves\Kernel\Widget\AbstractWidget;
  
class FooBarWidget extends AbstractWidget
{
	public function __construct($arg1, $arg2, ...)
	{
		// The constructor arguments are the input to render/create a widget in twig templates.
		// The constructor initializes the widget parameters that will be available inside the template to be rendered.
		// The widget parameters are publicly available on a widget instance by its ArrayAccess interface.
		$this-&gt;addParameter('param1', ...)
			-&gt;addParameter('param2', ...);
	}
  
	public function getName(): string
	{
		// By convention the name of the widgets are equal with the name of the widget class to be able to find it easily from twig templates.
		// The widget names must be unique as they are registered globally.
		return 'FooBarWidget';
	}
      
	public function getTemplate(): string
	{
		// The template of the widget to be rendered by default.
		return '@FooModule/views/foo-bar-widget/foo-bar-widget.twig';
	}
}</code></pre>
                                                        </div>
                                                    </div>
                                                    <div class="MCDropDown MCDropDown_Closed dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Step 2 - Implement the Widget template</a></span>
                                                        <div class="MCDropDownBody dropDownBody">
                                                            <p>Create the template file that was added in your <var>Widget's getTemplate()</var> method previously.</p>
                                                            <div class="MCDropDown MCDropDown_Closed dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />src/Pyz/Yves/FooModule/Theme/default/views/foo-bar-widget/foo-bar-widget.twig</a></span>
                                                                <div class="MCDropDownBody dropDownBody"><pre><code class="language-PHP line-numbers">{% extends template('widget') %}

{% define data = {
    param1: _widget.param1, 
    param2: _widget.param2 | default
} %}

{% block body %}
    {# Render widget content here. #}
{% endblock %}</code></pre>
                                                                </div>
                                                            </div>
                                                            <p>In the template of the widget, the parameters are accessible through the <var>_widget</var> twig variable. This way in twig template it's easy to determine where is a parameter coming from.</p>
                                                            <p class="example">When you see <var>_widget.foo</var>, it means that the foo parameter is coming from the widget directly.</p>
                                                        </div>
                                                    </div>
                                                    <div class="MCDropDown MCDropDown_Closed dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Step 3 - Activate your Widget</a></span>
                                                        <div class="MCDropDownBody dropDownBody">
                                                            <p>You can activate Widgets by adding them to <var>\Pyz\Yves\ShopApplication\ShopApplicationDependencyProvider::getGlobalWidgets()</var> method. Widgets are instantiated in the background when they are called in twig templates. To activate a widget just use their <b>FQCNs</b> (Fully Qualified Class Names).</p>
                                                            <p class="info">A widget with a given set of parameters, called multiple times, in the same <code>http</code> request is instantiated only once and cached in the memory for performance reasons. This also means that when there is a widget which has a bit heavier initialization logic, it will be executed only once even when used several times in twig templates. When the same widget is called with different params it will still be a new instance and run its initialization separately.</p>
                                                            <p><pre><code class="language-PHP line-numbers">&lt;?php
 
namespace Pyz\Yves\ShopApplication;
 
use Pyz\Yves\FooModule\Widget\FooBarWidget;
use SprykerShop\Yves\ShopApplication\ShopApplicationDependencyProvider as SprykerShopApplicationDependencyProvider;
 
class ShopApplicationDependencyProvider extends SprykerShopApplicationDependencyProvider
{
	/**
	 * @return string[]
	 */
	protected function getGlobalWidgets(): array
	{
		return [
			FooBarWidget::class,
		];
	}
}</code></pre>
                                                            </p>
                                                        </div>
                                                    </div>
                                                    <div class="MCDropDown MCDropDown_Closed dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Step 4 - Render the Widget</a></span>
                                                        <div class="MCDropDownBody dropDownBody">
                                                            <p>Widgets are placed and rendered in twig templates. The following examples show several cases how to use them.</p>
                                                            <p><b>Simple widget rendering with input parameters:</b>
                                                            </p><pre><code class="language-xml">{% widget 'FooWidget' args [param1, param2] only %}
{% endwidget %}</code></pre>
                                                            <p><b>Widget rendering with different templates:</b>
                                                            </p><pre><code class="language-xml line-numbers">{% widget 'FooWidget' use view('view1') only %}
{% endwidget %}
 
{% widget 'FooWidget' use view('view2') only %}
{% endwidget %}</code></pre>
                                                            <p><b>Widget rendering with additional HTML:</b>
                                                            </p><pre><code class="language-xml line-numbers">{% set color = 'red' %}
 
{% if widgetExists('FooWidgetPlugin') %}
	&lt;div style="border:1px solid {{ color }}"&gt;
		{{ widget('FooWidgetPlugin', param1, param2) }}
	&lt;/div&gt;
{% endif %}				</code></pre>
                                                            <p><b>Widget rendering with additional HTML and context variables:</b>
                                                            </p><pre><code class="language-xml line-numbers">{% widget 'FooWidget' args [param1, param2] with {color: 'red'} only %}
	{% block body %}
		&lt;div style="border:1px solid {{ color }}"&gt;
			{{ parent() }}
		&lt;/div&gt;
	{% endblock %}
{% endwidget %}</code></pre>
                                                            <p><b>Widget rendering with fallback when it doesn't exist or not activated:</b>
                                                            </p><pre><code class="language-xml line-numbers">{% widget 'FooWidget' args [param1, param2] only %}
{% nowidget %}
	display something else here...
{% endwidget %}						</code></pre>
                                                            <p><b>Render widget into a variable:</b>
                                                            </p><pre><code class="language-xml">{% set fooWidget = findWidget('FooWidget', [param1, param2]) %}
{% set foo = fooWidget.foo|default %}</code></pre>
                                                            <p><b>Subsequently, render widgets as a fallback when another widget doesn't exist:</b>
                                                            </p><pre><code class="language-xml line-numbers">{% widget 'FooWidget' only %}
{% elsewidget 'BarWidget' only %}
{% nowidget %}
	display something else here...
{% endwidget %}</code></pre>
                                                        </div>
                                                    </div>
                                                    <h2>Deprecations</h2>
                                                    <h3>How to Implement a Widget Plugin?</h3>
                                                    <p class="info">This section is valid only for projects which are running module <var>spryker/kernel</var> up to version <b>3.24.0</b>, exclusively. In version <b>3.24.0</b>of the Kernel module, the widget plugins were deprecated. In case you are running version <b>3.24.0</b> or later, refer to the previous section.</p>
                                                    <p> Follow the steps below to implement a widget.  </p>
                                                    <div class="MCDropDown MCDropDown_Closed dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Step 1 - Place Widget extensions</a></span>
                                                        <div class="MCDropDownBody dropDownBody">
                                                            <p><a name="step1"></a>In the module you are planning to extend, find the extension point in the twig templates and place the necessary twig widget function(s) (see <a href="#How_to_implement_a_Widget?">How to implement a Widget</a> section).</p>
                                                            <p><var>@MyPage/views/foo/foo-bar.twig</var>
                                                            </p><pre><code class="language-xml">&lt;p&gt;Some MyPage related content.&lt;/p&gt;
 
{{ widget('MyWidgetPlugin', $param1, param2) }}
 
&lt;p&gt;Some other MyPage related content.&lt;/p&gt;</code></pre>
                                                            <p>The following twig functions can be used to hook widgets in any twig template:</p>
                                                            <div class="table-wrap">
                                                                <table style="mc-table-style: url('../../resources/tablestyles/patternedrows2.css');border-top-left-radius: 4px;border-top-right-radius: 4px;border-bottom-right-radius: 4px;border-bottom-left-radius: 4px;border-left-style: solid;border-left-width: 1px;border-left-color: #e7ebef;border-right-style: solid;border-right-width: 1px;border-right-color: #e7ebef;border-top-style: solid;border-top-width: 1px;border-top-color: #e7ebef;border-bottom-style: solid;border-bottom-width: 1px;border-bottom-color: #e7ebef;margin-left: 0;margin-right: auto;width: 100%;" class="TableStyle-PatternedRows2" cellspacing="0">
                                                                    <col class="TableStyle-PatternedRows2-Column-Regular" />
                                                                    <col class="TableStyle-PatternedRows2-Column-Regular" />
                                                                    <col class="TableStyle-PatternedRows2-Column-Regular" />
                                                                    <thead>
                                                                        <tr class="TableStyle-PatternedRows2-Head-Header1">
                                                                            <th class="TableStyle-PatternedRows2-HeadE-Regular-Header1">Function</th>
                                                                            <th class="TableStyle-PatternedRows2-HeadE-Regular-Header1">Description</th>
                                                                            <th class="TableStyle-PatternedRows2-HeadD-Regular-Header1">Example</th>
                                                                        </tr>
                                                                    </thead>
                                                                    <tbody>
                                                                        <tr class="TableStyle-PatternedRows2-Body-LightRows">
                                                                            <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows"><var>widget()</var>
                                                                            </td>
                                                                            <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">This is the most commonly used widget function. It renders a widget by name with the given arguments. When the widget is not registered in the <b>current render context</b> of the twig template where the method is called, then there will be no output of it. This makes widgets harmless and optional when they are placed in any template.</td>
                                                                            <td class="TableStyle-PatternedRows2-BodyD-Regular-LightRows"><var>{{ widget('WidgetName', ...$arguments) }}</var>
                                                                            </td>
                                                                        </tr>
                                                                        <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                                                                            <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows"><var>widgetBlock()</var>
                                                                            </td>
                                                                            <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows">Sometimes a widget defines multiple <a href="https://twig.symfony.com/doc/2.x/tags/block.html">twig blocks</a> that can be rendered separately. By calling this method and providing the appropriate block name you can render only some parts of a widget.

							</td>
                                                                            <td class="TableStyle-PatternedRows2-BodyD-Regular-DarkerRows"><var>{{ widgetBlock('WidgetName', 'blockName', ...$arguments) }}</var>
                                                                            </td>
                                                                        </tr>
                                                                        <tr class="TableStyle-PatternedRows2-Body-LightRows">
                                                                            <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows"><var>widgetGlobal()</var>
                                                                            </td>
                                                                            <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">Some widgets might need to be rendered on most page or on every page as part of the layout. These widgets are registered in a central place only once and can be rendered in any twig template by calling the <var>widgetGlobal()</var> twig function.</td>
                                                                            <td class="TableStyle-PatternedRows2-BodyD-Regular-LightRows"><var>{{ widgetGlobal('WidgetName', ...$arguments) }}</var>
                                                                            </td>
                                                                        </tr>
                                                                        <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                                                                            <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows"><var>widgetExists()</var>
                                                                            </td>
                                                                            <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows">Use this function when you need to check if a widget is registered in the <b>current render context</b> (e.g. will be rendered) and do something in that case. For example, when you need to add a container/separator when the widget is rendered, or when you want to render something else, when a widget is not shown.
                            </td>
                                                                            <td class="TableStyle-PatternedRows2-BodyD-Regular-DarkerRows"><var>{{ widgetExists('WidgetName', ...$arguments) }}</var>
                                                                            </td>
                                                                        </tr>
                                                                        <tr class="TableStyle-PatternedRows2-Body-LightRows">
                                                                            <td class="TableStyle-PatternedRows2-BodyB-Regular-LightRows"><var>widgetGlobalExists()</var>
                                                                            </td>
                                                                            <td class="TableStyle-PatternedRows2-BodyB-Regular-LightRows">Use this function when you need to check if a <b>global</b> widget is registered (e.g. will be rendered) and do something in that case. For example, when you need to add a container/separator when the widget is rendered, or when you want to render something else, when a widget is not shown.
                            </td>
                                                                            <td class="TableStyle-PatternedRows2-BodyA-Regular-LightRows"><var>{{ widgetGlobalExists('WidgetName', ...$arguments) }}</var>
                                                                            </td>
                                                                        </tr>
                                                                    </tbody>
                                                                </table>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="MCDropDown MCDropDown_Closed dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Step 2 - Create Widget interface and contract</a></span>
                                                        <div class="MCDropDownBody dropDownBody">
                                                            <p>In the same module you will create an interface that represents the widget used in the template. This step is important to make <b>Dependency Inversion</b> visible on PHP level in the caller module.</p>
                                                            <p>Create the interface for the widget and define the <var>initialize()</var> method. This method is a must have, it defines the contract (e.g. input) of a widget plugin.</p>
                                                            <p>The inputs of the widget plugins are usually different, that's why the <var>initialize()</var> method has to be defined for each case individually. When calling the <var>widget()</var>, <var>widgetBlock()</var> and <var>widgetGlobal()</var> twig functions, the <var>initialize()</var> method of the widget plugin will be executed internally, thus the system by design makes sure that the required inputs are passed.</p>
                                                            <p>In the following example the <var>initialize()</var> method defines one mandatory and one optional parameter. Also note that the interface defines the <i>NAME</i> constant. It's value is used in <a href="#step1">step 1</a> to identify and render the right widget.</p>
                                                            <p><var>src/Pyz/Yves/MyPage/Dependency/Plugin/MyWidget/MyWidgetPluginInterface.php</var>
                                                            </p><pre><code class="language-PHP line-numbers">&lt;?php
 
namespace Pyz\Yves\MyPage\Dependency\Plugin\MyWidget;
 
use Spryker\Yves\Kernel\Dependency\Plugin\WidgetPluginInterface;
 
interface MyWidgetPluginInterface extends WidgetPluginInterface
{
	const NAME = 'MyWidgetPlugin';
 
	/**
	 * @param string $myMandatoryParam
	 * @param int|null $myOptionalParam
	 *
	 * @return void
	 */
	public function initialize(string $myMandatoryParam, int $myOptionalParam = null): void;
}</code></pre>
                                                        </div>
                                                    </div>
                                                    <div class="MCDropDown MCDropDown_Closed dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Step 3 - Implement the Widget plugin</a></span>
                                                        <div class="MCDropDownBody dropDownBody">
                                                            <p>In the target widget module (<b>MyWidget</b> in the examples) now you can implement the widget plugin. Extend  your plugin from <var>\Spryker\Yves\Kernel\Widget\AbstractWidgetPlugin</var> and implement the following methods:</p>
                                                            <ul>
                                                                <li value="1"><var>getName()</var> - returns the name of the widget as it's used in the template. Most cases you can return <var>static::NAME;</var> in the method when the name is defined in the interface.
</li>
                                                                <li value="2"><var>getTemplate()</var> - returns the template file path to renter the widget. </li>
                                                                <li value="3"><var>initialize()</var> - initializes the rendering of the widget template, by processing the input parameters and providing parameters for the template to be rendered. Also, sub-widgets can be registered here.
						<p class="info"> When a widget plugin is called several times with the same parameters by the widget twig functions, this method is executed only once to avoid unnecessary overhead.
					</p></li>
                                                            </ul>
                                                            <p><pre><code class="language-PHP line-numbers">&lt;?php
 
namespace Pyz\Yves\MyWidget\Plugin\MyPage;
 
use Pyz\Yves\MyPage\Dependency\Plugin\MyWidget\MyWidgetPluginInterface;
use Spryker\Yves\Kernel\Widget\AbstractWidgetPlugin;
 
class MyWidgetPlugin extends AbstractWidgetPlugin implements MyWidgetPluginInterface
{
	/**
	 * @param string $myMandatoryParam
	 * @param int|null $myOptionalParam
	 *
	 * @return void
	 */
	public function initialize(string $myMandatoryParam, int $myOptionalParam = null): void
	{
		$this-&gt;addParameter('myMandatoryParam', $myMandatoryParam)
			-&gt;addParameter('myOptionalParam', $myOptionalParam)
			-&gt;addParameter('myComputedParam', $this-&gt;getMyComputedParam());
	}
 
	/**
	 * @return string
	 */
	public static function getName(): string
	{
		return static::NAME;
	}
 
	/**
	 * @return string
	 */
	public static function getTemplate(): string
	{
		return '@MyWidget/views/my-widget/my-widget.twig';
	}
}</code></pre>
                                                            </p>
                                                        </div>
                                                    </div>
                                                    <div class="MCDropDown MCDropDown_Closed dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Step 4 - Implement Widget template</a></span>
                                                        <div class="MCDropDownBody dropDownBody">
                                                            <p>Create the template file that was added in your Widget's <var>getTemplate()</var> method previously.</p>
                                                            <div class="MCDropDown MCDropDown_Closed dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />src/Pyz/Yves/MyWidget/Theme/default/views/my-widget/my-widget.twig</a></span>
                                                                <div class="MCDropDownBody dropDownBody"><pre><code class="language-PHP line-numbers">{% extends template('widget') %}

{% define data = {
    myMandatoryParam: _widget.myMandatoryParam, 
    myOptionalParam: _widget.myOptionalParam | default,
    myComputedParam: _widget.myComputedParam
} %}

{% block body %}
    {# Render widget content here. #}
{% endblock %}</code></pre>
                                                                </div>
                                                            </div>
                                                            <p>In the template of the widget the parameters are accessible through the <var>_widget</var> twig variable. This way in twig template it's easy to determine where is a parameter coming from, when you see <var>_widget.foo</var>, it means that the foo parameter is coming from the widget directly.</p>
                                                        </div>
                                                    </div>
                                                    <div class="MCDropDown MCDropDown_Closed dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Step 5 - Activate the Widget</a></span>
                                                        <div class="MCDropDownBody dropDownBody">
                                                            <p>There are three ways of activating a widget, depending on their scope where they need to be rendered:</p>
                                                            <ul>
                                                                <li value="1"><a href="#Activate_a_widget_in_a_Controller_action">Activate a widget in a Controller action</a><![CDATA[
]]></li>
                                                                <li value="2"><a href="#activate_a_widget_in_another_widget">Activate a widget in another widget</a>
                                                                </li>
                                                                <li value="3">
                                                                    <p><a href="#Activate_a_widget_to_be_available_globally">Activate a widget to be available globally</a>
                                                                    </p>
                                                                </li>
                                                            </ul>
                                                            <div class="MCDropDown MCDropDown_Closed dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Activate a widget in a Controller action
</a></span>
                                                                <div class="MCDropDownBody dropDownBody">
                                                                    <p><a name="Activate_a_widget_in_a_Controller_action"></a>Most of the times when a Page needs extension we need to extend a template that is rendered by a Controller action. In this case, the action need to return a <var>\Spryker\Yves\Kernel\View\View</var> object. This View object can define the data for the template of the controller to be rendered, the list of active widget plugins and the template to render.</p><pre><code class="language-PHP line-numbers">&lt;?php
 
namespace Pyz\Yves\MyPage\Controller;
 
use SprykerShop\Yves\ShopApplication\Controller\AbstractController;
 
/**
 * @method \Pyz\Yves\MyPage\MyPageFactory getFactory()
 */
class FooController extends AbstractController
{
	/**
	 * @return \Spryker\Yves\Kernel\View\View
	 */
	public function barAction()
	{
		return $this-&gt;view(
			$this-&gt;getViewData(),
			$this-&gt;getFactory()-&gt;getMyPageFooBarWidgetPlugins(),
			'@MyPage/views/foo/foo-bar.twig'
		);
	}
 
	/**
	 * @return array
	 */
	protected function getViewData(): array
	{
		return [
			// some key-value array for the template to be rendered
		];
	}
}</code></pre>
                                                                    <div class="info">When a controller action returns a <var>View</var> object, in the rendered twig template by default the data passed from the controller (view data) is accessible through the <var>_view</var> twig variable. This way in twig template it's easy to determine where is a parameter coming from, when you see <var>_view.foo</var>, it means that the foo parameter is coming from the controller directly.
						<p>If you would like to access the parameters directly without the <var>_view</var> variable in twig, set the <code>ShopApplicationConfig::useViewParametersToRenderTwig()</code> module configuration method to return true instead of the default false.</p></div>
                                                                    <p><pre><code class="language-PHP line-numbers">&lt;?php
 
namespace Pyz\Yves\MyPage;
 
use Spryker\Yves\Kernel\AbstractFactory;
 
class MyPageFactory extends AbstractFactory
{
	/**
	 * @return string[]
	 */
	public function getMyPageFooBarWidgetPlugins(): array
	{
		return $this-&gt;getProvidedDependency(MyPageDependencyProvider::PLUGIN_MY_PAGE_FOO_BAR_WIDGETS);
	}
}										</code></pre>
                                                                    </p>
                                                                    <p><pre><code class="language-PHP line-numbers">&lt;?php
 
namespace Pyz\Yves\MyPage;
 
use Spryker\Yves\Kernel\AbstractFactory;
 
class MyPageFactory extends AbstractFactory
{
	/**
	 * @return string[]
	 */
	public function getMyPageFooBarWidgetPlugins(): array
	{
		return $this-&gt;getProvidedDependency(MyPageDependencyProvider::PLUGIN_MY_PAGE_FOO_BAR_WIDGETS);
	}
}				
						</code></pre>
                                                                    </p>
                                                                    <p><pre><code class="language-PHP line-numbers">&lt;?php
 
namespace Pyz\Yves\MyPage;
 
use Pyz\Yves\MyWidget\Plugin\MyPage\MyWidgetPlugin;
use Spryker\Yves\Kernel\AbstractBundleDependencyProvider;
use Spryker\Yves\Kernel\Container;
 
class ProductSetDetailPageDependencyProvider extends AbstractBundleDependencyProvider
{
	const PLUGIN_MY_PAGE_FOO_BAR_WIDGETS = 'PLUGIN_MY_PAGE_FOO_BAR_WIDGETS';
 
	/**
	 * @param \Spryker\Yves\Kernel\Container $container
	 *
	 * @return \Spryker\Yves\Kernel\Container
	 */
	public function provideDependencies(Container $container)
	{
		$container = $this-&gt;addMyPageFooBarWidgetPlugins($container);
 
		return $container;
	}
 
	/**
	 * @param \Spryker\Yves\Kernel\Container $container
	 *
	 * @return \Spryker\Yves\Kernel\Container
	 */
	protected function addMyPageFooBarWidgetPlugins(Container $container)
	{
		$container[self::PLUGIN_MY_PAGE_FOO_BAR_WIDGETS] = function () {
			return $this-&gt;getMyPageFooBarWidgetPlugins();
		};
 
		return $container;
	}
 
	/**
	 * @return string[]
	 */
	protected function getMyPageFooBarWidgetPlugins(): array
	{
		// activate list of widgets plugins for FooController:barAction()
		return [
			MyWidgetPlugin::class,
		];
	}
}</code></pre>
                                                                    </p>
                                                                </div>
                                                            </div>
                                                            <div class="MCDropDown MCDropDown_Closed dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Activate a widget in another widget</a></span>
                                                                <div class="MCDropDownBody dropDownBody">
                                                                    <p><a name="activate_a_widget_in_another_widget"></a>In same cases it's necessary to extend widgets with other sub-widgets. The concept of nesting widgets in each other is the same as they were used in a Page, the only difference is how they are activated. You can activate sub-widgets in the <code>initialize()</code> method of any widget.</p>
                                                                    <p>Those widgets that were activated in a controller are not available in other widgets. Every rendered Page and Widget have their own scope of twig variables and available widgets.</p>
                                                                    <p><pre><code class="language-PHP line-numbers">&lt;?php
 
namespace Pyz\Yves\MyWidget\Plugin\MyPage;
 
use Pyz\Yves\MyPage\Dependency\Plugin\MyWidget\MyWidgetPluginInterface;
use Spryker\Yves\Kernel\Widget\AbstractWidgetPlugin;
 
/**
 * @method \Pyz\Yves\MyWidget\MyPageWidget getFactory()
 */
class MyWidgetPlugin extends AbstractWidgetPlugin implements MyWidgetPluginInterface
{
	/**
	 * @param string $myMandatoryParam
	 * @param int|null $myOptionalParam
	 *
	 * @return void
	 */
	public function initialize(string $myMandatoryParam, int $myOptionalParam = null): void
	{
		// activate list of sub-widgets
		$this-&gt;addWidgets($this-&gt;getFactory()-&gt;getMyWidgetSubWidgets());
	}
 
	// ...
}</code></pre>
                                                                    </p>
                                                                </div>
                                                            </div>
                                                            <div class="MCDropDown MCDropDown_Closed dropDown"><span class="MCDropDownHead dropDownHead"><a href="javascript:void(0);" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage"><img class="MCDropDown_Image_Icon" src="../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Closed" data-mc-alt2="Open" />Activate a widget to be available globally </a></span>
                                                                <div class="MCDropDownBody dropDownBody">
                                                                    <p><a name="Activate_a_widget_to_be_available_globally"></a>Widgets available globally are activated in a central place, in the dependency provider of <code>ShopApplication</code> module. Only these widgets can be reached with the <code>widgetGlobal()</code> twig functions.</p>
                                                                    <p><pre><code class="language-PHP line-numbers">&lt;?php
 
namespace Pyz\Yves\ShopApplication;
 
use SprykerShop\Yves\ShopApplication\ShopApplicationDependencyProvider as SprykerShopApplicationDependencyProvider;
 
class ShopApplicationDependencyProvider extends SprykerShopApplicationDependencyProvider
{
	/**
	 * @return string[]
	 */
	protected function getGlobalWidgetPlugins(): array
	{
		return [
			// list of active global widgets
		];
	}
}</code></pre>
                                                                    </p>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <p><i>Last review date: Feb 06th, 2019</i>
                                                    </p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div><a class="scroll-top js-scroll-top" href="#"><svg xmlns="http://www.w3.org/2000/svg" width="12" height="16" viewBox="0 0 12 16"><path fill="#FFF" fill-rule="nonzero" d="M11.82 5.22a.54.54 0 0 1 0 .806.636.636 0 0 1-.852 0L6.607 1.937v13.49a.587.587 0 0 1-.602.573c-.336 0-.611-.258-.611-.573V1.937L1.04 6.026a.647.647 0 0 1-.86 0 .54.54 0 0 1 0-.807L5.573.163a.636.636 0 0 1 .852 0L11.82 5.22z" /></svg></a>
                                <script>/* <![CDATA[ */
			function createGithubUrl() {
			var GITHUB_CONTENT_PATH = '/blob/master/public';
			var link = document.querySelector('.js-widget-github-link');
			var href =
			link.getAttribute('href')
			+ GITHUB_CONTENT_PATH
			+ window.location.pathname;
			link.setAttribute('href', href);
			}
			createGithubUrl();
		/* ]]> */</script>
                                <script>/* <![CDATA[ */
			requirejs.config({
				appDir: '',
				paths: {
					'clipboard': ['https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.1/clipboard.min']
					
				}
			});
			require(['clipboard'], function(Clipboard) {
				console.log(Clipboard);
				window.Clipboard = Clipboard;
			});
		/* ]]> */</script>
                                <script src="../../resources/scripts/perfect-scrollbar.js">
                                </script>
                                <script src="../../resources/scripts/imagemapster.js">
                                </script>
                                <script src="../../resources/scripts/script.js">
                                </script>
                                <script src="../../resources/scripts/prism.js">
                                </script>
                            </div>
                        </div>
                    </section><a data-close="true"></a>
                </div>
            </div>
            <script>/* <![CDATA[ */$(document).foundation();/* ]]> */</script>
        </div>
    </body>
</html>
