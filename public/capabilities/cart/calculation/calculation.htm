<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="" MadCap:conditions="Spryker.B2B,Spryker.B2C,Spryker.ShopSuite,Spryker.DemoShop">
    <head><title>Calculation | Spryker</title>
        <meta name="description" content="The Calculation module is used to calculate the cart totals that are displayed in the cart/checkout or when the order is placed." />
    </head>
    <body>
        <h1>Calculation <img src="../../../Resources/Images/shoptype/B2B_Shop.png" /> <img src="../../../Resources/Images/shoptype/B2C_Shop.png" /> <img src="../../../Resources/Images/shoptype/MasterSuite.png" /> <img src="../../../Resources/Images/shoptype/Demoshop.png" /></h1>
        <p>
            <MadCap:relatedTopics target="_self" style="mc-label: 'Versions';mc-help-control-display: list;">
                <MadCap:relatedTopic src="calculation-3-0.htm" />
            </MadCap:relatedTopics>
        </p>
        <p>Spryker Commerce OS uses the Calculation module to calculate the cart totals that are displayed in the cart/checkout or when the order is placed.
It's also used to recalculate the order totals after refund.
</p>
        <p>The calculation module extensively uses plugins to inject calculation algorithms.
</p>
        <h2>How Calculation Works</h2>
        <div class="info"><b>Quote Transfer</b><![CDATA[
			]]><p>The quote transfer object is used to store data and plugins that calculate the amounts.</p></div>
        <p>There is already a list of plugins which populate quote transfer with corresponding data. Calculations are executed every time the content of the cart is updated.</p>
        <p class="tip">For more details see <MadCap:xref href="../Cart Functionality and Calculations/cart-functionality.htm#CartDataFlow">Cart Data Flow</MadCap:xref>.
</p>
        <p>If manual cart recalculation is required, <var>CalculationFacade::recalculate</var> can be called from Zed or <var>CalculationClient::recalculate</var> from Yves with prepared <MadCap:xref href="calculation-data-structure.htm#quote-transfer">Quote Transfer</MadCap:xref>. When the recalculation operation is called, the calculator runs the calculator plugin stack and each plugin modifies the QuoteTransfer (calculates discounts, adds sum gross prices, calculates taxes, etc.). Most plugins require the <var>unitPrice</var> and the <var>quantity</var> to be provided.

</p>
        <div class="tip"><b>Calculated Amounts</b><![CDATA[
			]]><p>Each amount is calculated and stored in cents.</p></div>
        <p>Its important to understand how the Calculator works internally with the <var>CalculableObjectTransfer</var> generic data structure. This data structure allows us to work with different object types e.g. <var>OrderTransfer</var> and <var>QuoteTransfer</var>.</p>
        <ul>
            <li>Therefor, before passing a Quote object to the calculators, the object is then converted to a calculable object.</li>
            <li>After calculation, the original object that was passed is converted back to the object's recalculated state.</li>
        </ul>
        <p>Each calculable object holds reference to  the <var>CalculableObjectTransfer::originalQuote</var> and <var>CalculableObjectTransfer::originalOrder objects</var>, in order for you to use this for more context when working with a custom calculator.</p>
        <p class="important">Do not modify <var>CalculableObjectTransfer::originalQuote</var> and <var>CalculableObjectTransfer::originalOrder</var> as changes will not be propagated.</p>
        <p>Download our <a href="../../../Resources/Documents/Calculation.xlsx">Calculation Spreadsheet</a> to see how calculations are made.</p>
        <h2>Price Mode</h2>
        <p>You can switch price mode calculators using by setting <var>QuoteTransfer::priceMode</var> property, this will change tax calculation and values for <var>unitPrice</var> and <var>sumPrice</var> will be read from <var>unitNetPrice</var> and <var>sumNetPrice</var> respectively. This value is set in cart Expander <var>CartItemPricePlugin</var>. Price mode is also persisted when order is placed.</p>
    </body>
</html>