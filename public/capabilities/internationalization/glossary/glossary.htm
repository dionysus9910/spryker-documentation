<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="" MadCap:conditions="Spryker.B2B,Spryker.B2C,Spryker.DemoShop,Spryker.ShopSuite">
    <head><title>Glossary Creation | Spryker</title>
        <link href="../../../Resources/TableStyles/PatternedRows2.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <meta name="description" content="In the Glossary you can easily store basic text information in different languages so your customers can switch to their preferred one." />
    </head>
    <body>
        <h1>Glossary Creation <img src="../../../Resources/Images/shoptype/B2B_Shop.png" /> <img src="../../../Resources/Images/shoptype/B2C_Shop.png" /> <img src="../../../Resources/Images/shoptype/MasterSuite.png" /> <img src="../../../Resources/Images/shoptype/Demoshop.png" /></h1>
        <p MadCap:conditions="General.Hidden Comment">Used to be: http://spryker.github.io/core/bundles/glossary/</p>
        <p>In the Glossary you can easily store basic text information in different languages so your customers can switch to their preferred one. In the shop, all stored text keys will automatically be adjust, once language is switched. </p>
        <div class="example">By default, languages are identified by a locale: 
			<p><b>de_DE</b> meaning "German language in Germany" </p><p><b>de_CH</b> means "German language in Switzerland"</p></div>
        <h2>Multi-Language set-up</h2>
        <p>All textual elements can be created in various languages to support content creation for multiple language set-ups, e.g. for your international stores.</p>
        <ul>
            <li>Customers can switch locales in the shop</li>
            <li>Locales can be shared among stores</li>
        </ul>
        <p>The Glossary module has the responsibility to manage glossary keys that hold the localized content in the database.</p>
        <p>For each entry in the glossary, keys table there is a corresponding entry in the <var>Touch</var> table. The <var>Touch</var> table has a time stamp that marks the last update that was made on that glossary keys that needs to be updated also in the front end key-value storage.</p>
        <p>The glossary keys are kept in sync on the key-value storage by using a cron job that periodically runs the update storage collector command. The storage collector grabs the glossary key entries that were marked for update in the <var>Touch</var> table after the last storage update command was ran.</p>
        <h2>Setup Stores with Multiple Locales</h2>
        <p>This section describes the steps that you need to consider when you have to setup stores with multiple locales.
</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Configure Locales for Store</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>The stores configuration can be found in the <var>config/Shared/stores.php</var> file. </p>
                <p>For each store you can define a set of locales and the first locale is the default one.
<pre><code class="language-PHP line-numbers">&lt;?php
 'locales' =&gt; [
        // first entry is default
        'en' =&gt; 'en_US',
        'de' =&gt; 'de_DE',
    ]</code></pre></p>
                <p class="info">In the example above, the <var>en</var> key is associated with the <var>en_US</var> locale.</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>
                    <MadCap:annotation MadCap:createDate="2018-08-31T14:50:42.7706957+03:00" MadCap:creator="oksana.karasyova" MadCap:initials="OK" MadCap:comment="Get links for Suite" MadCap:editor="oksana.karasyova" MadCap:editDate="2018-08-31T14:51:02.9056411+03:00">URL Routing for Stores with Multiple Locales
</MadCap:annotation>
                </MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>In Yves, the key for the selected locale is contained in the URL. If no key is contained in the URL, then the default locale is considered as the current one.

</p>
                <div class="example" MadCap:conditions="Spryker.DemoShop">In Demoshop, for listing the current content of the cart, the following URLs are routed to the same controller and action:
                <table class="TableStyle-PatternedRows2" style="margin-left: 0;margin-right: auto;mc-table-style: url('../../../Resources/TableStyles/PatternedRows2.css');" cellspacing="0" MadCap:conditions="Spryker.DemoShop"><col class="TableStyle-PatternedRows2-Column-Regular" /><col class="TableStyle-PatternedRows2-Column-Regular" /><thead><tr class="TableStyle-PatternedRows2-Head-Header1"><th class="TableStyle-PatternedRows2-HeadE-Regular-Header1">URL</th><th class="TableStyle-PatternedRows2-HeadD-Regular-Header1">Locale</th></tr></thead><tbody><tr class="TableStyle-PatternedRows2-Body-LightRows"><td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">http://www.de.demoshop.local/cart</td><td class="TableStyle-PatternedRows2-BodyD-Regular-LightRows">en_US</td></tr><tr class="TableStyle-PatternedRows2-Body-DarkerRows"><td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows">http://www.de.demoshop.local/de/cart</td><td class="TableStyle-PatternedRows2-BodyD-Regular-DarkerRows">de_DE</td></tr><tr class="TableStyle-PatternedRows2-Body-LightRows"><td class="TableStyle-PatternedRows2-BodyB-Regular-LightRows">http://www.de.demoshop.local/en/cart</td><td class="TableStyle-PatternedRows2-BodyA-Regular-LightRows">en_US</td></tr></tbody></table></div>
                <h3>Routing the URLs</h3>
                <p>For URL routing, when defining the controllers in your controller provider, you must include the allowed locales for the application. </p>
                <p>The allowed locales pattern can be retrieved using the <var>getAllowedLocalesPattern</var> from the base class of the controller provider (<var>AbstractYvesControllerProvider</var>).

</p><pre><code class="language-PHP line-numbers">&lt;?php
$allowedLocalesPattern = $this-&gt;getAllowedLocalesPattern();

$this-&gt;createGetController('/{cart}', static::ROUTE_CART, 'Cart', 'Cart')
     -&gt;assert('cart', $allowedLocalesPattern . 'cart|cart')
     -&gt;value('cart', 'cart');</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Products with Localized Attributes
</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>The details of the abstract products are stored localized in the <var>spy_product_abstract_localized_attributes</var> table. For each abstract product there is an entry in this table that corresponds to each locale, containing the associated attributes for the defined locale.

</p>
                <p>Similar, the details of the concrete products are kept localized in the <var>spy_product_localized_attributes</var> table.

</p>
                <p>The localized attributes are loaded in the key-value data storage by the Collectors, so that the details can be rendered in Yves according to the selected locale.

</p>
                <p>The following details are stored localized in the Demoshop, for both abstract and concrete products:

</p>
                <ul>
                    <li class="bullet_list">name
</li>
                    <li class="bullet_list">short description
</li>
                    <li class="bullet_list">long description
</li>
                </ul>
                <h3>Importing products with localized attributes</h3>
                <p>When importing product data in your application you need to consider the list of locales that are defined for the store.

</p>
                <p>The CSV file containing the product data that needs to be imported must contain the name of the product for each locale:

</p>
                <ul>
                    <li class="bullet_list"><var>name.en_US</var>, <var>name.de_DE</var><![CDATA[
]]></li>
                </ul>
                <p>The CSV file that contains the attributes for the products that need to be imported must contain the short and long description for each locale :
</p>
                <ul>
                    <li><var>short_description.en_US</var>, <var>short_description.de_DE</var></li>
                    <li><var>long_description.en_US</var>, <var>long_description.de_DE</var></li>
                </ul>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Categories with Localized Attributes
</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>The details of the categories are kept in the <var>spy_category_attribute</var>. For each category defined in the <var>spy_category</var> table there is an entry for each defined locale containing the details of the category localized.

</p>
                <p>The attributes are loaded in the key-value data storage by the Collectors, so that the details can be rendered in Yves according to the selected locale.

</p>
                <p>The following category details are stored localized:

</p>
                <ul>
                    <li class="bullet_list"><var>meta_title</var>
                    </li>
                    <li class="bullet_list"><var>meta_description</var>
                    </li>
                    <li class="bullet_list"><var>category_image_name</var>
                    </li>
                </ul>
                <h3>Importing categories with localized attributes</h3>
                <p>The product categories are imported through the <a href="../../Development/importer.htm">Importer</a> module.

</p>
                <p>Similar to importing product data, you need to consider each locale defined in the application when importing the attributes for the categories.</p>
                <p>The CSV file containing the product data that needs to be imported must contain the name of the product for each locale:

</p>
                <ul>
                    <li><var>category_name.en_US</var>, <var>category_name.de_DE</var></li>
                    <li><var>low_pic.en_US</var>, <var>low_pic.de_DE</var></li>
                    <li><var>category_description.en_US</var>, <var>category_description.de_DE</var></li>
                </ul>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Importing CMS Blocks and Pages
</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>The CMS blocks and pages are able to render localized content through the use of placeholders. The placeholders have a glossary key associated. At runtime, the placeholder is replaced with the glossary value that corresponds to the current locale. Also, a static page will have a distinct URL for each locale defined in the application.

</p>
                <p class="info">Click here for more about <a href="../../CMS/CMS Page/content-fields-max-size.htm">CMS</a>.

</p>
                <p>The CMS blocks and pages are imported through XML files. The structure of the XML file is very simple: it contains a list of blocks, each block has a template associated, a name and a list of placeholders for each locale.
</p>
                <div class="example">Example:
<pre><code class="language-XML line-numbers">&lt;?xml version="1.0"?&gt;
&lt;blocks&gt;
 &lt;block&gt;
        &lt;template&gt;data_privacy&lt;/template&gt;
        &lt;blockName&gt;data_privacy_block&lt;/blockName&gt;
        &lt;locales&gt;
            &lt;de_DE&gt;
                &lt;placeholders&gt;
                    &lt;placeholder&gt;
                        &lt;name&gt;privacy_policy&lt;/name&gt;
                        &lt;translation&gt;Datenschutzerklärung&lt;/translation&gt;
                    &lt;/placeholder&gt;
                &lt;/placeholders&gt;
            &lt;/de_DE&gt;
            &lt;en_US&gt;
                &lt;placeholders&gt;
                    &lt;placeholder&gt;
                        &lt;name&gt;privacy_policy&lt;/name&gt;
                        &lt;translation&gt;Data Privacy Policy&lt;/translation&gt;
                    &lt;/placeholder&gt;
                &lt;/placeholders&gt;
            &lt;/en_US&gt;
        &lt;/locales&gt;
    &lt;/block&gt;
&lt;/blocks&gt;</code></pre></div>
                <p>The XML file structure for loading static pages is similar to the one for importing blocks; the only differences are that a page has also a URL associated for each locale and it doesn’t have a name linked to it.
</p>
                <div class="example"><pre><code class="language-XML line-numbers">&lt;?xml version="1.0"?&gt;
&lt;pages&gt;
&lt;page&gt;
   &lt;template&gt;data_privacy&lt;/template&gt;
        &lt;locales&gt;
            &lt;de_DE&gt;
              &lt;url&gt;/de/datenschutz&lt;/url&gt;
                &lt;placeholders&gt;
                    &lt;placeholder&gt;
                        &lt;name&gt;privacy_policy&lt;/name&gt;
                        &lt;translation&gt;Datenschutzerklärung&lt;/translation&gt;
                    &lt;/placeholder&gt;
                &lt;/placeholders&gt;
            &lt;/de_DE&gt;
            &lt;en_US&gt;
              &lt;url&gt;/en/privacy&lt;/url&gt;
                &lt;placeholders&gt;
                    &lt;placeholder&gt;
                        &lt;name&gt;privacy_policy&lt;/name&gt;
                        &lt;translation&gt;Data Privacy Policy&lt;/translation&gt;
                    &lt;/placeholder&gt;
                &lt;/placeholders&gt;
            &lt;/en_US&gt;
        &lt;/locales&gt;
&lt;/page&gt;
&lt;/pages&gt;</code></pre>
                </div>
                <h4>Localized URLs</h4>
                <p>The <var>spy_url</var> table stores the URLs that correspond to:</p>
                <ul>
                    <li class="bullet_list">category pages</li>
                    <li class="bullet_list">product details pages</li>
                    <li class="bullet_list">static pages defined in CMS</li>
                </ul>
                <p>For each category there is a distinct URL for each configured locale. Similar for product details pages. These URLs are automatically created and stored in the DB when importing products and categories through the <var>Importer </var> module.
</p>
                <p class="example">For example, <var>/en/computers</var> and <var>/de/computers</var> are the URL’s for the same category but for different locales.</p>
                <p>The URLs assigned for each imported CMS static page are distinct for each defined locale.</p>
                <ul>
                    <li class="bullet_list"><![CDATA[

]]><var>/en/privacy </var>and <var>/de/datenschutz</var> point to the same template; when rendered, they’ll be loaded with the glossary values that correspond to the associated locale.</li>
                </ul>
                <p>The XML file structure for loading static pages is similar to the one for importing blocks; the only differences are that a page has also a URL associated for each locale and it doesn’t have a name linked to it.
</p><pre><code class="language-XML line-numbers">&lt;?xml version="1.0"?&gt;
&lt;pages&gt;
&lt;page&gt;
   &lt;template&gt;data_privacy&lt;/template&gt;
        &lt;locales&gt;
            &lt;de_DE&gt;
              &lt;url&gt;/de/datenschutz&lt;/url&gt;
                &lt;placeholders&gt;
                    &lt;placeholder&gt;
                        &lt;name&gt;privacy_policy&lt;/name&gt;
                        &lt;translation&gt;Datenschutzerklärung&lt;/translation&gt;
                    &lt;/placeholder&gt;
                &lt;/placeholders&gt;
            &lt;/de_DE&gt;
            &lt;en_US&gt;
              &lt;url&gt;/en/privacy&lt;/url&gt;
                &lt;placeholders&gt;
                    &lt;placeholder&gt;
                        &lt;name&gt;privacy_policy&lt;/name&gt;
                        &lt;translation&gt;Data Privacy Policy&lt;/translation&gt;
                    &lt;/placeholder&gt;
                &lt;/placeholders&gt;
            &lt;/en_US&gt;
        &lt;/locales&gt;
&lt;/page&gt;
&lt;/pages&gt;</code></pre>
                <h4>Localized URLs</h4>
                <p>The <var>spy_url</var> table stores the URLs that correspond to:</p>
                <ul>
                    <li class="bullet_list">category pages</li>
                    <li class="bullet_list">product details pages</li>
                    <li class="bullet_list">static pages defined in CMS</li>
                </ul>
                <p>For each category there is a distinct URL for each configured locale. Similar for product details pages. These URLs are automatically created and stored in the DB when importing products and categories through the <var>Importer </var> module.

</p>
                <p class="example">For example, <var>/en/computers</var> and <var>/de/computers</var> are the URL’s for the same category but for different locales.</p>
                <p>The URLs assigned for each imported CMS static page are distinct for each defined locale.</p>
                <ul>
                    <li class="bullet_list"><![CDATA[

]]><var>/en/privacy</var> and <var>/de/datenschutz</var> point to the same template; when rendered, they’ll be loaded with the glossary values that correspond to the associated locale.</li>
                </ul>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p><strong>See also:</strong>
        </p>
        <ul>
            <li><a href="glossary-how-translations-managed.htm">How Translations are Managed</a>
            </li>
            <li><a href="glossary-keys.htm">Managing Glossary Keys</a>
            </li>
        </ul>
    </body>
</html>