<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="" MadCap:conditions="Spryker.B2B,Spryker.B2C,Spryker.DemoShop,Spryker.ShopSuite,Spryker.MultiStore">
    <head>
    </head>
    <body>
        <h1><a name="Cron"></a>Cron Jobs - State Machine <img src="../../../Resources/Images/shoptype/B2B_Shop.png" /> <img src="../../../Resources/Images/shoptype/B2C_Shop.png" /> <img src="../../../Resources/Images/shoptype/MasterSuite.png" /> <img src="../../../Resources/Images/shoptype/Demoshop.png" /></h1>
        <p>
            <MadCap:popup>
                <MadCap:popupHead>MS</MadCap:popupHead>
                <MadCap:popupBody>Multi-store</MadCap:popupBody>
            </MadCap:popup>
        </p>
        <p>There are three console commands dedicated for the state machine:</p>
        <ul>
            <li class="bullet_list"><strong>state-machine:check-condition</strong> - checks all the states that have a condition without event and triggers them.</li>
            <li class="bullet_list"><strong>state-machine:check-timeout</strong> - check timeout expired items and triggers event for them.</li>
            <li class="bullet_list"><strong>state-machine:clear-locks</strong> - clears expired lock items. State machine triggers are encapsulated in lock, this lock is to prevent concurrent access to same item processing. Each lock has defined expiration time for 1 min. Sometimes lock cannot be released, (error in execution or premature termination). This commands does garbage collections and cleans all those locks.</li>
        </ul>
        <p>State machine event trigger sequence diagram</p>
        <p>A low level sequence diagram of what happens when trigger method is being invoked.</p>
        <p>
            <img src="../../../Resources/Images/state_machine_event_trigger_sequence.png" title="Click me" alt="State machine trigger sequence" class="Thumbnail">
            </img>
        </p>
        <p MadCap:conditions="General.Image_Source">https://www.gliffy.com/go/share/image/s20eve981027slw36g3u.png?utm_medium=live-embed&amp;utm_source=custom</p>
        <h2><a name="State"></a>State Machine Handler Interface</h2>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Code Sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php
interface StateMachineHandlerInterface
{

    /**
     * List of command plugins for this state machine for all processes. Array key is identifier in SM XML file.
     *
     * [
     *   'Command/Plugin' =&gt; new Command(),
     *   'Command/Plugin2' =&gt; new Command2(),
     * ]
     *
     * @return \Spryker\Zed\StateMachine\Dependency\Plugin\CommandPluginInterface[]
     */
    public function getCommandPlugins();

    /**
     * List of condition plugins for this state machine for all processes. Array key is identifier in SM XML file.
     *
     *  [
     *   'Condition/Plugin' =&gt; new Condition(),
     *   'Condition/Plugin2' =&gt; new Condition2(),
     * ]
     *
     * @return \Spryker\Zed\StateMachine\Dependency\Plugin\ConditionPluginInterface[]
     */
    public function getConditionPlugins();

    /**
     * Name of state machine used by this handler.
     *
     * @return string
     */
    public function getStateMachineName();

    /**
     * List of active processes used for this state machine.
     *
     * [
     *   'ProcessName',
     *   'ProcessName2 ,
     * ]
     *
     * @return string[]
     */
    public function getActiveProcesses();

    /**
     * Provide initial state name for item when state machine initialized. Using process name.
     *
     * @param string $processName
     *
     * @return string
     */
    public function getInitialStateForProcess($processName);

    /**
     * This method is called when state of item was changed, client can create custom logic for example update it's related table with new stateId and processId.
     * StateMachineItemTransfer:identifier is id of entity from client.
     *
     * @param \Generated\Shared\Transfer\StateMachineItemTransfer $stateMachineItemTransfer
     *
     * @return bool
     */
    public function itemStateUpdated(StateMachineItemTransfer $stateMachineItemTransfer);

    /**
     * This method should return all list of StateMachineItemTransfer, with (identifier, IdStateMachineProcess, IdItemState)
     *
     * @param int[] $stateIds
     *
     * @return \Generated\Shared\Transfer\StateMachineItemTransfer[]
     */
    public function getStateMachineItemsByStateIds(array $stateIds = []);

}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h2><a name="Conditio"></a>Condition Plugin Interface</h2><pre><code class="language-PHP line-numbers">&lt;?php
interface ConditionPluginInterface
{
    /**
     * This method is called when transition in SM xml file have concrete condition assigned.
     *
     * @param \Generated\Shared\Transfer\StateMachineItemTransfer $stateMachineItemTransfer
     *
     * @return bool
     */
    public function check(StateMachineItemTransfer $stateMachineItemTransfer);

}</code></pre>
        <h2><a name="Command"></a>Command Plugin Interface</h2><pre><code class="language-PHP line-numbers">&lt;?php
interface CommandPluginInterface
{

    /**
     * This method is called when event have concrete command assigned.
     *
     * @param \Generated\Shared\Transfer\StateMachineItemTransfer $stateMachineItemTransfer
     *
     * @return void
     */
    public function run(StateMachineItemTransfer $stateMachineItemTransfer);

}</code></pre>
        <p>&#160;</p>
        <p><![CDATA[
		
		]]><b>See also:</b></p>
        <ul>
            <li><a href="order-process-modelling-state-machines.htm">State Machine Modelling</a>
            </li>
            <li><a href="state-machine-events.htm">Triggering Events - State Machine</a>
            </li>
            <li><a href="state-machine-implementing-plugin.htm">Implementing the Plugin - State Machine</a>
            </li>
            <li><a href="state-machine-patterns.htm">State Machine parrerns</a>
            </li>
            <li><a href="state-machine-persistence.htm">Persistence - State Machine</a>
            </li>
            <li><a href="state-machine-persistence.htm">Updating Presentation in Zed - State Machine</a>
            </li>
            <li><a href="http://documentation.spryker.com/state_machine_cookbook/state-machine-cookbook.htm">State Machine cookbook</a>
            </li>
        </ul>
        <p>&#160;</p>
        <p><i>Last review date: </i><i>Oct. 2nd, 2017 </i>
            <MadCap:conditionalText MadCap:conditions="General.Hidden Comment"><i>by Denis Turkov</i><![CDATA[
]]></MadCap:conditionalText>
        </p>
    </body>
</html>