<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="" MadCap:conditions="Spryker.B2B,Spryker.B2C,Spryker.DemoShop,Spryker.ShopSuite">
    <head>
    </head>
    <body>
        <h1>Console <img src="../../Resources/Images/shoptype/B2B_Shop.png" /> <img src="../../Resources/Images/shoptype/B2C_Shop.png" /> <img src="../../Resources/Images/shoptype/MasterSuite.png" /> <img src="../../Resources/Images/shoptype/Demoshop.png" /></h1>
        <p MadCap:conditions="General.Hidden Comment">used to be: http://spryker.github.io/core/bundles/console/</p>
        <p>With the Spryker Commerce OS comes an all-inclusive and fully pre-provisioned development environment on a virtual machine, based on Vagrant and VirtualBox.</p>
        <p>The command-line Console tool enables you to execute a great variety of commands, such as managing the Spryker Commerce OS installer, to run the OS in any environment.</p>
        <p>A console command is a php class that contains the implementation of a functionality that can get executed from the command line. Spryker contains a wrapper over Symfony’s Console component, that makes the implementation and configuration of a console command easier. More information about console commands in Spryker can be found here.</p>
        <h2>Console Commands in Spryker</h2>
        <p>To list the available console commands, execute the following from the command line:</p><pre><code class="language-PHP line-numbers">vendor/bin/console</code></pre>
        <p>The list contains the command names together with a short description of what the command does. The most important commands in Spryker can be split in 3 categories :</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Collector Commands</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>Collector commands are responsible of exporting the data in the SQL database to the front-end data storages (Redis and Elasticsearch)</p>
                <ul>
                    <li class="bullet_list"><var>collector:search:export</var> - exports data to the Elasticsearch storage</li>
                    <li class="bullet_list"><var>collector:search:update</var> - updates the data in the Elasticsearch storage</li>
                    <li class="bullet_list"><var>collector:storage:export</var> - exports data to Key-Value storage (Redis)</li>
                </ul>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Order Management System Commands</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <ul>
                    <li class="bullet_list"><var>oms:check-condition</var> - check if conditions are satisfied for orders that are in a state that is the source state for a transition that has a condition attached</li>
                    <li class="bullet_list"><var>oms:check-timeout</var> - check if timeout was reached for orders that are in a state that is the source state for a transition that has a timeout attached</li>
                </ul>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h2>Setup Commands</h2>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Installation Setup Commands</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p><var>setup:install</var> - runs a set of commands, necessary for installing or updating the application. The following steps are performed when running this command:</p>
                <ol>
                    <li>delete all cache files for all stores (<var>cache:delete-all</var>)</li>
                    <li>remove the directory that contains the generated files, such as transfer classes, merged database schema XML files or autocompletion classes (<var>setup:remove-generated-directory</var>)</li>
                    <li>create or migrate the database (<var>setup:propel</var>)</li>
                    <li>generate transfer classes for each of the objects defined in the XML transfer files (<var>transfer:generate</var>)</li>
                    <li>initialize the database with required data (<var>setup:init-db</var>)</li>
                    <li>generate ide auto-completion files to enable navigation to referenced classes (<var>dev:ide:generate-auto-completion</var>). Generated auto-completion classes will be found for each application under the generated folder.</li>
                    <li>build the project resources for Yves and Zed</li>
                    <li>build the navigation tree (<var>application:build-navigation-tree</var>)</li>
                </ol>
                <p class="info">
                    <br /><strong>Installation Commands</strong>
                    <br />Each of the commands contained in the steps above can also be executed individually.</p>
                <p><var>setup:install:demo-data</var> - inserts demo data into the database for testing reasons</p>
                <p><var>setup:propel</var> - runs a set of commands, necessary for creating or migrating the database. The following steps are performed when running this command:</p>
                <ol>
                    <li>write propel configuration (<var>setup:propel:config:convert</var>)</li>
                    <li>creates the database if it doesn’t exist yet, based on the configuration set in the previous step (<var>setup:propel:database:create</var>)</li>
                    <li>ensure compatibility with Postgresql if necessary, by adjusting the Propel XML schema files (<var>setup:propel:pg-sql-compat</var>)</li>
                    <li>copy schema files from Spryker and project packages to the generated folder (<var>setup:propel:schema:copy</var>)</li>
                    <li>build Propel classes based on the XML schema files (<var>setup:propel:model:build</var>)</li>
                    <li>compare the propel models with the database tables and generate the diff, in order to prepare for migration (<var>setup:propel:diff</var>)</li>
                    <li>migrate the database: update the database so that’s in sync with the propel models in the project (<var>setup:propel:migrate</var>)</li>
                </ol>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Jenkins Setup Commands</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>Cron jobs are scheduled by using Jenkins. For setting up Jenkins, the following console commands can be used from the command line:</p>
                <ul>
                    <li class="bullet_list"><var>setup:jenkins:enable</var> - starts the Jenkins service</li>
                    <li class="bullet_list"><var>setup:jenkins:disable</var> - shut downs the Jenkins service</li>
                    <li class="bullet_list"><var>setup:jenkins:generate</var> - setups the cron jobs based on the definitions contained in the configuration file ( the config file for jobs is placed in <var>/config/Zed/cronjobs/jobs.php</var>)</li>
                </ul>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Git Commands</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>Git commands are enabled through console commands and they have effect over the Spryker packages.</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
    </body>
</html>