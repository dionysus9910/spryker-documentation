<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="" MadCap:conditions="Spryker.B2B,Spryker.B2C,Spryker.DemoShop,Spryker.ShopSuite">
    <head>
    </head>
    <body>
        <h1>Queue <img src="../../../Resources/Images/shoptype/B2B_Shop.png" /> <img src="../../../Resources/Images/shoptype/B2C_Shop.png" /> <img src="../../../Resources/Images/shoptype/MasterSuite.png" /> <img src="../../../Resources/Images/shoptype/Demoshop.png" /></h1>
        <h2>Concepts</h2>
        <ul>
            <li class="bullet_list">Sender	 -  a program that sends messages.
</li>
            <li class="bullet_list">Receiver	- a program that waits to receive messages.
</li>
            <li class="bullet_list">Message - 	a string or binary data  passed from Sender to Receiver.
</li>
            <li class="bullet_list">Message Box	- Similar to a Mailbox, here you can store, send and receive messages.
</li>
        </ul>
        <h2>Introduction
</h2>
        <p>The Queue module provides a set of APIs and Commands for sending/receiving messages to/from queues for other modules in Spryker.
</p>
        <p>The Queue System provides a protocol for managing asynchronous processing. Asynchronous processing in the sense that the sender and receiver do not have access to the same message at the same time. The sender produces a message and sends it to the message box, later when the receiver connects to the message box the message is <strong>received</strong>.

</p>
        <h2>Spryker Queue Module</h2>
        <p>The Spryker Queue module provides a set of high level standard APIs for communicating with the queues. Moreover, the Queue module is also a gateway for other moduleto interact with queues and messages. The Queue module is an abstract adapter implementation which provides a standard API for the other module, this API internally calls their queue engine’s API and translates to their own communication language. There are multiple 3rd-party queue engines to choose from such as RabbitMQ, AmazonSQS and etc.

</p>
        <p>To initially work with the Queue module you need at least one Queue Engine and one Queue Adapter. This module also comes with a set of simple commands for listening to the queues and processing messages by stack of corresponding plugins.</p>
        <p>&#160;</p>
        <p class="tip">For more information and examples of how to get started with the Queue module see .
</p>
        <p>&#160;</p>
        <p><![CDATA[
            ]]><b>See also:
</b></p>
        <ul>
            <li><a href="queue-adapter.htm">Default Queue Adapter</a>
            </li>
            <li><a href="queue-benefits.htm">Queue Benefits</a>
            </li>
            <li><a href="queue-engine.htm">Default Queue Engine</a>
            </li>
            <li><a href="queue-job-config.htm">Queue Job Configuration</a>
            </li>
            <li><a href="queue-msg-processor.htm">Queue Message Processor Plugin</a>
            </li>
            <li><a href="queue-task.htm">Queue Task</a>
            </li>
            <li><a href="queue-workers.htm">Queue Workers</a>
            </li>
            <li><a href="http://documentation.spryker.com/module_migration_guides/mg-rabbitmq.htm">Migration Guide - RabbitMQ</a>
            </li>
        </ul>
        <p>&#160;</p>
        <p><i>Last review date: Oct. 18th, 2017 </i>
            <MadCap:conditionalText MadCap:conditions="General.Hidden Comment"><i>by Ehsan Zanjani</i>
            </MadCap:conditionalText>
        </p>
    </body>
</html>