<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="" MadCap:conditions="General.Draft,General.OldOutdated,Spryker.DemoShop">
    <head>
    </head>
    <body>
        <h1>
            <MadCap:annotation MadCap:createDate="2018-08-30T18:05:00.8374072+03:00" MadCap:creator="oksana.karasyova" MadCap:initials="OK" MadCap:comment="outdated because of Publish &amp; Synchronize process https://spryker.atlassian.net/wiki/spaces/DOCS/pages/199033000/Deprecated" MadCap:editor="oksana.karasyova" MadCap:editDate="2018-08-30T18:05:01.4351887+03:00">Touch <img src="../../Resources/Images/shoptype/Demoshop.png" /></MadCap:annotation>
        </h1>
        <p MadCap:conditions="General.Hidden Comment">Used to be: http://spryker.github.io/core/bundles/touch/</p>
        <p>Yves has no connection to the database of Zed. This is a key concept to make rendering front-end pages fast. Yves fetches all dynamic data from a key-value storage (Redis) and a search engine (Elasticsearch).

</p>
        <p>This data includes, but is not limited to:

</p>
        <ul>
            <li class="bullet_list">URL mappings
</li>
            <li class="bullet_list">Product Information
</li>
            <li class="bullet_list">Product Categories
</li>
            <li class="bullet_list">Stock Information
</li>
            <li class="bullet_list">Translations
</li>
        </ul>
        <p>The process of collecting data is triggered from a cron job, but can also be executed manually. This process consists of two steps:

</p>
        <ul>
            <li class="bullet_list">Touch data ( done through the <var>Touch</var> module)
</li>
            <li class="bullet_list">Export data ( done through the <var>Collector</var> module)
</li>
        </ul>
        <h2>Touch Data for Yves
</h2>
        <p class="tip">
            <br /><strong>Cascading Updates</strong>
            <br />Depending on what kind of data is changed, it can trigger cascade update of multiple resources. For example: renaming of a category will result in updating the URLs, category nodes, navigation and products.
</p>
        <p>The data that corresponds to the content stored in the key-value and search data storages can be changed through the back-end application interface ( Zed ). In order to have the client storage up to date with what’s currently in the Zed database, you must keep track of the changes and mark them accordingly.

</p>
        <p>The collector console commands gathers the items that changed in the SQL database and updates them in the front-end data storages. To keep track of the items that changed from the last update, Spryker uses a touch table. The touch table is a snapshot of the collection of items that changed during a specific interval.

</p>
        <p>For one entity, there’s one and only one corresponding row in the touch table. Every time an update is done to an entity that’s collected for Yves,  the corresponding record from the touch table must be updated as well, so that after the update tasks have run, the change would also be reflected in the front-end application.

</p>
        <p>The data stored in the item_type column is a string that marks which collector knows how to collect that item. The collectors are differentiated by unique strings (e.g. categorynode items are collected by CategoryNodeCollector). The functionality that updates the touch entities is provided by the Touch module:

</p><pre><code class="language-PHP line-numbers">&lt;?php
/**
 * @param string $itemType
 * @param int $idItem
 *
 * @return bool
 */
public function touchActive($itemType, $idItem)
public function touchInactive($itemType, $idItem)
public function touchDeleted($itemType, $idItem)
</code></pre>
        <p>Example of usage for the <var>TouchFacade</var> operations:

</p><pre><code class="language-PHP line-numbers">&lt;?php
/**
 * @param int $idUrl
 *
 * @return void
 */
public function touchUrlActive($idUrl)
{
    $this-&gt;touchFacade-&gt;touchActive(static::ITEM_TYPE_URL, $idUrl);
}
</code></pre>
        <p><var>touchActive</var>: Will force export of the existing related entity to corresponding Storage(s) on the next collector run.</p>
        <p><var>touchDelete</var>: Will try to delete entity by key from Storage(s) on the next collector run.</p>
        <p><var>touchInactive</var>: Will pause export of the existing related entity to corresponding Storage(s) on all future collector run.<br />       This might be used, for example, during long update of entity in order to prevent export of partially updated data.
        At the beginning of update you call <var>touchInactive</var>, performing all required updates, and calling <var>touchActive</var> to export fully updated data to Storage(s).
        </p>
    </body>
</html>