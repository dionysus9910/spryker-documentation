<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:conditions="Spryker.B2B,Spryker.B2C,Spryker.DemoShop,Spryker.ShopSuite">
    <head>
        <link href="../../Resources/TableStyles/PatternedRows.css" rel="stylesheet" MadCap:stylesheetType="table" />
    </head>
    <body>
        <h1>Flysystem <img src="../../Resources/Images/shoptype/B2B_Shop.png" /> <img src="../../Resources/Images/shoptype/B2C_Shop.png" /> <img src="../../Resources/Images/shoptype/MasterSuite.png" /> <img src="../../Resources/Images/shoptype/Demoshop.png" /></h1>
        <p>The Flysystem module integrates Spryker with the <a href="https://github.com/thephpleague/flysystem" target="_blank">thephpleague/flysystem</a> vendor package.</p>
        <p>It handles operations, flysystem adapter configuration and provides a <var>FlysystemFilesystemBuilderPluginInterface</var>,</p>
        <p>where the <var>build()</var> method is expected to return a concrete implementation of the <var>\League\Flysystem\Filesystem</var> interface.</p>
        <p>There are module with adapters for Local, FTP and AWS3 filesystems.</p>
        <h2>Flysystem Features</h2>
        <p>Quote from <a href="http://flysystem.thephpleague.com/" target="_blank">Flysytem's official documentation</a>:</p>
        <ul>
            <li>Generic API for handling common tasks across multiple file storage engines.</li>
            <li>Consistent output which you can rely on.</li>
            <li>Integrate well with other packages/frameworks.</li>
            <li>Be cacheable.</li>
            <li>Emulate directories in systems that support none, like AwsS3.</li>
            <li>Support third party plugins.</li>
            <li>Make it easy to test your filesystem interactions.</li>
            <li>Support streams for big file handling</li>
        </ul>
        <h3>Module Dependency Graph</h3>
        <p>The Flysystem Module provides plugins which integrate <a href="https://github.com/thephpleague/flysystem" target="_blank">thephpleague/flysystem vendor package</a> and implement FileSystem's plugin interface.</p>
        <p>
            <img src="../../Resources/Images/file_system_dependencies.png" title="File System Dependencies" />
        </p>
        <h2>Flysystem Service API</h2>
        <p>Flysystem's Service API is almost exactly like <a href="http://flysystem.thephpleague.com/api/" target="_blank">Flysystem's API</a> with only one distinction,</p>
        <p>it takes an additional mandatory parameter containing a pre-configured filesystem name.</p>
        <p>See <MadCap:xref href="File System/filesystem.htm#Plugin">Plugin Configuration</MadCap:xref> for details.</p>
        <p>For example, to extract an image's metadata information stored under <var>foo/bar.jpg</var>, use the <var>getMetadata()</var> method with the <var>media</var> store's name.</p><pre><code class="language-PHP line-numbers">&lt;?php
/**
 * Specification:
 * - Select pre-configured filesystem
 * - Get resource metadata
 * - Return resource metadata transfer, null on failure
 *
 * @param string $filesystemName
 * @param string $path
 *
 * @return \Generated\Shared\Transfer\FlysystemResourceMetadataTransfer
 */
public function getMetadata($filesystemName, $path);

$metadataTransfer = $flysystemService-&gt;getMetadata('media', 'foo/bar.jpg');</code></pre>
        <p>Or to read file content from the <var>customerDocument</var> store.</p><pre><code class="language-PHP line-numbers">&lt;?php
/**
 * Specification:
 * - Select pre-configured filesystem
 * - Read file
 * - Return file content, false on failure
 *
 * @param string $filesystemName
 * @param string $path
 *
 * @return false|string
 */
public function read($filesystemName, $path);

$invoiceDocument = $flysystemService-&gt;read('customerData', 'invoices/2017/05/123.pdf');</code></pre>
        <h2>Flysystem Filesystem Adapter Modules</h2>
        <p>Different filesystems require different adapters in order to handle them. In Spryker, we use <a href="https://en.wikipedia.org/wiki/Package_principles" target="_blank">package principles</a> to create modular and easy to configure applications. Each different Flysystem adapter implementing <var>\League\Flysystem\FilesystemInterface</var> has its own Module.</p>
        <table style="margin-left: 0;margin-right: auto;mc-table-style: url('../../Resources/TableStyles/PatternedRows.css');" class="TableStyle-PatternedRows" cellspacing="0">
            <col class="TableStyle-PatternedRows-Column-Regular" />
            <col class="TableStyle-PatternedRows-Column-Regular" />
            <col class="TableStyle-PatternedRows-Column-Regular" />
            <thead>
                <tr class="TableStyle-PatternedRows-Head-Header1">
                    <th class="TableStyle-PatternedRows-HeadE-Regular-Header1">Module</th>
                    <th class="TableStyle-PatternedRows-HeadE-Regular-Header1">Description </th>
                    <th class="TableStyle-PatternedRows-HeadD-Regular-Header1">Config </th>
                </tr>
            </thead>
            <tbody>
                <tr class="TableStyle-PatternedRows-Body-LightRows">
                    <td class="TableStyle-PatternedRows-BodyE-Regular-LightRows">FlysystemAws3v3FileSystem</td>
                    <td class="TableStyle-PatternedRows-BodyE-Regular-LightRows">Amazon AWS3 version 3 filesystem adapter</td>
                    <td class="TableStyle-PatternedRows-BodyD-Regular-LightRows">FlysystemConfigAws3v3Transfer</td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows-BodyE-Regular-DarkerRows">FlysystemFtpFileSystem</td>
                    <td class="TableStyle-PatternedRows-BodyE-Regular-DarkerRows">FTP filesystem adapter</td>
                    <td class="TableStyle-PatternedRows-BodyD-Regular-DarkerRows">FlysystemConfigFtpTransfer</td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-LightRows">
                    <td class="TableStyle-PatternedRows-BodyB-Regular-LightRows">FlysystemLocalFileSystem</td>
                    <td class="TableStyle-PatternedRows-BodyB-Regular-LightRows">Local filesystem adapter</td>
                    <td class="TableStyle-PatternedRows-BodyA-Regular-LightRows">FlysystemConfigLocalTransfer</td>
                </tr>
            </tbody>
        </table>
        <p>You can install the adapter bundles on demand, just like any other Spryker module, or create your own.</p>
        <h3>Flysystem Config</h3>
        <p>The <var>FlysystemConfigTransfer</var> and options for <a href="https://github.com/thephpleague/flysystem" target="_blank">thephpleague/flysystem</a> are passed to the <var>build()</var> method.</p>
        <p>The adapter config is under <var>adapterConfig</var> and flysystem options under <var>flysystemConfig</var>.</p><pre><code class="language-PHP line-numbers">&lt;transfer name="FlysystemConfig"&gt;
    &lt;property name="name" type="string" /&gt;
    &lt;property name="type" type="string" /&gt;
    &lt;property name="adapterConfig" type="array" /&gt;
    &lt;property name="flysystemConfig" type="array" /&gt;
&lt;/transfer&gt;</code></pre>
        <p>The name and type come from the project configuration.</p><pre><code class="language-PHP line-numbers">The value of <var>type</var> should point to a concrete builder plugin implementing <var>FlysystemFilesystemBuilderPluginInterface</var>.</code></pre>
        <h3>Filesystem Adapter Config</h3>
        <p>Every adapter module requires its own specific settings.</p>
        <p><strong>Example of <var>FlysystemConfigFtp</var></strong>:</p><pre><code class="language-PHP line-numbers">&lt;transfer name="FlysystemConfigFtp"&gt;
    &lt;property name="host" type="string" /&gt;
    &lt;property name="username" type="string" /&gt;
    &lt;property name="password" type="string" /&gt;
    &lt;property name="port" type="int" /&gt;
    &lt;property name="root" type="string" /&gt;
    &lt;property name="passive" type="bool" /&gt;
    &lt;property name="ssl" type="bool" /&gt;
    &lt;property name="timeout" type="int" /&gt;
&lt;/transfer&gt;</code></pre>
        <h2>Adapter Builders</h2>
        <p>Every implementation of <var>\League\Flysystem\AdapterInterface</var> requires a unique set of parameters or dependencies. Therefore, adapter instantiation is delegated to a specialized builder which knows about implementation details.</p>
        <p>The builders are executed via plugins.</p>
        <h2>Filesystem Builder Plugin</h2>
        <p>The Flysystem bundle uses the <var>FlysystemFilesystemBuilderPluginInterface</var> implemented by the concrete adapter's module.</p>
        <p>The <var>build()</var> method is expected to return a class implementing the <var>\League\Flysystem\Filesystem</var> interface.</p>
        <p>The <var>acceptType()</var> method is expected to return true if the filesystem type can be handled by the implementation.</p>
        <p>Mapping between Filesystem and the type it can handle is done via configuration, see <MadCap:xref href="File System/filesystem.htm#Plugin">Plugin Configuration</MadCap:xref> for details.</p><pre><code class="language-PHP line-numbers">&lt;?php
namespace Spryker\Service\Flysystem\Dependency\Plugin;

use Generated\Shared\Transfer\FlysystemConfigTransfer;

interface FlysystemFilesystemBuilderPluginInterface
{

    /**
     * @api
     *
     * @param \Generated\Shared\Transfer\FlysystemConfigTransfer $configTransfer
     * @param \League\Flysystem\PluginInterface[] $flysystemPluginCollection
     *
     * @return \League\Flysystem\Filesystem
     */
    public function build(FlysystemConfigTransfer $configTransfer, array $flysystemPluginCollection = []);

    /**
     * @api
     *
     * @param string $type
     *
     * @return bool
     */
    public function acceptType($type);

}</code></pre>
        <h3>Plugin Example</h3>
        <p>Example implementation from <var>Aws3v3FilesystemBuilderPlugin</var>.</p><pre><code class="language-PHP line-numbers">&lt;?php
namespace Spryker\Service\FlysystemAws3v3FileSystem\Plugin\Flysystem;

use Generated\Shared\Transfer\FlysystemConfigTransfer;
use Spryker\Service\Flysystem\Dependency\Plugin\FlysystemFilesystemBuilderPluginInterface;
use Spryker\Service\Kernel\AbstractPlugin;

class Aws3v3FilesystemBuilderPlugin extends AbstractPlugin implements FlysystemFilesystemBuilderPluginInterface
{

    /**
     * @param string $type
     *
     * @return bool
     */
    public function acceptType($type)
    {
        return $type === get_class($this);
    }

    /**
     * @param \Generated\Shared\Transfer\FlysystemConfigTransfer $configTransfer
     * @param \League\Flysystem\PluginInterface[] $flysystemPluginCollection
     *
     * @return \League\Flysystem\Filesystem
     */
    public function build(FlysystemConfigTransfer $configTransfer, array $flysystemPluginCollection = [])
    {
        return $this-&gt;getFactory()
            -&gt;createFlysystemAws3v3FileSystemBuilder($configTransfer, $flysystemPluginCollection)
            -&gt;build();
    }

}</code></pre>
        <h4>Flysystem Adapter Builder Example</h4>
        <p>Example of an <var>Aws3v3AdapterBuilder</var>, responsible for the instantiation of <var>League\Flysystem\Adapter\AwsS3v3\AwsS3Adapter</var>.</p>
        <p>It uses its own config <var>FlysystemConfigAws3v3Transfer</var>, created by <var>Aws3v3FilesystemBuilder</var>.</p><pre><code class="language-PHP line-numbers">&lt;?php
namespace Spryker\Service\FlysystemAws3v3FileSystem\Model\Builder\Adapter;

use Aws\S3\S3Client;
use Generated\Shared\Transfer\FlysystemConfigAws3v3Transfer;
use League\Flysystem\Adapter\AwsS3v3\AwsS3Adapter;

class Aws3v3AdapterBuilder implements AdapterBuilderInterface
{

    const KEY = 'key';
    const SECRET = 'secret';
    const REGION = 'region';
    const VERSION = 'version';
    const CREDENTIALS = 'credentials';

    /**
     * @var \League\Flysystem\Adapter\AwsS3v3\AwsS3Adapter
     */
    protected $adapter;

    /**
     * @var \Generated\Shared\Transfer\FlysystemConfigAws3v3Transfer
     */
    protected $adapterConfig;

    /**
     * @var \Aws\S3\S3Client
     */
    protected $client;

    /**
     * @param \Generated\Shared\Transfer\FlysystemConfigAws3v3Transfer $adapterConfig
     */
    public function __construct(FlysystemConfigAws3v3Transfer $adapterConfig)
    {
        $this-&gt;adapterConfig = $adapterConfig;
    }

    /**
     * @return \League\Flysystem\AdapterInterface
     */
    public function build()
    {
        $this
            -&gt;buildS3Client()
            -&gt;buildAdapter();

        return $this-&gt;adapter;
    }

    /**
     * @return $this
     */
    protected function buildS3Client()
    {
        $this-&gt;client = new S3Client([
            self::CREDENTIALS =&gt; [
                self::KEY =&gt; $this-&gt;adapterConfig-&gt;getKey(),
                self::SECRET =&gt; $this-&gt;adapterConfig-&gt;getSecret(),
            ],
            self::REGION =&gt; $this-&gt;adapterConfig-&gt;getRegion(),
            self::VERSION =&gt; $this-&gt;adapterConfig-&gt;getVersion(),
        ]);

        return $this;
    }

    /**
     * @return $this
     */
    protected function buildAdapter()
    {
        $this-&gt;adapter = new AwsS3Adapter($this-&gt;client, $this-&gt;adapterConfig-&gt;getBucket());

        return $this;
    }

}</code></pre>
        <h4>Flysystem Filesystem Builder Example</h4>
        <p>Example of <var>Aws3v3FilesystemBuilder</var>, responsible for instantiation of <var>Filesystem</var> implementing <var>League\Flysystem\FilesystemInterface</var>.</p>
        <p>It creates a config using <var>FlysystemConfigAws3v3Transfer</var>, and validates it.</p><pre><code class="language-PHP line-numbers">&lt;?php
namespace Spryker\Service\FlysystemAws3v3FileSystem\Model\Builder\Filesystem;

use Generated\Shared\Transfer\FlysystemConfigAws3v3Transfer;
use Spryker\Service\FlysystemAws3v3FileSystem\Model\Builder\Adapter\Aws3v3AdapterBuilder;

class Aws3v3FilesystemBuilder extends AbstractFilesystemBuilder
{

    /**
     * @return \Generated\Shared\Transfer\FlysystemConfigAws3v3Transfer
     */
    protected function buildAdapterConfig()
    {
        $configTransfer = new FlysystemConfigAws3v3Transfer();
        $configTransfer-&gt;fromArray($this-&gt;config-&gt;getAdapterConfig(), true);

        return $configTransfer;
    }

    /**
     * @return void
     */
    protected function assertAdapterConfig()
    {
        $adapterConfigTransfer = $this-&gt;buildAdapterConfig();

        $adapterConfigTransfer-&gt;requireRoot();
        $adapterConfigTransfer-&gt;requirePath();
        $adapterConfigTransfer-&gt;requireKey();
        $adapterConfigTransfer-&gt;requireSecret();
        $adapterConfigTransfer-&gt;requireBucket();
        $adapterConfigTransfer-&gt;requireVersion();
        $adapterConfigTransfer-&gt;requireRegion();
    }

    /**
     * @return \Spryker\Service\FlysystemAws3v3FileSystem\Model\Builder\Adapter\AdapterBuilderInterface
     */
    protected function createAdapterBuilder()
    {
        $adapterConfigTransfer = $this-&gt;buildAdapterConfig();

        return new Aws3v3AdapterBuilder($adapterConfigTransfer);
    }

}</code></pre>
        <h4>AbstractFilesystemBuilder Example</h4>
        <p>Example of <var>AbstractFilesystemBuilder</var> from the <var>FlysystemAws3v3FileSystem</var> module.</p><pre><code class="language-PHP line-numbers">&lt;?php
namespace Spryker\Service\FlysystemAws3v3FileSystem\Model\Builder\Filesystem;

use Generated\Shared\Transfer\FlysystemConfigTransfer;
use League\Flysystem\Filesystem;

abstract class AbstractFilesystemBuilder implements FilesystemBuilderInterface
{

    /**
     * @var \Generated\Shared\Transfer\FlysystemConfigTransfer
     */
    protected $config;

    /**
     * @param \Generated\Shared\Transfer\FlysystemConfigTransfer $configTransfer
     */
    public function __construct(FlysystemConfigTransfer $configTransfer)
    {
        $this-&gt;config = $configTransfer;
    }

    /**
     * @return void
     */
    abstract protected function assertAdapterConfig();

    /**
     * @return \Spryker\Service\FlysystemAws3v3FileSystem\Model\Builder\Adapter\AdapterBuilderInterface
     */
    abstract protected function createAdapterBuilder();

    /**
     * @return \League\Flysystem\Filesystem
     */
    public function build()
    {
        $this-&gt;assertAdapterConfig();
        $filesystem = $this-&gt;buildFilesystem();

        return $filesystem;
    }

    /**
     * @return \League\Flysystem\Filesystem
     */
    protected function buildFilesystem()
    {
        $adapter = $this-&gt;createAdapterBuilder()-&gt;build();
        $config = $this-&gt;config-&gt;getFlysystemConfig() ?: [];

        return new Filesystem($adapter, $config);
    }

}</code></pre>
        <h2>Flysystem Plugins</h2>
        <p><a href="https://github.com/thephpleague/flysystem" target="_blank">thephpleague/flysystem vendor package</a> also supports plugins.</p>
        <p>In Spryker, they are loaded via <var>FlysystemDependencyProvider</var> and automatically passed to the <var>build()</var> method.</p>
        <p>All you have to do is to configure them in the <var>addFlysystemPluginCollection()</var> method.</p><pre><code class="language-PHP line-numbers">&lt;?php
namespace Spryker\Service\Flysystem;

use Spryker\Service\Kernel\AbstractBundleDependencyProvider;
use Spryker\Service\Kernel\Container;

class FlysystemDependencyProvider extends AbstractBundleDependencyProvider
{

    /**
     * @param \Spryker\Service\Kernel\Container $container
     *
     * @return \Spryker\Service\Kernel\Container
     */
    protected function addFlysystemPluginCollection($container)
    {
        $container[self::PLUGIN_COLLECTION_FLYSYSTEM] = function (Container $container) {
            return [];
        };

        return $container;
    }
    </code></pre>
        <p><var>FlysystemServiceFactory</var> will use the configured plugins stack in <var>buildFilesystemCollection()</var> via the <var>getFlysystemPluginCollection()</var> method.</p>
        <p>Make sure to carry over this behavior if you ever need to overwrite <var>buildFilesystemCollection()</var>.</p>
        <p>Otherwise, implement Flysystem plugin loading and configuration on your own.</p>
    </body>
</html>