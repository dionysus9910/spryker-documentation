<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="" MadCap:conditions="Spryker.B2B,Spryker.B2C,Spryker.DemoShop,Spryker.ShopSuite">
    <head>
    </head>
    <body>
        <h1>Data Feed Modules <img src="../../Resources/Images/shoptype/B2B_Shop.png" /> <img src="../../Resources/Images/shoptype/B2C_Shop.png" /> <img src="../../Resources/Images/shoptype/MasterSuite.png" /> <img src="../../Resources/Images/shoptype/Demoshop.png" /></h1>
        <MadCap:snippetBlock src="../../Resources/Snippets/beta_warning.flsnp" />
        <p>DataFeed module helps to query abstract products, categories, prices, availability data and related information for exporting or processing. The data Feed is not dependent on collectors. Every DataFeed module has an API to get a query. With the query you can use pagination, limits, add columns, query one row or all and more.</p>
        <h2>ProductAbstract DataFeed Module</h2>
        <p>The ProductAbstract DataFeed module has a query container with <var>queryAbstractProductDataFeed() </var>function that returns <var>Orm\Zed\Product\Persistence\SpyProductAbstractQuery</var>. By default, abstract product localized attributes are joined.</p>
        <p>Use <var>Generated\Shared\Transfer\ProductAbstractDataFeedTransfer</var> for query settings. Required only when you need an extra join or filters<var>. ProductAbstractDataFeedTransfer </var>contains the following fields:</p>
        <ul>
            <li>joinPrice</li>
            <li>joinCategory</li>
            <li>joinImage</li>
            <li>joinProduct</li>
            <li>joinOption</li>
            <li>updatedFrom</li>
            <li>updatedTo</li>
            <li>idLocale</li>
        </ul>
        <p>You can filter data using <var>updatedFrom</var>, <var>updatedTo</var>, <var>idLocale </var>options.</p>
        <ul>
            <li><var>joinImage </var>- set <var>true </var>to join images data for abstract products.</li>
            <li><var>joinCategory </var>- set <var>true </var>to join categories data.</li>
            <li><var>joinPrice </var>- set <var>true </var>to join prices data.</li>
            <li><var>joinProduct </var>- set <var>true </var>to join concrete products data with localized attributes, concrete product images and product stock.</li>
            <li><var>joinOption </var>- set <var>true </var>to join product options data.</li>
        </ul>
        <h3>Installation</h3>
        <p>Run:</p><pre><code class="language-PHP line-numbers">composer require spryker/product-abstract-data-feed</code></pre>
        <h3>Usage</h3>
        <p>Add to your dependency container</p><pre><code class="language-PHP line-numbers">&lt;?php
...

use Spryker\Zed\ProductAbstractDataFeed\Persistence\ProductAbstractDataFeedQueryContainer;

const PRODUCT_ABSTRACT_DATA_FEED = 'PRODUCT_ABSTRACT_DATA_FEED';

...

    public function providePersistenceLayerDependencies(Container $container)
    {
        $container[self::PRODUCT_ABSTRACT_DATA_FEED] = function (Container $container) {
            return $container-&gt;getLocator()
                -&gt;productAbstractDataFeed()
                -&gt;queryContainer();
    };

...</code></pre>
        <p>Add to your module persistence factory</p><pre><code class="language-PHP line-numbers">&lt;?php
...

public function getProductAbstractDataFeedQueryContainer()
{
    return $this-&gt;getProvidedDependency(YourBundleDependencyProvider::PRODUCT_ABSTRACT_DATA_FEED);
}

...</code></pre>
        <p>Query example</p><pre><code class="language-PHP line-numbers">&lt;?php
...

public function getAllAbstractProducts()
{
    $productAbstractQueryContainer = $this-&gt;getFactory()
        -&gt;getProductAbstractDataFeedQueryContainer();
    $productAbstractDataFeedTransfer = new ProductAbstractDataFeedTransfer();

    $productAbstractDataFeedTransfer-&gt;setIdLocale(46);
    $productAbstractDataFeedTransfer-&gt;setJoinImage(true);

    $query = $productAbstractQueryContainer-&gt;queryAbstractProductDataFeed($productAbstractDataFeedTransfer);

    return $query-&gt;find()
        -&gt;toArray();   
}

...</code></pre>
        <h2>Availability DataFeed Module</h2>
        <p>The Availability DataFeed Module has a query container with a <var>queryAvailabilityDataFeed()</var> function that returns <var>Orm\Zed\Product\Persistence\SpyProductAbstractQuery</var>. By default, stock, product, product localized attributes and abstract product localized attributes are joined.</p>
        <p>Use <var>Generated\Shared\Transfer\AvailabilityDataFeedTransferfor</var> query settings. The Transfer object and <var>idLocale </var>are required. AvailabilityDataFeedTransfer contains the following fields:</p>
        <ul>
            <li>updatedFrom</li>
            <li>updatedTo</li>
            <li>idLocale You can filter data using updatedFrom, updatedTo, idLocale options.</li>
        </ul>
        <h3>Installation</h3>
        <p>Run:</p><pre><code class="language-PHP line-numbers">composer require spryker/availability-data-feed</code></pre>
        <h3>Usage</h3>
        <p>Add to your dependency container</p><pre><code class="language-PHP line-numbers">&lt;?php
...

use Spryker\Zed\AvailabilityDataFeed\Persistence\AvailabilityDataFeedQueryContainer;

const AVAILABILITY_DATA_FEED = 'AVAILABILITY_DATA_FEED';

...

    public function providePersistenceLayerDependencies(Container $container)
    {
        $container[self::AVAILABILITY_DATA_FEED] = function (Container $container) {
            return $container-&gt;getLocator()
                -&gt;availabilityDataFeed()
                -&gt;queryContainer();
    };

...</code></pre>
        <p>Add to your Module persistence factory</p><pre><code class="language-PHP line-numbers">&lt;?php
...

public function getAvailabilityDataFeedQueryContainer()
{
    return $this-&gt;getProvidedDependency(YourBundleDependencyProvider::AVAILABILITY_DATA_FEED);
}

...</code></pre>
        <p>Query example</p><pre><code class="language-PHP line-numbers">&lt;?php
...

public function getProductsAvailability()
{
    $availabilityQueryContainer = $this-&gt;getFactory()
        -&gt;getAvailabilityDataFeedQueryContainer();
    $availabilityDataFeedTransfer = new AvailabilityDataFeedTransfer();
    $availabilityDataFeedTransfer-&gt;setIdLocale(46);

    $query = $availabilityQueryContainer-&gt;queryAvailabilityDataFeed($availabilityDataFeedTransfer);
        
    return $query-&gt;find()
        -&gt;toArray();
}

...</code></pre>
        <h2>Category DataFeed Module</h2>
        <p>The Category DataFeed module has a query container with a <var>queryCategoryDataFeed()</var> function that returns <var>Orm\Zed\Category\Persistence\SpyCategoryQuery</var>. By default category attributes and category nodes are joined.</p>
        <p>Use <var>Generated\Shared\Transfer\CategoryDataFeedTransfer</var> for query settings. The transfer object and <var>idLocale </var>are required. </p>
        <p><var>CategoryDataFeedTransfer</var> contains the following fields:</p>
        <ul>
            <li>joinAbstractProduct</li>
            <li>updatedFrom</li>
            <li>updatedTo</li>
            <li>idLocale You can filter data using <var>updatedFrom</var>, <var>updatedTo</var>, <var>idLocale </var>options.</li>
        </ul>
        <p><var>joinAbstractProduct </var>- set <var>true </var>to join abstract product and localized attributes.</p>
        <h3>Installation</h3>
        <p>Run:</p><pre><code class="language-PHP line-numbers">composer require spryker/category-data-feed</code></pre>
        <h3>Usage</h3>
        <p>Add to your dependency container:</p><pre><code class="language-PHP line-numbers">&lt;?php
...

Use Spryker\Zed\CategoryDataFeed\Persistence\CategoryDataFeedQueryContainer;

const CATEGORY_DATA_FEED = 'CATEGORY_DATA_FEED';

...

    public function providePersistenceLayerDependencies(Container $container)
    {
        $container[self::CATEGORY_DATA_FEED] = function (Container $container) {
            return $container-&gt;getLocator()
                -&gt;categoryDataFeed()
                -&gt;queryContainer();
    };

...</code></pre>
        <p>Add to your module persistence factory</p><pre><code class="language-PHP line-numbers">&lt;?php
...

public function getCategoryDataFeedQueryContainer()
{
    return $this-&gt;getProvidedDependency(YourBundleDependencyProvider::CATEGORY_DATA_FEED);
}

...</code></pre>
        <p>Query example</p><pre><code class="language-PHP line-numbers">&lt;?php
...

public function getAllCategories()
{
    $categoryDataFeedQueryContainer = $this-&gt;getFactory()
        -&gt;getCategoryDataFeedQueryContainer();
    $categoryDataFeedTransfer = new CategoryDataFeedTransfer();
    $categoryDataFeedTransfer-&gt;setIdLocale(46);

    $query = $categoryDataFeedQueryContainer-&gt;queryCategoryDataFeed($categoryDataFeedTransfer);

    return $query-&gt;find()
        -&gt;toArray();
}

...</code></pre>
        <h2>Price DataFeed Module</h2>
        <p>The Price DataFeed module has a query container with the <var>queryPriceDataFeed()</var> function that returns <var>Orm\Zed\Price\Persistence\SpyPriceProductQuery</var>.</p>
        <p>Use <var>Generated\Shared\Transfer\PriceDataFeedTransfer</var> for query settings.</p>
        <p>PriceDataFeedTransfer contains the following field:</p>
        <ul>
            <li><var>joinPriceType</var>
            </li>
        </ul>
        <p><var>joinPriceType </var>- set <var>true </var>to join price type data.</p>
        <h3>Installation</h3>
        <p>Run:</p><pre><code class="language-PHP line-numbers">ccomposer require spryker/price-data-feed</code></pre>
        <h3>Usage</h3>
        <p>Add to your dependency container</p><pre><code class="language-PHP line-numbers">&lt;?php
...

Use Spryker\Zed\CategoryDataFeed\Persistence\CategoryDataFeedQueryContainer;

const PRICE_DATA_FEED = 'PRICE_DATA_FEED';

...

    public function providePersistenceLayerDependencies(Container $container)
    {
        $container[self::PRICE_DATA_FEED] = function (Container $container) {
            return $container-&gt;getLocator()
                -&gt;priceDataFeed()
                -&gt;queryContainer();
    };

...</code></pre>
        <p>Add to your module persistence factory</p><pre><code class="language-PHP line-numbers">&lt;?php
...

public function getPriceDataFeedQueryContainer()
{
    return $this-&gt;getProvidedDependency(YourBundleDependencyProvider::PRICE_DATA_FEED);
}

...</code></pre>
        <p>Query example</p><pre><code class="language-PHP line-numbers">&lt;?php
...

public function getAllPrices()
{
    $priceDataFeedQueryContainer = $this-&gt;getFactory()
        -&gt;getPriceDataFeedQueryContainer();
    $priceDataFeedTransfer = new PriceDataFeedTransfer();
    $priceDataFeedTransfer-&gt;setJoinPriceType(true);

    $query = $priceDataFeedQueryContainer-&gt;queryPriceDataFeed($priceDataFeedTransfer);
        
    return $query-&gt;find()
        -&gt;toArray();
}

...</code></pre>
    </body>
</html>