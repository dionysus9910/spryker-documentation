<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="" MadCap:conditions="Spryker.B2B,Spryker.B2C">
    <head>
    </head>
    <body>
        <h1>Zed Request <img src="../../Resources/Images/shoptype/B2B_Shop.png" /> <img src="../../Resources/Images/shoptype/B2C_Shop.png" /></h1>
        <p>This module is used to handle requests from Yves to Zed and the responses from Zed.</p>
        <p>Internally it makes use of the well known <a href="http://docs.guzzlephp.org/en/latest/" target="_blank" title="Guzzle" alt="Guzzle">Guzzle</a> library.</p>
        <h2><var>HandlerStackContainer</var>
        </h2>
        <p>Guzzle provides a way to add a so called middleware. It makes use of a handler stack where you can push a middleware to. For more details about this checkout the <a href="http://docs.guzzlephp.org/en/latest/handlers-and-middleware.html" target="_blank" title="Guzzle handler and middleware documentation" alt="Guzzle handler and middleware documentation">Guzzle handler and middleware documentation</a>.</p>
        <p>The <var>HandlerStackContainer</var> can be used to add middleware to the handler stack without touching the <var>AbstractHttpClient</var>.</p>
        <p>The <var>HandlerStackContainer</var> holds a static variable where you can add your middle-ware from e.g. a <var>ServiceProvider</var>.</p><pre><code class="language-PHP line-numbers">&lt;?php 

namespace Pyz\Yves\YourBundle\Plugin\ServiceProvider;

class YourServiceProvider extends AbstractPlugin implements ServiceProviderInterface
{
    ...
    public function boot(Application $app)
    {
        $handlerStackContainer = $this-&gt;getFactory()-&gt;createHandlerStackContainer();
        $handlerStackContainer-&gt;addMiddleware($this-&gt;getFactory()-&gt;createYourMiddlewarePlugin());
    }
    ...
}</code></pre>
        <p>This technique is used for logging requests sent from Yves to Zed and the responses returned from Zed.</p>
        <p>For more details you can look into the <var>ZedRequestLogServiceProvider</var> class.</p>
        <p>Your middleware needs to implement <var>MiddlewareInterface</var> which has two simple methods <var>MiddlewareInterface::getName()</var> and <var>MiddlewareInterface::getCallable()</var>.</p>
    </body>
</html>