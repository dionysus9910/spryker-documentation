<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="" MadCap:conditions="Spryker.B2B,Spryker.B2C,Spryker.DemoShop,Spryker.ShopSuite">
    <head>
        <link href="../../../Resources/TableStyles/PatternedRows.css" rel="stylesheet" MadCap:stylesheetType="table" />
    </head>
    <body>
        <h1>Zed API Resources <img src="../../../Resources/Images/shoptype/B2B_Shop.png" /> <img src="../../../Resources/Images/shoptype/B2C_Shop.png" /> <img src="../../../Resources/Images/shoptype/MasterSuite.png" /> <img src="../../../Resources/Images/shoptype/Demoshop.png" /></h1>
        <p>Each module can have a “{module}Api” module(e.g. CustomerApi for Customer). Such an API module exposes CRUD facade methods (find, get, add, update, remove) that can be mapped to a URL via REST resource/action resolution.

</p>
        <p>The main Api module contains a dispatcher that delegates to those API module via resource map and returns the response in the expected format.

</p>
        <h2>URI, Action and Facade Method
</h2>
        <p>The following table is a quick overview for the different CRUD operations the API can perform out of the box:
</p>
        <table class="TableStyle-PatternedRows" style="mc-table-style: url('../../../Resources/TableStyles/PatternedRows.css'); margin-left: 0; margin-right: auto;" cellspacing="0">
            <col class="TableStyle-PatternedRows-Column-Regular">
            </col>
            <col class="TableStyle-PatternedRows-Column-Regular">
            </col>
            <col class="TableStyle-PatternedRows-Column-Regular">
            </col>
            <col class="TableStyle-PatternedRows-Column-Regular">
            </col>
            <thead>
                <tr class="TableStyle-PatternedRows-Head-Header1">
                    <th class="TableStyle-PatternedRows-HeadE-Regular-Header1">HTTP Method</th>
                    <th class="TableStyle-PatternedRows-HeadE-Regular-Header1">Meaning	</th>
                    <th class="TableStyle-PatternedRows-HeadE-Regular-Header1">URI</th>
                    <th class="TableStyle-PatternedRows-HeadD-Regular-Header1">ApiResourcePlugin method</th>
                </tr>
            </thead>
            <tbody>
                <tr class="TableStyle-PatternedRows-Body-LightRows">
                    <td class="TableStyle-PatternedRows-BodyE-Regular-LightRows">
                        <p>GET</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyE-Regular-LightRows">
                        <p>index/paginate 
read</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyE-Regular-LightRows">
                        <p>		
		/ 
/{id/slug}	</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyD-Regular-LightRows">
                        <p>find($apiRequestTransfer) 
get($id, $apiFilterTransfer)</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows-BodyE-Regular-DarkerRows">
                        <p>POST	</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyE-Regular-DarkerRows">
                        <p>create	</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyE-Regular-DarkerRows">
                        <p>
/</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyD-Regular-DarkerRows">
                        <p>	add($apiDataTransfer)
</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-LightRows">
                    <td class="TableStyle-PatternedRows-BodyE-Regular-LightRows">
                        <p>PATCH	</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyE-Regular-LightRows">
                        <p>update	</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyE-Regular-LightRows">
                        <p>/{id/slug}</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyD-Regular-LightRows">
                        <p>update($id, $apiDataTransfer)</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows-BodyB-Regular-DarkerRows">
                        <p>DELETE	</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyB-Regular-DarkerRows">
                        <p>delete	</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyB-Regular-DarkerRows">
                        <p>	
/{id/slug}	</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyA-Regular-DarkerRows">
                        <p>remove($id)</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p>
We do not use PUT as replacing on a REST level can lead to more dangers.
</p>
        <p>There is one special HTTP method <var>OPTIONS</var> which can be used to determine the accepted HTTP methods for this resource URL.</p>
        <p>This one will not have a body and return a <var>200</var> response. Check the headers for a <var>Accept</var> header with a comma separated list of methods.</p>
        <h2>BundleApi Module
</h2>
        <p>Each resource can be mapped to the following facade methods:
</p>
        <table class="TableStyle-PatternedRows" style="mc-table-style: url('../../../Resources/TableStyles/PatternedRows.css'); margin-left: 0; margin-right: auto;" cellspacing="0">
            <col class="TableStyle-PatternedRows-Column-Regular" />
            <col class="TableStyle-PatternedRows-Column-Regular" />
            <col class="TableStyle-PatternedRows-Column-Regular" />
            <thead>
                <tr class="TableStyle-PatternedRows-Head-Header1">
                    <th class="TableStyle-PatternedRows-HeadE-Regular-Header1">Meaning	</th>
                    <th class="TableStyle-PatternedRows-HeadE-Regular-Header1">Facade method signature</th>
                    <th class="TableStyle-PatternedRows-HeadD-Regular-Header1">Facade return type</th>
                </tr>
            </thead>
            <tbody>
                <tr class="TableStyle-PatternedRows-Body-LightRows">
                    <td class="TableStyle-PatternedRows-BodyE-Regular-LightRows">
                        <p>index/paginate</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyE-Regular-LightRows">
                        <p>findFoos($apiRequestTransfer)	</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyD-Regular-LightRows">
                        <p>ApiCollectionTransfer</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows-BodyE-Regular-DarkerRows">
                        <p>read	</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyE-Regular-DarkerRows">
                        <p>getFoo($id, $apiFilterTransfer)</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyD-Regular-DarkerRows">
                        <p>ApiItemTransfer</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-LightRows">
                    <td class="TableStyle-PatternedRows-BodyE-Regular-LightRows">
                        <p>create	</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyE-Regular-LightRows">
                        <p>	
	
	
addFoo($apiDataTransfer)	
</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyD-Regular-LightRows">
                        <p>ApiItemTransfer</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows-BodyE-Regular-DarkerRows">
                        <p>update	</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyE-Regular-DarkerRows">
                        <p>updateFoo($id, $apiDataTransfer)</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyD-Regular-DarkerRows">
                        <p>	ApiItemTransfer</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-LightRows">
                    <td class="TableStyle-PatternedRows-BodyB-Regular-LightRows">
                        <p>delete	</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyB-Regular-LightRows">
                        <p>removeFoo($id)	</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyA-Regular-LightRows">
                        <p>ApiItemTransfer
</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2>Request Format
</h2>
        <p>The Spryker API by default uses JSON. If you do not specify an extension in the URL, it will by default expect and return JSON.

</p>
        <h2>Response Format
</h2>
        <p>A successful response contains a <var>2xx </var>or 3xx code and can contain a <var>data </var>attribute:

</p><pre><code class="language-PHP line-numbers">{
    "code": 200,
    "message": null,
    "data": {
        ...
    }
}</code></pre>
        <p>
Error responses are usually <var>4xx </var>or <var>5xx </var>codes, they contain an error message instead of the data:

</p><pre><code class="language-PHP line-numbers">{
    "code": 404,
    "message": "Resource not found",
    "data": [],
    "_stackTrace": ...
}
</code></pre>
        <p>Collection vs Item
An index action in CRUD usually displays a collection of a resource. The same is true for our API. A “GET” call to the resource endpoint “/customers” then returns a collection. A “GET” call to “/customers/{id}” returns a single item of that resource.

</p>
        <p>The “find” action returns a collection, for JSON format this will be an array of arrays:

</p><pre><code class="language-PHP line-numbers">"data": {
    {
        "id_customer" =&gt; 1,
        ...
    },
    ...
}
</code></pre>
        <p>The “get”, “add” and “update” actions return a single item:

</p><pre><code class="language-PHP line-numbers">"data": {
    "id_customer" =&gt; 1,
    ...
}
</code></pre>
    </body>
</html>