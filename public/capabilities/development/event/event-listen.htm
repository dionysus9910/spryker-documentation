<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="" MadCap:conditions="Spryker.B2C,Spryker.B2B">
    <head>
    </head>
    <body>
        <h1>Listening to Events <img src="../../../Resources/Images/shoptype/B2B_Shop.png" /> <img src="../../../Resources/Images/shoptype/B2C_Shop.png" /></h1>
        <p>There are two ways to listen to events, using direct listeners or subscribers. The difference between these two is that a subscriber allows the module providing the subscriber to wire up the handlers in the module that owns it without touching the <var>EventDependencyProvider</var> exception’s initial subscriber initialization. It is best to use a subscriber from the beginning as this simplifies future listener registration. When you need to listen to specific listener use <var>\Pyz\Zed\Event\EventDependencyProvider::getEventListenerCollection</var>.</p>
        <p>To listen to events in the system you need to add listener plugins. Listener is a class which extends plugins and implements <var>EventListenerInterface</var>. This plugin must be placed in the module we want to listen to: <var>Communication\Plugin\Product\ProductRelationAbstractProductChangeListener</var>.</p>
        <p>For example: Each listener plugin must implement <var>\Spryker\Service\Event\Dependency\Plugin\EventListenerInterface</var>.</p><pre><code class="language-PHP line-numbers">&lt;?php
namespace Spryker\Zed\ProductRelation\Communication\Plugin\Product;

use Spryker\Zed\Event\Dependency\Plugin\EventListenerInterface;
use Spryker\Shared\Kernel\Transfer\TransferInterface;
use Spryker\Zed\Kernel\Communication\AbstractPlugin;

/**
 * @method \Spryker\Zed\ProductRelation\Business\ProductRelationFacade getFacade()
 * @method \Spryker\Zed\ProductRelation\Communication\ProductRelationCommunicationFactory getFactory()
 */
class ProductRelationAbstractProductChangeListener extends AbstractPlugin implements EventListenerInterface
{

    /**
     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface|\Generated\Shared\Transfer\ProductAbstractTransfer $eventTransfer
     *
     * @return void
     */
    public function handle(TransferInterface $eventTransfer)
    {
        $this-&gt;getFacade()-&gt;applyRulesToProductAbstract($eventTransfer);
    }

}</code></pre>
        <p>Add this listener to <var>\Pyz\Zed\Event\EventDependencyProvider::getEventListenerCollection</var></p>
        <p>For example:</p>
        <p><var>$eventCollection-&gt;addListener(ProductEvents::PRODUCT_ABSTRACT_BEFORE_CREATE, new ProductRelationAbstractProductChangeListener())</var>
        </p>
        <p>
            <MadCap:relatedTopics style="mc-help-control-display: popup;">
                <MadCap:relatedTopic src="event.htm" />
                <MadCap:relatedTopic src="event-adding.htm" />
                <MadCap:relatedTopic src="event-asynch.htm" />
                <MadCap:relatedTopic src="event-configure-q.htm" />
                <MadCap:relatedTopic src="event_listen.htm" />
                <MadCap:relatedTopic src="event-listen-using-subscr.htm" />
                <MadCap:relatedTopic src="event-priority.htm" />
            </MadCap:relatedTopics>
        </p>
    </body>
</html>