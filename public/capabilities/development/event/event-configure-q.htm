<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="" MadCap:conditions="Spryker.B2C,Spryker.B2B">
    <head>
    </head>
    <body>
        <h1>Configuring an Events Queue <img src="../../../Resources/Images/shoptype/B2B_Shop.png" /> <img src="../../../Resources/Images/shoptype/B2C_Shop.png" /></h1>
        <p>Implementation is already present in demoshop and all code samples can be found there.</p>
        <p>To implement an events queue:</p>
        <table>
            <col />
            <col />
            <tbody>
                <tr>
                    <td>
                        <p>1.</p>
                    </td>
                    <td>
                        <p>Install spryker/queue version at least 1.*. and spryker/rabbit-mq</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>2.</p>
                    </td>
                    <td>
                        <p>Create the configuration for RabbitMQ in <var>\Pyz\Client\RabbitMq\RabbitMqDependencyProvideras follows</var>:</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Client\RabbitMq;

use ArrayObject;
use Generated\Shared\Transfer\RabbitMqOptionTransfer;
use Spryker\Client\RabbitMq\Model\Connection\Connection;
use Spryker\Client\RabbitMq\RabbitMqDependencyProvider as RabbitMqRabbitMqDependencyProvider;
use Spryker\Shared\Event\EventConstants;

class RabbitMqDependencyProvider extends RabbitMqRabbitMqDependencyProvider
{

    /**
     * @return \ArrayObject
     */
    protected function getQueueOptions()
    {
        $queueOptionCollection = new ArrayObject();
        $queueOptionCollection-&gt;append($this-&gt;createEventExchangeQueueOption());
        $queueOptionCollection-&gt;append($this-&gt;createEventErrorExchangeQueueOption());

        return $queueOptionCollection;
    }

    /**
     * @return \Generated\Shared\Transfer\RabbitMqOptionTransfer
     */
    protected function createEventExchangeQueueOption()
    {
        $rabbitMqOptionTransfer = new RabbitMqOptionTransfer();
        $rabbitMqOptionTransfer-&gt;setQueueName(EventConstants::EVENT_QUEUE);
        $rabbitMqOptionTransfer-&gt;setAutoDelete(false);
        $rabbitMqOptionTransfer-&gt;setDurable(true);
        $rabbitMqOptionTransfer-&gt;setPassive(false);
        $rabbitMqOptionTransfer-&gt;setType('direct');
        $rabbitMqOptionTransfer-&gt;setDeclarationType(Connection::RABBIT_MQ_EXCHANGE);
        $rabbitMqOptionTransfer-&gt;setBindingQueue($this-&gt;createEventQueueBinding());

        return $rabbitMqOptionTransfer;
    }

    /**
     * @return \Generated\Shared\Transfer\RabbitMqOptionTransfer
     */
    protected function createEventErrorExchangeQueueOption()
    {
        $rabbitMqOptionTransfer = new RabbitMqOptionTransfer();
        $rabbitMqOptionTransfer-&gt;setQueueName(EventConstants::EVENT_QUEUE);
        $rabbitMqOptionTransfer-&gt;setAutoDelete(false);
        $rabbitMqOptionTransfer-&gt;setDurable(true);
        $rabbitMqOptionTransfer-&gt;setPassive(false);
        $rabbitMqOptionTransfer-&gt;setType('direct');
        $rabbitMqOptionTransfer-&gt;setDeclarationType(Connection::RABBIT_MQ_EXCHANGE);
        $rabbitMqOptionTransfer-&gt;setBindingQueue($this-&gt;createEventErrorQueueBinding());

        return $rabbitMqOptionTransfer;
    }

    /**
     * @return \Generated\Shared\Transfer\RabbitMqOptionTransfer
     */
    protected function createEventErrorQueueBinding()
    {
        $rabbitMqOptionTransfer = new RabbitMqOptionTransfer();
        $rabbitMqOptionTransfer-&gt;setQueueName(EventConstants::EVENT_QUEUE . '.error');
        $rabbitMqOptionTransfer-&gt;setAutoDelete(false);
        $rabbitMqOptionTransfer-&gt;setDurable(true);
        $rabbitMqOptionTransfer-&gt;setExclusive(false);
        $rabbitMqOptionTransfer-&gt;setPassive(false);
        $rabbitMqOptionTransfer-&gt;setRoutingKey('error');

        return $rabbitMqOptionTransfer;
    }

    /**
     * @return \Generated\Shared\Transfer\RabbitMqOptionTransfer
     */
    protected function createEventQueueBinding()
    {
        $rabbitMqOptionTransfer = new RabbitMqOptionTransfer();
        $rabbitMqOptionTransfer-&gt;setQueueName(EventConstants::EVENT_QUEUE);
        $rabbitMqOptionTransfer-&gt;setAutoDelete(false);
        $rabbitMqOptionTransfer-&gt;setDurable(true);
        $rabbitMqOptionTransfer-&gt;setExclusive(false);
        $rabbitMqOptionTransfer-&gt;setPassive(false);

        return $rabbitMqOptionTransfer;
    }

}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <table>
            <col />
            <col />
            <tbody>
                <tr>
                    <td>
                        <p>3.</p>
                    </td>
                    <td>
                        <p>In <var>\Pyz\Client\Queue\QueueDependencyProvider</var> add the RabbitMQ adapter:</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Client\Queue;

use Spryker\Client\Kernel\Container;
use Spryker\Client\Queue\QueueDependencyProvider as BaseQueueDependencyProvider;

class QueueDependencyProvider extends BaseQueueDependencyProvider
{

    /**
     * @param \Spryker\Client\Kernel\Container $container
     *
     * @return \Spryker\Client\Queue\Model\Adapter\AdapterInterface[]
     */
    protected function createQueueAdapters(Container $container)
    {
        return [
            $container-&gt;getLocator()-&gt;rabbitMq()-&gt;client()-&gt;createQueueAdapter(),
        ];
    }

}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <table>
            <col />
            <col />
            <tbody>
                <tr>
                    <td>
                        <p>4.</p>
                    </td>
                    <td>
                        <p>In <var>\Pyz\Zed\Queue\QueueConfig</var> add receiver options for the event queue:</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Zed\Queue;

use Generated\Shared\Transfer\RabbitMqConsumerOptionTransfer;
use Spryker\Shared\Event\EventConstants;
use Spryker\Zed\Queue\QueueConfig as SprykerQueueConfig;

class QueueConfig extends SprykerQueueConfig
{

    /**
     * @return array
     */
    protected function getQueueReceiverOptions()
    {
        return [
            EventConstants::EVENT_QUEUE =&gt; [
                'rabbitmq' =&gt; $this-&gt;getRabbitMqQueueConsumerOptions(),
            ],
        ];
    }

    /**
     * @return \Generated\Shared\Transfer\RabbitMqConsumerOptionTransfer
     */
    protected function getRabbitMqQueueConsumerOptions()
    {
        $queueOptionTransfer = new RabbitMqConsumerOptionTransfer();
        $queueOptionTransfer-&gt;setQueueName(EventConstants::EVENT_QUEUE);
        $queueOptionTransfer-&gt;setConsumerTag('');
        $queueOptionTransfer-&gt;setNoLocal(false);
        $queueOptionTransfer-&gt;setNoAck(false);
        $queueOptionTransfer-&gt;setConsumerExclusive(false);
        $queueOptionTransfer-&gt;setNoWait(false);

        return $queueOptionTransfer;
    }

}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <table>
            <col />
            <col />
            <tbody>
                <tr>
                    <td>
                        <p>5.</p>
                    </td>
                    <td>
                        <p>In <var>\Pyz\Zed\Queue\QueueDependencyProvider</var> add a plugin(consumer) to process messages/events.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php
namespace Pyz\Zed\Queue;

use Spryker\Shared\Event\EventConstants;
use Spryker\Zed\Event\Communication\Plugin\Queue\EventQueueMessageProcessorPlugin;
use Spryker\Zed\Kernel\Container;
use Spryker\Zed\Queue\QueueDependencyProvider as SprykerDependencyProvider;

class QueueDependencyProvider extends SprykerDependencyProvider
{

    /**
     * @param \Spryker\Zed\Kernel\Container $container
     *
     * @return \Spryker\Zed\Queue\Dependency\Plugin\QueueMessageProcessorPluginInterface[]
     */
    protected function getProcessorMessagePlugins(Container $container)
    {
        return [
            EventConstants::EVENT_QUEUE =&gt; new EventQueueMessageProcessorPlugin(),
        ];
    }

}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <table>
            <col />
            <col />
            <tbody>
                <tr>
                    <td>
                        <p>6.</p>
                    </td>
                    <td>
                        <p>In your application’s configuration file ‘./config/Shared/config_default.php’ or environment specific make sure you have this configuration:</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php
$config[QueueConstants::QUEUE_SERVER_ID] = (gethostname()) ?: php_uname('n');
$config[QueueConstants::QUEUE_WORKER_INTERVAL_MILLISECONDS] = 5000;
$config[QueueConstants::QUEUE_WORKER_MAX_THRESHOLD_SECONDS] = 59;

$config[QueueConstants::QUEUE_ADAPTER_CONFIGURATION] = [
    EventConstants::EVENT_QUEUE =&gt; [
        QueueConfig::CONFIG_QUEUE_ADAPTER =&gt; \Spryker\Client\RabbitMq\Model\RabbitMqAdapter::class,
        QueueConfig::CONFIG_MAX_WORKER_NUMBER =&gt; 1, //Increase number of workers if higher concurrency needed.
    ],
];</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p>
            <MadCap:relatedTopics style="mc-help-control-display: popup;">
                <MadCap:relatedTopic src="event.htm" />
                <MadCap:relatedTopic src="event-adding.htm" />
                <MadCap:relatedTopic src="event-asynch.htm" />
                <MadCap:relatedTopic src="event_configure_q.htm" />
                <MadCap:relatedTopic src="event-listen.htm" />
                <MadCap:relatedTopic src="event-listen-using-subscr.htm" />
                <MadCap:relatedTopic src="event-priority.htm" />
            </MadCap:relatedTopics>
        </p>
    </body>
</html>