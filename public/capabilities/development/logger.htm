<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="" MadCap:conditions="Spryker.B2B,Spryker.B2C,Spryker.DemoShop,Spryker.ShopSuite">
    <head>
        <link href="../../Resources/TableStyles/PatternedRows.css" rel="stylesheet" MadCap:stylesheetType="table" />
    </head>
    <body>
        <h1>Logger <img src="../../Resources/Images/shoptype/B2B_Shop.png" /> <img src="../../Resources/Images/shoptype/B2C_Shop.png" /> <img src="../../Resources/Images/shoptype/MasterSuite.png" /> <img src="../../Resources/Images/shoptype/Demoshop.png" /></h1>
        <p MadCap:conditions="General.Hidden Comment">used to be: http://spryker.github.io/core/bundles/log/</p>
        <p MadCap:conditions="General.Hidden Comment">Missing diagrams and the content is not complete<br /></p>
        <p>Spryker contains a <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md" target="_blank" title="PSR-3" alt="PSR-3">PSR-3</a> compatible logger which can be customized to any needs.</p>
        <p>You can use the logger everywhere in the system, as in the example below:</p><pre><code class="language-PHP line-numbers">&lt;?php

use Spryker\Shared\Log\LoggerTrait;

class MyClass
{

    use LoggerTrait;

    public function myFunction()
    {
        // This will use the default logger configuration to add a new info message into the log file.
        $this-&gt;getLogger()-&gt;info('Lorem ipsum dolor sit amet...');
    }

}</code></pre>
        <p>According to <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md" target="_blank" title="PSR-3" alt="PSR-3">PSR-3</a> there are 8 log levels:</p>
        <table class="TableStyle-PatternedRows" style="mc-table-style: url('../../Resources/TableStyles/PatternedRows.css');" cellspacing="0">
            <col class="TableStyle-PatternedRows-Column-Regular" />
            <col class="TableStyle-PatternedRows-Column-Regular" />
            <thead>
                <tr class="TableStyle-PatternedRows-Head-Header1">
                    <th class="TableStyle-PatternedRows-HeadE-Regular-Header1">Log level</th>
                    <th class="TableStyle-PatternedRows-HeadD-Regular-Header1">Purpose</th>
                </tr>
            </thead>
            <tbody>
                <tr class="TableStyle-PatternedRows-Body-LightRows">
                    <td class="TableStyle-PatternedRows-BodyE-Regular-LightRows">
                        <p>emergency</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyD-Regular-LightRows">
                        <p>System is unusable.</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows-BodyE-Regular-DarkerRows">
                        <p>alert</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyD-Regular-DarkerRows">
                        <p>Action must be taken immediately.</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-LightRows">
                    <td class="TableStyle-PatternedRows-BodyE-Regular-LightRows">
                        <p>critical</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyD-Regular-LightRows">
                        <p>	Critical conditions.</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows-BodyE-Regular-DarkerRows">
                        <p>error</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyD-Regular-DarkerRows">
                        <p>Runtime errors that do not require immediate action but should typically be logged and monitored.</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-LightRows">
                    <td class="TableStyle-PatternedRows-BodyE-Regular-LightRows">
                        <p>warning</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyD-Regular-LightRows">
                        <p>Exceptional occurrences that are not errors.</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows-BodyE-Regular-DarkerRows">
                        <p>notice</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyD-Regular-DarkerRows">
                        <p>Normal but significant events.</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-LightRows">
                    <td class="TableStyle-PatternedRows-BodyE-Regular-LightRows">
                        <p>	info</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyD-Regular-LightRows">
                        <p>Interesting events.</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows-BodyB-Regular-DarkerRows">
                        <p>debug</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyA-Regular-DarkerRows">
                        <p>Detailed debug information.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p>We recommend to use a trait instead of direct usage of the logger. This way you can mock the logger in unit tests.</p><pre><code class="language-PHP line-numbers">&lt;?php

use Psr\Log\LoggerInterface;

...
$loggerMock = $this-&gt;getMockBuilder(LoggerInterface::class)-&gt;getMock();
...</code></pre>
        <h2>What is Logged by Default?</h2>
        <p>By default the <var>Log</var> module has a default configuration according to which, it will log everything into a file, up from a specified log level (both defined in the project config). The following configurations can be modified in the project config.</p><pre><code class="language-PHP line-numbers">&lt;?php
// path of the log file
$config[LogConstants::LOG_FILE_PATH] = APPLICATION_ROOT_DIR . '/data/DE/logs/application.log';
// Log level (higher level messages will be logged as well)
$config[LogConstants::LOG_LEVEL] = Monolog\Logger::ERROR;</code></pre>
        <p>For a more detailed logging, the <var>Application</var> module provides a <var>SprykerLoggerConfig</var> which adds some data to every log entry and uses some processors to manipulate data.</p>
        <p>E.g. sanitizing entity data when a propel entity is passed to the logger context (<var>$this-&gt;getLogger()-&gt;info('Message', ['entity' =&gt; $myEntity])</var>).</p>
        <h2>Custom Logging Configuration</h2>
        <p>Every configuration defines a different logger “channel”. Each channel contains a stack of HandlerInterface which will be used to define how the logger should work(e.g. where to log what level, etc.).</p><pre><code class="language-PHP line-numbers">&lt;?php

use Monolog\Handler\FingersCrossedHandler;
use Monolog\Handler\HandlerInterface;
use Monolog\Handler\SlackHandler;
use Monolog\Handler\StreamHandler;
use Monolog\Logger;

MyLoggerConfig implements LoggerConfigInterface
{

    /**
     * @return string
     */
    public function getChannelName()
    {
        // Make sure this string is not used already for other logger channels
        // otherwise it won't work as expected.
        return 'custom logger';
    }

    /**
     * @return HandlerInterface[]
     */
    public function getHandlers()
    {
        return [
            new StreamHandler('/log/file/path', Logger::INFO),
            new FingersCrossedHandler(
                new SlackHandler('mysecrettoken', 'channel'),
                new ErrorLevelActivationStrategy(Logger::CRITICAL)
            ),
        ];
    }

    /**
     * @return \callable[]
     */
    public function getProcessors()
    {
        return [];
    }

}</code></pre>
        <p>The configuration in the example above will log every message to a file which is higher than INFO level and use the FingersCrossed wrapper to log into a Slack channel if a CRITICAL level event occurs.</p>
        <p>For additional information about the available monolog handlers and processors, please read the following <a href="https://github.com/Seldaek/monolog" target="_blank" title="monolog" alt="monolog">documentation</a>.</p>
        <p>You can also have separated configurations for Yves and Zed. To use separated configs you need to add dedicated LoggerConfig plugins to your configuration.</p><pre><code class="language-PHP line-numbers">
&lt;?php

...

// ---------- Logging
$config[LogConstants::LOGGER_CONFIG_ZED] = MyZedLoggerConfigPlugin::class;
$config[LogConstants::LOGGER_CONFIG_YVES] = MyYvesLoggerConfigPlugin::class;

...

        </code></pre>
        <p>Those plugins need to implement the <var>LoggerConfigInterface</var> from the Log module.</p>
        <h2>Enable Detailed Logging</h2>
        <p>The log code is implemented in a way that it’s very easy to enable/disable specific logging. The ServiceProvider and other mechanisms are used in order to achieve this.</p>
        <h3>Request / Response Logging</h3>
        <p>If you want to log all the requests and responses, you just need to add the <var>KernelLogServiceProvider</var> to your application bootstrap. This will then log all master requests.</p>
        <p>The request message will look like:</p>
        <p><var>WEB Request Yves [GET] /foo/bar</var>
        </p>
        <p>and the response message:</p>
        <p><var>WEB Response Yves [200]</var>
        </p>
        <h3>ZedRequest / ZedResponse Logging</h3>
        <p>Yves sometimes calls Zed, if you want to get detailed information about what is going on, you just need to add the <var>ZedRequestLogServiceProvider</var> from the ZedRequest module to your Yves bootstrap.</p>
        <p>This will add a middleware to <var>Guzzle</var>, which logs all calls to Zed and their responses.</p>
        <p>The request message will look like this:</p>
        <p><var>Transfer request [POST] /foo/bar</var>
        </p>
        <p>The response message will look like this:</p>
        <p><var>Transfer response [200]</var>
        </p>
        <h3>Propel Logging</h3>
        <p>By default ObjectBuilder is set by demoshop propel configuration, which does NOT log outgoing queries.</p>
        <p>If you want to log the save, update and delete operations of your entities, you need to use <var>ObjectBuilderWithLogger::class</var> as builder in your <var>config_propel.php</var>. This will add the logger to the generated entities.</p><pre><code class="language-PHP line-numbers">&lt;?php
$config[PropelConstants::PROPEL] = [
    ...
    'generator' =&gt; [
        ...
        'objectModel' =&gt; [
            ...
            'builders' =&gt; [
                ...
                'object' =&gt; ObjectBuilderWithLogger::class,
                ...
            ]
        ]
    ]
    ...
];</code></pre>
        <p>The log messages will look like:</p>
        <p><var>Entity save (new)</var> <var>Entity save (update)</var> or <var>Entity delete</var></p>
        <h3>Console Command Logging</h3>
        <p>If you want to log the execution of console commands, you just need to add the <var>ConsoleLogPlugin</var> as event subscriber to your <var>ConsoleDependencyProvider</var> as described in Console. </p>
        <p>The log messages will look like this:</p>
        <p><var>CLI command "my:command" started</var> <var>CLI command "my:command" terminated</var></p>
        <p>and if something goes wrong:</p>
        <p><var>CLI command "my:command" exception, message "Something went wrong"</var>
        </p>
        <p>Spryker collects all incoming and all saved data. This way you make sure that all data is persisted and can be used for analysis.</p>
        <p MadCap:conditions="General.Hidden Comment"><span style="background-color: #ffff00;"><MadCap:annotation MadCap:createDate="2018-08-31T14:18:11.0796162+03:00" MadCap:creator="oksana.karasyova" MadCap:initials="OK" MadCap:comment="Add Diagram" MadCap:editor="oksana.karasyova" MadCap:editDate="2018-08-31T14:18:21.7286922+03:00">diagram missing here</MadCap:annotation></span>
        </p>
        <ul>
            <li class="bullet_list">All incoming data (GET and POST data from HTTP request)</li>
            <li class="bullet_list">All data that is transferred between Yves and Zed</li>
            <li class="bullet_list">All data that is stored to entities</li>
            <li class="bullet_list">All errors that reach the global error handler</li>
        </ul>
        <p>If you want to have different logging functionality, then you can create your own implementation of <var>Spryker\Shared\Log\Config\LoggerConfigInterface</var>.</p><pre><code class="language-PHP line-numbers">&lt;?php

use Spryker\Shared\Log\LoggerTrait;

class MyClass
{
    use LoggerTrait;

    public function myFunction()
    {
        // This will use MyLoggerConfig configuration to log a new warning message in the appropriate way.
        $this-&gt;getLogger(new MyLoggerConfig())-&gt;warning('Lorem ipsum dolog sit amet...');
    }
}</code></pre>
        <p>Tip: You could even create a different LoggerTrait to avoid instantiating and passing the config as parameter all the time. This might be useful on project level to implement a global logging logic and use it all around the code.</p>
        <h3>Handler</h3>
        <p>You can use all handler shipped with <var>Monolog</var> within your Logger configuration. Spryker also ships with special handlers to be used in the Spryker context.</p>
        <h4>QueueHandler</h4>
        <p>Yves and Zed provide a QueueHandler to be used for log messages in a queue. This handler should always be used inside the <var>BufferHandler</var> from <var>Monolog</var>.</p>
        <p>Using the <var>QueueHandler</var> is pretty easy. You only need to pass the <var>QueueClient</var> and a name of the queue you want to send your log messages to.</p>
        <p>Currently, there is a <var>Loggly</var> module in the SprykerEco namespace you can use to send your log messages from the queue to the Loggly Service. For more details go to Loggly Queue Integration</p>
        <h3>Performance</h3>
        <p>Always keep an eye on your performance when you change the configuration for logging. The already mentioned <var>BufferHandler</var> is always something you should consider in your log environment. Logging can slow your system dramatically down.</p>
        <h4 MadCap:conditions="General.Draft">
            <MadCap:annotation MadCap:createDate="2018-09-19T12:44:37.1814939+03:00" MadCap:creator="oksana.karasyova" MadCap:initials="OK" MadCap:comment="Add information" MadCap:editor="oksana.karasyova" MadCap:editDate="2018-09-19T12:44:55.7771842+03:00">Log events</MadCap:annotation>
        </h4>
        <h4 MadCap:conditions="General.Draft">Caught exceptions</h4>
        <h4 MadCap:conditions="General.Draft">Uncaught exceptions</h4>
        <h2 MadCap:conditions="General.Draft">How to retrieve the data?</h2>
        <p MadCap:conditions="General.Draft"><span style="background-color: #ffff00;">diagram missing here</span>
        </p>
        <h2>Configuration</h2>
        <p>Spryker uses <a href="https://github.com/Seldaek/monolog" target="_blank" title="Monolog" alt="Monolog">Monolog</a> which supports several configuration options.</p>
        <p>With Spryker you can configure them in the config-files.</p>
        <p>&#160;</p>
        <p><b>See also:</b>
        </p>
        <ul>
            <li>&#160;</li>
        </ul>
        <p>&#160;</p>
        <p><i>Last review date: Oct. 23rd, 2017 </i>
            <MadCap:conditionalText MadCap:conditions="General.Hidden Comment" style="font-style: italic;">by René Klatt</MadCap:conditionalText>
        </p>
    </body>
</html>