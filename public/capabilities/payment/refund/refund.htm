<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="" MadCap:conditions="Spryker.B2B,Spryker.B2C,Spryker.DemoShop,Spryker.ShopSuite">
    <head>
    </head>
    <body>
        <h1>Refund <img src="../../../Resources/Images/shoptype/B2B_Shop.png" /> <img src="../../../Resources/Images/shoptype/B2C_Shop.png" /> <img src="../../../Resources/Images/shoptype/MasterSuite.png" /> <img src="../../../Resources/Images/shoptype/Demoshop.png" /></h1>
        <p>
            <MadCap:relatedTopics target="_self" style="mc-label: 'Versions';mc-help-control-display: list;">
                <MadCap:relatedTopic src="refund-2-0.htm" />
            </MadCap:relatedTopics>
        </p>
        <p class="tip"><strong>Refund</strong>
            <br />Refund manages the retour refund process.</p>
        <h2><a name="Overview"></a>Overview</h2>
        <p><var>RefundFacade</var> contains the following methods:</p>
        <ul>
            <li class="bullet_list"><var>calculateRefund(array $salesOrderItems, SpySalesOrder $salesOrderEntity)</var>
                <ul>
                    <li class="bullet_list">calculates refundable amount for the sales order</li>
                </ul>
            </li>
            <li class="bullet_list"><var>saveRefund(RefundTransfer $refundTransfer)</var>
                <ul>
                    <li class="bullet_list">persists the calculated refund amount</li>
                </ul>
            </li>
        </ul>
        <p>The <var>RefundFacade::calculateRefund($salesOrderItems, $salesOrderEntity)</var> will return a <var>RefundTransfer</var> that contains the calculated refundable amount.</p>
        <h2><a name="Using"></a>Using the Refund Module</h2>
        <p>Usually this functionality will be integrated in the state machine processes and will be called by a command.</p>
        <p>A command plugin that calls the refund functionality can be similar to the example below:</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php

namespace MyNamespace\Zed\MyBundle\Communication\Plugin\Command;

use Orm\Zed\Sales\Persistence\SpySalesOrder;
use Spryker\Zed\Kernel\Communication\AbstractPlugin;
use Spryker\Zed\Oms\Business\Util\ReadOnlyArrayObject;
use Spryker\Zed\Oms\Communication\Plugin\Oms\Command\CommandByOrderInterface;

class RefundCommand extends AbstractPlugin implements CommandByOrderInterface
{

    /**
     * @param array $orderItems
     * @param \Orm\Zed\Sales\Persistence\SpySalesOrder $orderEntity
     * @param \Spryker\Zed\Oms\Business\Util\ReadOnlyArrayObject $data
     *
     * @return array
     */
    public function run(array $orderItems, SpySalesOrder $orderEntity, ReadOnlyArrayObject $data)
    {
        ...

        $result = $this-&gt;getFacade()-&gt;refundPayment($orderItems, $orderEntity);

        ...

        return [];
    }

}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p>The needed data to handle the refund is given inside the state machine command and you only need to pass the data to the Business Layer of your payment provider.</p>
        <p>In your transaction model, you ask the <var>RefundFacade</var> to calculate the refundable amount by calling <var>RefundFacade::calculateRefund($orderItems, $orderEntity)</var> which will return a <var>RefundTransfer</var>.</p>
        <p>The <var>RefundTransfer::$amount</var> contains the refundable amount for the given data.</p>
        <p>After that, you can tell your payment provider the amount that should be refunded. When the response is successful, you need to save the refund data by calling <var>RefundFacade::saveRefund($refundTransfer)</var>.</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">&lt;?php

namespace MyNamespace\Zed\MyBundle\Business\Model\Transaction;

use Orm\Zed\Sales\Persistence\SpySalesOrder;
use Spryker\Zed\Refund\Business\RefundFacadeInterface;

class RefundTransaction
{

    /**
     * @var \Spryker\Zed\Refund\Business\RefundFacadeInterface
     */
    protected $refundFacade;

    /**
     * @param \Spryker\Zed\Refund\Business\RefundFacadeInterface
     */
    public function __construct(RefundFacadeInterface $refundFacade)
    {
        $this-&gt;refundFacade = $refundFacade;
    }

    ...

    /**
     * @param \Orm\Zed\Sales\Persistence\SpySalesOrderItem[] $orderItems
     * @param \Orm\Zed\Sales\Persistence\SpySalesOrder $orderEntity
     *
     * ...
     */
    public function refundTransaction(array $orderItems, SpySalesOrder $orderEntity)
    {
        ...

        $refundTransfer = $this-&gt;refundFacade()-&gt;calculateRefund($orderItems, $orderEntity);
        $result = $this-&gt;doRefund($refundTransfer);

        if ($result) {
            $this-&gt;refundFacade()-&gt;saveRefund($refundTransfer);
        }

        ...
    }

    ...

}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h2><a name="Extendin"></a>Extending the Refund Module</h2>
        <p>The manner of calculating the refundable amount is different from one project to another. One will refund the shipment for every item, while the other one will refund the shipment only when all items are refunded etc.</p>
        <p>The calculation of the refundable amount is achieved through a plugin mechanism.</p>
        <p>The default implementation will refund all expenses when the last item will be refunded. If you need to change this behaviour, you simply need to create a new plugin that implements <var>RefundCalculatorPluginInterface</var> and replace the default one from the plugin stack with the new one.</p>
        <p>This interface contains one method <var>RefundCalculatorPluginInterface::calculateRefund()</var> that asks for a <var>RefundTransfer</var> object, an <var>OrderTransfer</var> and an array of items that need to be refunded.</p>
    </body>
</html>