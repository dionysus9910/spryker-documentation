<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="" MadCap:lastBlockDepth="3" MadCap:lastHeight="1310" MadCap:lastWidth="2409">
    <head>
    </head>
    <body>
        <h1>Query Objects</h1>
        <p MadCap:conditions="General.Image_Source">Used to be: http://spryker.github.io/development-guide/zed/persistence-layer/query-object/</p>
        <p>Query objects provide an object-oriented API for writing database queries which are used in <a href="query_container.htm">query containers</a>.
</p>
        <p>Please check the official <a href="http://propelorm.org/documentation/reference/model-criteria.html" target="_blank">Propel Query Reference</a> for a complete documentation.

</p>
        <h2>How to Create a New Query Object
</h2>
        <p>Query object are created by Propel during the <var>build model </var>step. See the <a href="database_schema_definition.htm" target="_blank">schema definition</a> for details how to describe them in XML.

</p>
        <p>As you can see <var>src/Orm/Zed/</var> the query object which belongs to the Spryker core extend base classes placed in the <var>vendor </var>directory. This way you can easily adopt the classes for your needs but we can still add methods in the core.

</p>
        <h2>Query class generator
</h2>
        <p>The <var>Propel </var> module alters the rules of generating query models by requiring explicit passing of filtering criteria into <var>filterBy.. </var>and <var>findBy...</var> methods.

</p>
        <p>This means, that when an array, <var>LIKE </var>expression or an array with <var>min/max</var> are passed as a filtering argument, it is explicitly required to specify <var>Criteria::IN</var>, <var>Criteria::LIKE</var> or <var>Criteria::BETWEEN</var>.

The <var>Criteria::BETWEEN</var> is implemented in the wrapper class <var>Spryker\Zed\Propel\Business\Runtime\ActiveQuery\Criteria</var>.

</p>
        <p>Additionally the <var>Propel </var>module adds the following methods into the generated classes, that allow to easily filter: <var>filterBy...._In()</var>, <var>filterBy...._Like()</var> and <var>filterBy...._Between()</var>.</p>
    </body>
    <p>&#160;</p><b>See also:</b>
    <ul>
        <li><a href="database_overview.htm">Database Overview</a>
        </li>
        <li><a href="database_schema_definition.htm">Defining Database Schema</a>
        </li>
        <li><a href="entity.htm">Learn about Entities and their usage</a>
        </li>
        <li><a href="entity.htm">Saving Entities with transactions</a>
        </li>
        <li><a href="entity-manager.htm">Learn about Entity Manager and how to use it</a>
        </li>
        <li><a href="repository.htm">Learn about Repository class and how to use it
			</a>
        </li>
        <li><a href="query_container.htm">Implementing and using a query container</a>
        </li>
    </ul>
    <p><a href="query_objects.htm">&#160;</a>
    </p>
</html>