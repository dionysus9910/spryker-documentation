<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="">
    <head>
        <link href="../../../Resources/TableStyles/PatternedRows.css" rel="stylesheet" MadCap:stylesheetType="table" />
    </head>
    <body>
        <h1>Controllers and Actions</h1>
        <p MadCap:conditions="General.Hidden Comment">Used to be: http://spryker.github.io/development-guide/zed/communication-layer/controllers-actions/</p>
        <p>Zed’s communication layer is the entry point to the system. Here are executed all of the external requests from users, the Yves-application and all command-line calls. The purpose of this layer is to retrieve the data, delegate to the business layer and to handover it to the presentation layer.</p>
        <p>The methods inside of a controller are called actions. Usually an action reads the incoming request-data, maybe validates it with a form, delegates it to a facade from the business layer and writes the response.</p>
        <p>The following controller provides two actions: <var>indexAction()</var> and <var>testAction()</var>.</p><pre><code class="language-PHP line-numbers">&lt;?php
namespace Namespace\Zed\Bundle\Communication\Controller;
 
use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
 
class IndexController extends AbstractController
{
    public function indexAction()
    {
        return $this-&gt;viewResponse([]);
    }
 
    public function testAction(Request $request)
    {
       return $this-&gt;viewResponse([]);
    }
}
</code></pre>
        <h2>Input Parameters</h2>
        <p>You can define an input parameter <var>$request</var> that is automatically injected. This is a <a href="http://api.symfony.com/2.3/Symfony/Component/HttpFoundation/Request.html" target="_blank">Symfony\Component\HttpFoundation\Request</a>, so you will find methods to fetch the get and post parameters and the session.</p><pre><code class="language-PHP line-numbers">&lt;?php
public function testAction(Request $request)
{
    $request-&gt;getSession(); // retrieve current session
    $request-&gt;query-&gt;get('a'); // retrieve get-parameter index?a=
    // ...
}
</code></pre>
        <h2>Response Methods</h2>
        <p>There are several ways to send responses in different use cases. These methods are called at the end of the action and their return value is returned by the action. e.g. return<var> $this-&gt;redirectResponse('/my-module')</var>.</p>
        <table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/PatternedRows.css');" class="TableStyle-PatternedRows" cellspacing="0">
            <col class="TableStyle-PatternedRows-Column-Regular" />
            <col class="TableStyle-PatternedRows-Column-Regular" />
            <thead>
                <tr class="TableStyle-PatternedRows-Head-Header1">
                    <th class="TableStyle-PatternedRows-HeadE-Regular-Header1">Response Method</th>
                    <th class="TableStyle-PatternedRows-HeadD-Regular-Header1">Purpose</th>
                </tr>
            </thead>
            <tbody>
                <tr class="TableStyle-PatternedRows-Body-LightRows">
                    <td class="TableStyle-PatternedRows-BodyE-Regular-LightRows">
                        <p>	viewResponse(array $data = [])</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyD-Regular-LightRows">
                        <p>Loads the related twig template and provides the data for the template.</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows-BodyE-Regular-DarkerRows">
                        <p>	jsonResponse($data = null, $status = 200, $headers = [])</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyD-Regular-DarkerRows">
                        <p>Sends a json response which is needed for ajax calls.</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-LightRows">
                    <td class="TableStyle-PatternedRows-BodyE-Regular-LightRows">
                        <p>redirectResponse($url, $status = 302, $headers = [])	</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyD-Regular-LightRows">
                        <p>Performs a redirect to the given relative path or absolute url.</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows-BodyB-Regular-DarkerRows">
                        <p>streamedResponse($callback = null, $status = 200, $headers = [])</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyA-Regular-DarkerRows">
                        <p>Sends binary data. This is used to draw the state machines.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p>&gt;<b>Example</b>:</p><pre><code class="language-PHP line-numbers">&lt;?php
public function testAction(Request $request)
{
    // ...
    return $this-&gt;viewResponse(['customer' =&gt; ['name' =&gt; 'John doe']]);
}
</code></pre>
        <p>Now the data can be accessed in the twig template like this: <var>{{customer.name}} </var>.</p>
        <hr />
        <h2>Controllers and Paths in Zed</h2>
        <p>Every <var>module-controller-action</var> triple is related to a URL of the application. Usually a URL has three segments which are related to module, controller and action. </p>
        <p>Examples of paths:</p>
        <table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/PatternedRows.css');" class="TableStyle-PatternedRows" cellspacing="0">
            <col class="TableStyle-PatternedRows-Column-Regular" />
            <col class="TableStyle-PatternedRows-Column-Regular" />
            <col class="TableStyle-PatternedRows-Column-Regular" />
            <col class="TableStyle-PatternedRows-Column-Regular" />
            <thead>
                <tr class="TableStyle-PatternedRows-Head-Header1">
                    <th class="TableStyle-PatternedRows-HeadE-Regular-Header1">Module</th>
                    <th class="TableStyle-PatternedRows-HeadE-Regular-Header1">Controller</th>
                    <th class="TableStyle-PatternedRows-HeadE-Regular-Header1">Action</th>
                    <th class="TableStyle-PatternedRows-HeadD-Regular-Header1">Url(s)</th>
                </tr>
            </thead>
            <tbody>
                <tr class="TableStyle-PatternedRows-Body-LightRows">
                    <td class="TableStyle-PatternedRows-BodyE-Regular-LightRows">
                        <p>MyModule</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyE-Regular-LightRows">
                        <p>IndexController</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyE-Regular-LightRows">
                        <p>indexAction()</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyD-Regular-LightRows">
                        <p>my-module/</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows-BodyE-Regular-DarkerRows">
                        <p>MyModule</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyE-Regular-DarkerRows">
                        <p>	IndexController	</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyE-Regular-DarkerRows">
                        <p>testAction()</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyD-Regular-DarkerRows">
                        <p>my-module/index/test</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-LightRows">
                    <td class="TableStyle-PatternedRows-BodyE-Regular-LightRows">
                        <p>MyModule</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyE-Regular-LightRows">
                        <p>AnyOtherController</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyE-Regular-LightRows">
                        <p>indexAction()</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyD-Regular-LightRows">
                        <p>my-module/any-other</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows-BodyE-Regular-DarkerRows">
                        <p>MyModule</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyE-Regular-DarkerRows">
                        <p>AnyOtherController</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyE-Regular-DarkerRows">
                        <p>testAction()</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyD-Regular-DarkerRows">
                        <p>my-module/any-other/test</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-LightRows">
                    <td class="TableStyle-PatternedRows-BodyB-Regular-LightRows">
                        <p>Cart</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyB-Regular-LightRows">
                        <p>GatewayController</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyB-Regular-LightRows">
                        <p>addItemAction()</p>
                    </td>
                    <td class="TableStyle-PatternedRows-BodyA-Regular-LightRows">
                        <p>cart/gateway/add-item</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p>As you can see there are some path-resolver rules:</p>
        <ul>
            <li class="bullet_list">The term <var>index</var> is automatically used, when the path is not fully specified.</li>
            <li class="bullet_list">CamelCase class and method names are presented with a dash-separator.</li>
            <li class="bullet_list">Suffixes like <var>Controller</var> and <var>Action</var> are removed.</li>
        </ul>
        <hr />
        <h2>Mapping Twig Templates</h2>
        <p>Each action returning <var>$this-&gt;viewResponse()</var> must have a dedicated Twig template:</p>
        <ul>
            <li class="bullet_list">Controller and action:
<br /><var>MyNamespace/Zed/MyModule/Communication/Controller/TestController::doSomethingAction()</var></li>
            <li class="bullet_list">Expected path of template:
<br /><var>MyNamespace/Zed/MyModule/Presentation/Test/do-something.twig</var></li>
        </ul>
        <h2>Related Spryks</h2>
        <p>You might use the following definitions to generate related code:</p>
        <ul>
            <li>Add Zed Communication Controller</li>
            <li>Add Zed Communication Controller Method</li>
        </ul>
        <p>See the <a href="https://documentation.spryker.com/capabilities/development/development_tools/spryk.htm">Spryk</a> documentation for details.</p>
    </body>
</html>