<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="" MadCap:conditions="Spryker.DemoShop,Spryker.B2C">
    <head><title>Amazon Pay - Obtaining an Amazon Order Reference and Information about Shipping Addresses</title>
    </head>
    <body>
        <h1>Amazon Pay - Order Reference and Information about Shipping Addresses <img src="../../../Resources/Images/shoptype/B2C_Shop.png" /> <img src="../../../Resources/Images/shoptype/Demoshop.png" /></h1>
        <p>After successful authorization, a buyer will be redirected to an order details page to enter all the information necessary for placing an order: address of shipment, payment method, delivery method and some calculations about taxes, possible discounts, delivery cost, etc.</p>
        <p>Amazon Pay provides solutions for choosing shipping addresses and payment methods based on what the buyer previously used on Amazon. As addresses differ by country, the delivery method selection must be implemented by the shop and aligned with shipping address information.</p>
        <p>Amazon provides two widgets for choosing shipment and payment information, they can be placed together on the same page or separately.</p>
        <ul>
            <li class="bullet_list">Add the following widget on your page:</li>
        </ul><pre><code class="language-xml">{{ render(path('amazonpay_checkout_widget')) }}</code></pre>
        <p>Configuration would be used from your current settings profile.</p>
        <p><b>Place order</b> button should look like this:</p><pre><code class="language-xml">&lt;a href="{{ path('amazonpay_confirm_purchase') }}" disabled="true" id="amazonpayPlaceOrderLink" class="button expanded __no-margin-bottom"&gt;Place order&lt;/a&gt;</code></pre>
        <p>Both widgets are similar to the <var>paybutton</var> widget that we described earlier.</p>
        <p>All necessary credentials have to be specified the same way and in order to retrieve the selected information, Amazon provides JavaScript callbacks.</p>
        <p>The first of them to use is <var>onOrderReferenceCreate</var>, which provides an Amazon order reference ID.</p>
        <p>This ID is a unique identifier of an order, created on Amazon's side and is required for Amazon Pay API calls.</p>
        <p>Other important callbacks are <var>onAddressSelect</var> and <var>onPaymentSelect</var>. These callbacks are triggered after selecting shipment address information and payment method respectively. Callbacks are client side notifications informing that an event has happened.</p>
        <p>Use the Amazon Pay API to retrieve data and run order operations.</p>
        <h3>Checkout Step Rendering</h3>
        <p>Since payment module is generic, <var>PaymentController</var> provides method <var>getItems</var> in order to extend display of items.</p>
        <p>For example, in order to handle bundled products, follow these steps: </p>
        <p>Create template on project level <var>AmazonPay/Theme/default/payment/patials/checkout-item.twig</var>:</p><pre><code class="language-twig line-numbers">{% if item.bundleProduct is defined %}
        {% include '@checkout/checkout/partials/summary-item.twig' with {'item': item.bundleProduct, 'bundleItems' : item.bundleItems} %}
 {% else %}
          {% include '@checkout/checkout/partials/summary-item.twig' %}
 {% endif %}</code></pre>
        <p>Extend <var>AmazonPay/Controller/PaymentController</var> and add the following method:</p><pre xml:space="preserve"><code class="language-php line-numbers">  /**
     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
     *
     * @return \ArrayObject|\Generated\Shared\Transfer\ItemTransfer[]
     */
    protected function getCartItems(QuoteTransfer $quoteTransfer)
    {
        return $this-&gt;getFactory()-&gt;createProductBundleGrouper()-&gt;getGroupedBundleItems(
            $quoteTransfer-&gt;getItems(),
            $quoteTransfer-&gt;getBundleItems()
        );
    }</code></pre>
        <p>Add corresponding method to <var>AmazonPayFactory</var>:</p><pre xml:space="preserve"><code class="language-php line-numbers">  /**
     * @return \Spryker\Yves\ProductBundle\Grouper\ProductBundleGrouperInterface
     */
    public function createProductBundleGrouper()
    {
        return new ProductBundleGrouper();
    }</code></pre>
        <p>&#160;</p>
        <p><b>See also:</b>
        </p>
        <ul>
            <li><a href="amazon-pay.htm">Get a general idea about Amazon Pay</a><![CDATA[
            ]]></li>
            <li><a href="amazon-pay-api.htm">Configure Amazon Pay API</a>
            </li>
            <li><a href="amazon-pay-configuration-demoshop.htm">Configure Amazon Pay</a><![CDATA[
            ]]></li>
            <li><a href="#">Obtaining Amazon Order Reference and Shipping Addresses details</a>
            </li>
            <li><a href="amazon-pay-refund.htm">Learn how Amazon Pay Refund works</a>
            </li>
            <li><a href="amazon-pay-rendering-pay.htm">Rendering the "Pay with Amazon" button on the Cart page</a>
            </li>
            <li><a href="amazon-pay-simulations.htm">Learn how Amazon Pay Sandbox Simulations work
            
</a>
            </li>
            <li><a href="amazon-pay-state-machine.htm">Learn about Amazon Pay state machine for synchronous and asynchronous flows
            
</a>
            </li>
            <li><a href="amazon-pay-state-machine.htm#OMS">Learn about OMS commands
            
</a>
            </li>
            <li><a href="amazon-pay-email-notification.htm">Check out Amazon Pay example email notifications
            </a>
            </li>
            <li><a href="amazon-pay-support-bundled-products.htm">Check
				support of bundled products with Amazon</a>
            </li>
        </ul>
        <p>&#160;</p>
        <p><i>Last review date: Oct 17th, 2018 </i>
            <MadCap:conditionalText MadCap:conditions="General.Hidden Comment">by Andrey Tkachenko</MadCap:conditionalText>
        </p>
    </body>
</html>