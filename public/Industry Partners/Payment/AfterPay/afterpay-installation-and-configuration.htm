<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title>Afterpay Installation and Configuration | Spryker</title>
        <meta name="description" content="This article describes the process of installing and configuring of AfterPay — a payment partner of Spryker." />
    </head>
    <body>
        <h1>Afterpay Installation and Configuration</h1>
        <p>The following guide describes how to install and configure AfterPay in your project.</p>
        <h2>Installation</h2>
        <p>To install AfterPay, run the command in the console:</p><pre><code class="language-PHP line-numbers">composer require spryker-eco/after-pay</code></pre>
        <h2>Configuration</h2>
        <p>To set up the AfterPay initial configuration, use the credentials you received from your AfterPay account.</p>
        <p>The <var>API_ENDPOINT_BASE_URL</var> parameter should be a link: you should get it from AfterPay. For test integration, you can use <a href="https://sandbox.afterpay.io/api/v3/version">https://sandbox.afterpay.io/api/v3/version</a></p>
        <p>You should also get <var>API_CREDENTIALS_AUTH_KEY</var> and <var>PAYMENT_INVOICE_CHANNEL_ID</var> from your AfterPay account.</p>
        <p>You can use different Checkout Services; to select one, set up <var>$config[AfterPayConstants::AFTERPAY_AUTHORIZE_WORKFLOW]</var>:</p>
        <ul>
            <li>One-Step Authorization → <var>AFTERPAY_AUTHORIZE_WORKFLOW_ONE_STEP</var></li>
            <li>Two-Step Authorization → <var>AFTERPAY_AUTHORIZE_WORKFLOW_TWO_STEPS</var></li>
        </ul>
        <p>If you want to use Two-Step Authorization, in the Pyz layer, create the <var>Pyz\Yves\CheckoutPage\Process\Steps\PaymentStep.php</var> class and extend <var>SprykerShop\Yves\CheckoutPage\Process\Steps\PaymentStep.php</var> if <var>Pyz\Yves\CheckoutPage\Process\Steps\PaymentStep.php</var> does not exist. After that, you use <var>AfterPayClient</var>, call <var>getAvailablePaymentMethods()</var>, and handle the request for your specific logic.</p>
        <p>&#160;</p>
        <p>Add the new code to <var>config/Shared/config_default.php</var>:</p><pre><code class="language-PHP line-numbers">...
use SprykerEco\Shared\AfterPay\AfterPayConfig;
use SprykerEco\Shared\AfterPay\AfterPayConstants;
...
 
...
// ---------- AfterPay
$config[AfterPayConstants::API_ENDPOINT_BASE_URL] = 'https://sandboxapi.horizonafs.com/eCommerceServicesWebApi/api/v3/';
$config[AfterPayConstants::API_CREDENTIALS_AUTH_KEY] = 'your api key';
$config[AfterPayConstants::PAYMENT_INVOICE_CHANNEL_ID] = 'your invoice channel id';
$config[AfterPayConstants::AFTERPAY_YVES_AUTHORIZE_PAYMENT_FAILED_URL] = 'http://www.de.afterpay.local/en/checkout/payment';
$config[AfterPayConstants::AFTERPAY_AUTHORIZE_WORKFLOW] = AfterPayConfig::AFTERPAY_AUTHORIZE_WORKFLOW_ONE_STEP;
$config[AfterPayConstants::AFTERPAY_RISK_CHECK_CONFIGURATION] = [
    AfterPayConfig::PAYMENT_METHOD_INVOICE =&gt; AfterPayConfig::RISK_CHECK_METHOD_INVOICE,
];
...</code></pre>
        <p>Replace this line in <var>config/Shared/config_default.php</var>:</p><pre><code class="language-PHP line-numbers">$ENVIRONMENT_PREFIX = '';</code></pre>
        <p>with this:</p><pre><code class="language-PHP line-numbers">$ENVIRONMENT_PREFIX = 'AfterPay-local';</code></pre>
        <p>Add a new item to the config array <var>$config[OmsConstants::PROCESS_LOCATION]</var> in <var>config/Shared/config_default.php</var>:</p><pre><code class="language-PHP line-numbers">$config[OmsConstants::PROCESS_LOCATION] = [
    OmsConfig::DEFAULT_PROCESS_LOCATION,
    $config[KernelConstants::SPRYKER_ROOT] . '/DummyPayment/config/Zed/Oms',
    APPLICATION_ROOT_DIR . '/vendor/spryker-eco/after-pay/config/Zed/Oms',
];</code></pre>
        <p>Add a new item to the config array <var>$config[OmsConstants::ACTIVE_PROCESSES]</var> in <var>config/Shared/config_default.php</var>:</p><pre><code class="language-PHP line-numbers">$config[OmsConstants::ACTIVE_PROCESSES] = [
    'DummyPayment01',
    'AfterPayInvoice01',
];</code></pre>
        <p>Add a new item to the config array <var>$config[SalesConstants::PAYMENT_METHOD_STATEMACHINE_MAPPING]</var> in <var>config/Shared/config_default.php</var>:</p><pre><code class="language-PHP line-numbers">$config[SalesConstants::PAYMENT_METHOD_STATEMACHINE_MAPPING] = [
    DummyPaymentConfig::PAYMENT_METHOD_INVOICE =&gt; 'DummyPayment01',
    DummyPaymentConfig::PAYMENT_METHOD_CREDIT_CARD =&gt; 'DummyPayment01',
    AfterPayConfig::PAYMENT_METHOD_INVOICE =&gt; 'AfterPayInvoice01',
];</code></pre>
        <p>Add these lines to <var>data/import/glossary.csv</var>:</p><pre><code class="language-PHP line-numbers">checkout.payment.provider.afterPay,AfterPay,en_US
checkout.payment.provider.afterPay,AfterPay,de_DE</code></pre>
        <h2>Installation</h2>
        <p>In <var>src/Pyz/Zed/Checkout/CheckoutDependencyProvider.php</var>, add a new plugin to <var>getCheckoutOrderSavers()</var>:</p><pre><code class="language-PHP line-numbers">...
use SprykerEco\Zed\AfterPay\Communication\Plugin\Checkout\AfterPaySaveOrderPlugin;
...
 
/**
     * @param \Spryker\Zed\Kernel\Container $container
     *
     * @return \Spryker\Zed\Checkout\Dependency\Plugin\CheckoutSaveOrderInterface[]
     */
    protected function getCheckoutOrderSavers(Container $container)
    {
        /** @var \Spryker\Zed\Checkout\Dependency\Plugin\CheckoutSaveOrderInterface[] $plugins */
        $plugins = [
            ...
            new AfterPaySaveOrderPlugin(),
        ];</code></pre>
        <p>In <var>src/Pyz/Zed/Oms/OmsDependencyProvider.php</var>, add:</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">...
use Spryker\Zed\Oms\Communication\Plugin\Oms\Command\CommandCollection;
use Spryker\Zed\Oms\Communication\Plugin\Oms\Condition\ConditionCollection;
use SprykerEco\Zed\AfterPay\Communication\Plugin\Oms\Command\AuthorizePlugin;
use SprykerEco\Zed\AfterPay\Communication\Plugin\Oms\Command\CancelPlugin;
use SprykerEco\Zed\AfterPay\Communication\Plugin\Oms\Command\CapturePlugin;
use SprykerEco\Zed\AfterPay\Communication\Plugin\Oms\Command\RefundPlugin;
use SprykerEco\Zed\AfterPay\Communication\Plugin\Oms\Condition\IsAuthorizationCompletedPlugin;
use SprykerEco\Zed\AfterPay\Communication\Plugin\Oms\Condition\IsCancellationCompletedPlugin;
use SprykerEco\Zed\AfterPay\Communication\Plugin\Oms\Condition\IsCaptureCompletedPlugin;
use SprykerEco\Zed\AfterPay\Communication\Plugin\Oms\Condition\IsRefundCompletedPlugin;
...
 
...
    /**
     * @param \Spryker\Zed\Kernel\Container $container
     *
     * @return \Spryker\Zed\Kernel\Container
     */
    protected function addCommandPlugins(Container $container): Container
    {
        $container[self::COMMAND_PLUGINS] = function () {
            $commandCollection = new CommandCollection();
            $commandCollection-&gt;add(new SendOrderConfirmationPlugin(), 'Oms/SendOrderConfirmation');
            $commandCollection-&gt;add(new SendOrderShippedPlugin(), 'Oms/SendOrderShipped');
            $commandCollection-&gt;add(new AuthorizePlugin(), 'AfterPay/Authorize');
            $commandCollection-&gt;add(new CancelPlugin(), 'AfterPay/Cancel');
            $commandCollection-&gt;add(new CapturePlugin(), 'AfterPay/Capture');
            $commandCollection-&gt;add(new RefundPlugin(), 'AfterPay/Refund');
            return $commandCollection;
        };
        return $container;
    }
    /**
     * @param \Spryker\Zed\Kernel\Container $container
     *
     * @return \Spryker\Zed\Kernel\Container
     */
    protected function addConditionPlugins(Container $container): Container
    {
        $container[self::CONDITION_PLUGINS] = function () {
            $conditionCollection = new ConditionCollection();
            $conditionCollection-&gt;add(new IsAuthorizationCompletedPlugin(), 'AfterPay/IsAuthorizationCompleted');
            $conditionCollection-&gt;add(new IsCancellationCompletedPlugin(), 'AfterPay/IsCancellationCompleted');
            $conditionCollection-&gt;add(new IsCaptureCompletedPlugin(), 'AfterPay/IsCaptureCompleted');
            $conditionCollection-&gt;add(new IsRefundCompletedPlugin(), 'AfterPay/IsRefundCompleted');
            return $conditionCollection;
        };
        return $container;
    }</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p>In the <var>src/Pyz/Zed/Oms/OmsDependencyProvider.php</var> in <var>provideBusinessLayerDependencies()</var> method replace</p><pre><code class="language-PHP line-numbers">$container-&gt;extend(self::COMMAND_PLUGINS, function (CommandCollectionInterface $commandCollection) {
    $commandCollection-&gt;add(new SendOrderConfirmationPlugin(), 'Oms/SendOrderConfirmation');
    $commandCollection-&gt;add(new SendOrderShippedPlugin(), 'Oms/SendOrderShipped');
    return $commandCollection;
});</code></pre>
        <p>with:</p><pre><code class="language-PHP line-numbers">
$container-&gt;extend(self::COMMAND_PLUGINS, function (CommandCollectionInterface $commandCollection) {
    $commandCollection-&gt;add(new SendOrderConfirmationPlugin(), 'Oms/SendOrderConfirmation');
    $commandCollection-&gt;add(new SendOrderShippedPlugin(), 'Oms/SendOrderShipped');
    $commandCollection-&gt;add(new AuthorizePlugin(), 'AfterPay/Authorize');
    $commandCollection-&gt;add(new CancelPlugin(), 'AfterPay/Cancel');
    $commandCollection-&gt;add(new CapturePlugin(), 'AfterPay/Capture');
    $commandCollection-&gt;add(new RefundPlugin(), 'AfterPay/Refund');
    return $commandCollection;
});
 
$container-&gt;extend(self::CONDITION_PLUGINS, function (ConditionCollectionInterface $conditionCollection) {
    $conditionCollection-&gt;add(new IsAuthorizationCompletedPlugin(), 'AfterPay/IsAuthorizationCompleted');
    $conditionCollection-&gt;add(new IsCancellationCompletedPlugin(), 'AfterPay/IsCancellationCompleted');
    $conditionCollection-&gt;add(new IsCaptureCompletedPlugin(), 'AfterPay/IsCaptureCompleted');
    $conditionCollection-&gt;add(new IsRefundCompletedPlugin(), 'AfterPay/IsRefundCompleted');
    return $conditionCollection;
});</code></pre>
        <p style="font-style: italic;">&#160;</p>
        <p style="font-style: italic;">Last review date: Feb 7, 2019 <MadCap:conditionalText MadCap:conditions="General.Hidden Comment">by Ruslan Ivanov and Dmitry Beirak</MadCap:conditionalText></p>
    </body>
</html>