<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" style="" MadCap:conditions="Spryker.DemoShop,Spryker.B2C,Spryker.B2B">
    <head>
        <link href="../../../Resources/TableStyles/PatternedRows2.css" rel="stylesheet" MadCap:stylesheetType="table" /><title>Billpay - Invoice Payment in Preauthorize Mode</title>
    </head>
    <body>
        <h1>Billpay - Invoice Payment in Preauthorize Mode <img src="../../../Resources/Images/shoptype/B2B_Shop.png" /> <img src="../../../Resources/Images/shoptype/B2C_Shop.png" /> <img src="../../../Resources/Images/shoptype/Demoshop.png" /></h1>
        <p class="note">Refer to <a href="https://www.billpay.de/en/business-clients/payment-information/">Billpay payment information</a> for information about payment methods.</p>
        <p>The identity and credit check are checked within a single "pre-authorize" call after summary page was submitted.
           This may lead to the “rejection” of the order.</p>
        <p>To switch to the authorize mode, <b>switch Billpay configuration variables</b> to "pre-authorize" set of configuration variables:</p><pre><code class="language-php line-numbers">&lt;?php
b/config/Shared/config_default.php
@@ -364,19 +364,19 @@ $config[TaxConstants::DEFAULT_TAX_RATE] = 19;

...

+//$config[BillpayConstants::BILLPAY_PORTAL_ID] = '[your prescore id e.g. 8111]';//prescore
+//$config[BillpayConstants::BILLPAY_SECURITY_KEY] = '[your prescore security key]';//prescore

+$config[BillpayConstants::BILLPAY_PORTAL_ID] = '[your pre-authorize id e.g. 8112]';//pre-authorize
+$config[BillpayConstants::BILLPAY_SECURITY_KEY] = '[your pre-authorize security key]';//pre-authorize
....
-$config[BillpayConstants::USE_PRESCORE] = 1;
+$config[BillpayConstants::USE_PRESCORE] = 0;</code></pre>
        <h2>Billpay Invoice Payment with Prescoring</h2>
        <p>Using the “prescore” scoring model, the identity and credit check is performed before the payment method is selected. The results of the check are then used to display or hide the available payment methods accordingly. This eliminates the negative purchasing experience of a “rejection”.</p>
        <h3>Configuration </h3>
        <p>To switch to the authorize mode, <b>switch Billpay configuration variables</b> to "pre-score" set of the configuration variables:</p><pre><code class="language-php line-numbers">&lt;?php
b/config/Shared/config_default.php
@@ -364,19 +364,19 @@ $config[TaxConstants::DEFAULT_TAX_RATE] = 19;

...

+$config[BillpayConstants::BILLPAY_PORTAL_ID] = '[your prescore id e.g. 8111]';//prescore
+$config[BillpayConstants::BILLPAY_SECURITY_KEY] = '[your prescore security key]';//prescore

+//$config[BillpayConstants::BILLPAY_PORTAL_ID] = '[your pre-authorize id e.g. 8112]';//pre-authorize
+//$config[BillpayConstants::BILLPAY_SECURITY_KEY] = '[your pre-authorize security key]';//pre-authorize
....
+$config[BillpayConstants::USE_PRESCORE] = 1;
-$config[BillpayConstants::USE_PRESCORE] = 0;</code></pre>
        <h3>Yves </h3>
        <h4>Customer Setup</h4>
        <p>In Yves  <var>CustomerStep</var> needs to be extended by calling the <var>BillpayCustomerHandlerPlugin</var>:</p><pre><code class="language-php line-numbers">&lt;?php
/**
     * Update QuoteTransfer with customer step handler plugin.
     *
     * @param \Symfony\Component\HttpFoundation\Request $request
     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
     *
     * @return \Generated\Shared\Transfer\QuoteTransfer
     */
    public function execute(Request $request, AbstractTransfer $quoteTransfer)
    {
        $this-&gt;customerStepHandler-&gt;get(CheckoutDependencyProvider::CUSTOMER_STEP_HANDLER)-&gt;addToDataClass($request, $quoteTransfer);
        $this-&gt;customerStepHandler-&gt;get(BillpayConstants::PAYMENT_METHOD_INVOICE)-&gt;addToDataClass($request, $quoteTransfer);

        return $quoteTransfer;
    }</code></pre>
        <p>Next, extend the <var>CheckoutDependencyProvider</var> to return the <code>StepHandlerPluginCollection</code>:</p><pre><code class="language-php line-numbers">&lt;?php
  /**
     * @param \Spryker\Yves\Kernel\Container $container
     *
     * @return \Spryker\Yves\Kernel\Container
     */
    protected function providePlugins(Container $container)
    {
        parent::providePlugins($container);

        $container[self::PLUGIN_CUSTOMER_STEP_HANDLER] = function () {
            $plugins = new StepHandlerPluginCollection();
            $plugins-&gt;add(new BillpayCustomerHandlerPlugin(), BillpayConstants::PAYMENT_METHOD_INVOICE);
            $plugins-&gt;add(new CustomerStepHandler(), self::CUSTOMER_STEP_HANDLER);
            return $plugins;
        };</code></pre>
        <p>Lastly, change the <var>CustomerStep</var> constructor:</p><pre><code class="language-php line-numbers">&lt;?php
 /**
     * @param \Pyz\Client\Customer\CustomerClientInterface $customerClient
     * @param \Spryker\Yves\StepEngine\Dependency\Plugin\Handler\StepHandlerPluginCollection $customerStepHandler
     * @param string $stepRoute
     * @param string $escapeRoute
     */
    public function __construct(
        CustomerClientInterface $customerClient,
        StepHandlerPluginCollection $customerStepHandler,
        $stepRoute,
        $escapeRoute
    ) {
        parent::__construct($stepRoute, $escapeRoute);

        $this-&gt;customerClient = $customerClient;
        $this-&gt;customerStepHandler = $customerStepHandler;
    }</code></pre>
        <h4>Shipment Step</h4>
        <p>One of the places we can call prescore is the shipment step. </p>
        <p>At this point, the checkout process can provide us with all the information we need to do prescoring. </p>
        <p>To do prescoring, add the Billpay client to Shippment step by modifying the StepFactory:</p><pre><code class="language-php line-numbers">&lt;?php
 /**
     * @return \Pyz\Yves\Checkout\Process\Steps\ShipmentStep
     */
    protected function createShipmentStep()
    {
        return new ShipmentStep(
            $this-&gt;getCalculationClient(),
            $this-&gt;getProvidedDependency(CheckoutDependencyProvider::CLIENT_BILLPAY),
            $this-&gt;createShipmentPlugins(),
            CheckoutControllerProvider::CHECKOUT_SHIPMENT,
            ApplicationControllerProvider::ROUTE_HOME
        );
    }</code></pre>
        <p>Then register the client in <var>CheckoutDependencyProvider</var>.</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Click here to expand the code sample</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-php line-numbers">&lt;?php

/src/Pyz/Yves/Checkout/CheckoutDependencyProvider.php

+use Spryker\Yves\StepEngine\Dependency\Plugin\Form\SubFormPluginCollection;
+use SprykerEco\Shared\Billpay\BillpaySharedConfig;

+use SprykerEco\Yves\Billpay\Plugin\BillpayInvoiceSubFormPlugin;
+use SprykerEco\Yves\Billpay\Plugin\BillpayPaymentHandlerPlugin;

 class CheckoutDependencyProvider extends SprykerCheckoutDependencyProvider
 {
@@ -33,9 +37,8 @@ class CheckoutDependencyProvider extends SprykerCheckoutDependencyProvider
     const PLUGIN_SHIPMENT_HANDLER = 'PLUGIN_SHIPMENT_HANDLER';
     const PLUGIN_SHIPMENT_FORM_DATA_PROVIDER = 'PLUGIN_SHIPMENT_FORM_DATA_PROVIDER';

-    const PAYMENT_METHOD_HANDLER = 'PAYMENT_METHOD_HANDLER';
     const CUSTOMER_STEP_HANDLER = 'CUSTOMER STEP HANDLER';
-    const PAYMENT_SUB_FORMS = 'PAYMENT_SUB_FORMS';
+
     const CLIENT_BILLPAY = 'CLIENT_BILLPAY';

    /**
     * @param \Spryker\Yves\Kernel\Container $container
     *
     * @return \Spryker\Yves\Kernel\Container
     */
    protected function providePlugins(Container $container)
         $container = parent::providePlugins($container);


        $container[self::PAYMENT_SUB_FORMS] = function () {
            $paymentSubForms = new SubFormPluginCollection();
            $paymentSubForms-&gt;add(new BillpayInvoiceSubFormPlugin());
            return $paymentSubForms;
        };

        $container[self::PAYMENT_METHOD_HANDLER] = function () {
            $paymentMethodHandler =  new StepHandlerPluginCollection();
            $paymentMethodHandler-&gt;add(
                new BillpayPaymentHandlerPlugin(),
                BillpaySharedConfig::PAYMENT_METHOD_INVOICE
            );
            return $paymentMethodHandler;
        };

     ...

 /**
      * @param \Spryker\Yves\Kernel\Container $container
      *
      * @return \Spryker\Yves\Kernel\Container
      */
     protected function provideClients(Container $container)
     {

         // other clients ...     
              
         $container[self::CLIENT_BILLPAY] = function (Container $container) {
             return $container-&gt;getLocator()-&gt;billpay()-&gt;client();
         };
 
         return $container;
     }</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p>Now all we need to do is modify the Shippment step constructor:</p><pre><code class="language-php line-numbers">&lt;?php
/**
     * @param \Spryker\Client\Calculation\CalculationClientInterface $calculationClient
     * @param \Spryker\Client\Billpay\BillpayClientInterface $billpayClient
     * @param \Spryker\Yves\StepEngine\Dependency\Plugin\Handler\StepHandlerPluginCollection $shipmentPlugins
     * @param string $stepRoute
     * @param string $escapeRoute
     */
    public function __construct(
        CalculationClientInterface $calculationClient,
        BillpayClientInterface $billpayClient,
        StepHandlerPluginCollection $shipmentPlugins,
        $stepRoute,
        $escapeRoute
    ) {
        parent::__construct($stepRoute, $escapeRoute);

        $this-&gt;calculationClient = $calculationClient;
        $this-&gt;shipmentPlugins = $shipmentPlugins;
        $this-&gt;billpayClient = $billpayClient;
    }
 </code></pre>
        <p>and add a client call to the execute method:</p><pre><code class="language-php line-numbers"> &lt;?php
 /**
      * @param \Symfony\Component\HttpFoundation\Request $request
      * @param \Generated\Shared\Transfer\QuoteTransfer|\Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
      *
      * @return \Generated\Shared\Transfer\QuoteTransfer
      */
     public function execute(Request $request, AbstractTransfer $quoteTransfer)
     {
         $shipmentHandler = $this-&gt;shipmentPlugins-&gt;get(CheckoutDependencyProvider::PLUGIN_SHIPMENT_STEP_HANDLER);
         $shipmentHandler-&gt;addToDataClass($request, $quoteTransfer);
 
         $quoteTransfer = $this-&gt;calculationClient-&gt;recalculate($quoteTransfer);
 
         //added prescoring step
         if (Config::get(BillpayConstants::USE_PRESCORE)) {
            $this-&gt;billpayClient-&gt;prescorePayment($quoteTransfer);
         }
 
         return $quoteTransfer;
     }</code></pre>
        <h3>Twig Extension (Optional)</h3>
        <p>To populate the <a href="https://techdocs.billpay.de/en/For_developers/JavaScript-Widget.htm" target="_blank">Billpay JS widget</a>  with data, use the Twig extension provided in the Billpay module.</p>
        <p>To register the Twig extension:</p>
        <ul>
            <li class="bullet_list">Add it to YvesBootstrap as follows: </li>
        </ul><pre><code class="language-php line-numbers">    protected function registerServiceProviders()
    {
        // other service providers ...
        $this-&gt;application-&gt;register(new TwigBillpayServiceProvider());
    }</code></pre>
        <p><strong>List of all available identifiers</strong>:</p>
        <table class="TableStyle-PatternedRows2" style="margin-left: 0;margin-right: auto;mc-table-style: url('../../../Resources/TableStyles/PatternedRows2.css');" cellspacing="0">
            <col class="TableStyle-PatternedRows2-Column-Regular" />
            <col class="TableStyle-PatternedRows2-Column-Regular" />
            <col class="TableStyle-PatternedRows2-Column-Regular" />
            <thead>
                <tr class="TableStyle-PatternedRows2-Head-Header1">
                    <th class="TableStyle-PatternedRows2-HeadE-Regular-Header1">Name	</th>
                    <th class="TableStyle-PatternedRows2-HeadE-Regular-Header1">Description	</th>
                    <th class="TableStyle-PatternedRows2-HeadD-Regular-Header1">Notes</th>
                </tr>
            </thead>
            <tbody>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">
                        <p>salutation	</p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">
                        <p>Customer salutation</p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-LightRows">
                        <p>Taken from billing address</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows">
                        <p><var>firstName</var>
                        </p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows">
                        <p>Customer first name</p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-DarkerRows">
                        <p>Taken from billing address</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">
                        <p><var>lastName</var>
                        </p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">
                        <p>Customer last name</p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-LightRows">
                        <p>	Taken from billing address</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows">
                        <p>address	</p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows">
                        <p>Customer billing address street name</p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-DarkerRows">
                        <p>	i.e. Main Street</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">
                        <p><var>addressNo</var>
                        </p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">
                        <p>Customer billing address street name extension</p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-LightRows">
                        <p>	i.e. 3a</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows">
                        <p>zip	</p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows">
                        <p>Billing address postal number</p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-DarkerRows">
                        <p>	i.e. 10317</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">
                        <p>city	</p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">
                        <p>Billing address city</p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-LightRows">
                        <p>	i.e. Berlin</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows">
                        <p>phone	</p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows">
                        <p>Customer telephone number</p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-DarkerRows">
                        <p>&#160;</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">
                        <p><var>dateOfBirth</var>
                        </p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">
                        <p>Customer date of birth	</p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-LightRows">
                        <p>Entered at payment step</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows">
                        <p><var>cartAmount</var>
                        </p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows">
                        <p>Total value of cart items with discounts</p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-DarkerRows">
                        <p>	Equal to cart amount</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">
                        <p><var>orderAmount</var>
                        </p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">
                        <p>Total value of order</p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-LightRows">
                        <p>&#160;</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows">
                        <p>currency	</p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows">
                        <p>currrency iso code	</p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-DarkerRows">
                        <p>Defined in store configuration</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">
                        <p>language	</p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">
                        <p>Current user language</p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-LightRows">
                        <p>&#160;</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows">
                        <p><var>countryIso3Code</var>
                        </p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows">
                        <p>Country iso3 code i.e deu	</p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-DarkerRows">
                        <p>Defined in store configuration</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">
                        <p><var>countryIso2Code</var>
                        </p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-LightRows">
                        <p>Country iso2 code i.e de	</p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-LightRows">
                        <p>Defined in store configuration</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-DarkerRows">
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows">
                        <p>identifier	</p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyE-Regular-DarkerRows">
                        <p>Unique session identifier	</p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyD-Regular-DarkerRows">
                        <p>Autogenerated</p>
                    </td>
                </tr>
                <tr class="TableStyle-PatternedRows2-Body-LightRows">
                    <td class="TableStyle-PatternedRows2-BodyB-Regular-LightRows">
                        <p>apiKey	</p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyB-Regular-LightRows">
                        <p>Billpay api key	</p>
                    </td>
                    <td class="TableStyle-PatternedRows2-BodyA-Regular-LightRows">
                        <p>Defined in config under key BILLPAY_PUBLIC_API_KEY</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h3>Checking Your Setup</h3>
        <p>You should be able to see the Billpay invoice on payment step of your checkout step. If you receive the "method not available" message when you select <strong>Billpay invoice</strong> at the payment step, check the <var>spy_payment_billpay_api_log</var> table in your database for logs.</p>
        <h2>Zed</h2>
        <p>In Zed  <var>BillpaySaveOrderPlugin</var> has to be registered in the <var>CheckoutDependencyProvider</var>:</p><pre><code class="language-php line-numbers"> &lt;?php
 /**
     * @param \Spryker\Zed\Kernel\Container $container
     *
     * @return \Spryker\Zed\Checkout\Dependency\Plugin\CheckoutSaveOrderInterface[]
     */
    protected function getCheckoutOrderSavers(Container $container)
    {
        return [
            // other plugins ...
            
            new BillpaySaveOrderPlugin(),
        ];
    }</code></pre>
        <p>Then the following should be added in <var>OmsDependencyProvider</var>:</p><pre><code class="language-php line-numbers"> &lt;?php
/**
     * @param \Spryker\Zed\Kernel\Container $container
     *
     * @return \Spryker\Zed\Oms\Communication\Plugin\Oms\Condition\ConditionCollection
     */
    protected function getConditionPlugins(Container $container)
    {
        $collection = parent::getConditionPlugins($container);

        $collection-&gt;add(new IsInvoicePaidConditionPlugin(), 'Billpay/IsInvoicePaid');
        $collection-&gt;add(new IsPreauthorizedConditionPlugin(), 'Billpay/IsPreauthorized');
        $collection-&gt;add(new IsCancelledConditionPlugin(), 'Billpay/IsCancelled');
        $collection-&gt;add(new IsItemCancelledConditionPlugin(), 'Billpay/IsItemCancelled');

        return $collection;
    }

    /**
     * @param \Spryker\Zed\Kernel\Container $container
     *
     * @return \Spryker\Zed\Oms\Communication\Plugin\Oms\Command\CommandCollection
     */
    protected function getCommandPlugins(Container $container)
    {
        $collection = parent::getCommandPlugins($container);

        $collection-&gt;add(new PreauthorizeCommandPlugin(), 'Billpay/Preauthorize');
        $collection-&gt;add(new InvoiceCreatedCommandPlugin(), 'Billpay/InvoiceCreated');
        $collection-&gt;add(new CancelOrderCommandPlugin(), 'Billpay/CancelOrder');
        $collection-&gt;add(new CancelItemCommandPlugin(), 'Billpay/CancelItem');

        return $collection;
    }
 </code></pre>
        <h3>Check Your Settings</h3>
        <p MadCap:conditions="Spryker.DemoShop">In your checkout process you can now see the Billapay as a payment method in the payment checkout step. If you log in to ZED, you will find the OMS state machine registered under <a href="http://zed.de.demoshop.local/oms/index/draw?process=BillpayInvoice01&amp;format=svg&amp;font=14&amp;state=" target="_blank">http://zed.de.demoshop.local/oms/index/draw?process=BillpayInvoice01&amp;format=svg&amp;font=14&amp;state=</a>. </p>
        <p>If the link does not work, just click <strong>Maintenance-&gt;OMS</strong> to list all registered OMS state machines.</p>
        <p>Basic state machine will look somewhat like this and you can use it as sample in your project. </p>
        <p>
            <img src="../../../Resources/Images/basic_OMS_state_machine.png" title="Click Me" alt="State Machine" class="Thumbnail" />
        </p>
        <p>&#160;</p>
        <p><b>See also:</b>
        </p>
        <ul>
            <li><a href="billpay-integration.htm">Integrate Billpay Payment</a>
            </li>
        </ul>
        <p>&#160;</p>
        <p><i>Last
review date:  Dec. 21st, 2017</i>
            <MadCap:conditionalText MadCap:conditions="General.Hidden Comment"><i> by Mykyta Borysevych</i>
            </MadCap:conditionalText>
        </p>
    </body>
</html>