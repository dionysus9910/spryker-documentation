<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:conditions="Spryker.DemoShop,Spryker.B2C">
    <head><title>Heidelpay Partner Integration - Credit Card Secure | Spryker</title>
        <meta name="description" content="Integrate Credit Card Secure payment through Heidelpay into Spryker Legacy Demoshop." />
    </head>
    <body>
        <h1>Heidelpay - Credit Card Secure <img src="../../../../Resources/Images/shoptype/B2C_Shop.png" /> <img src="../../../../Resources/Images/shoptype/Demoshop.png" /></h1>
        <h3>Setup</h3>
        <p>The following configuration should be made after Heidelpay has been <a href="heidelpay-installation.htm">installed</a> and <a href="heidelpay-integration.htm">integrated</a>.</p>
        <h4>Configuration</h4>
        <p>Example (for testing only):</p><pre><code class="language-php">$config[HeidelpayConstants::CONFIG_HEIDELPAY_TRANSACTION_CHANNEL_IDEAL] = '31HA07BC8142C5A171744B56E61281E5';
+$config[HeidelpayConstants::CONFIG_YVES_CHECKOUT_ASYNC_RESPONSE_URL] = $YVES_HOST_PROTOCOL . '://' . $config[ApplicationConstants::HOST_YVES] . '/heidelpay/cc-register-response';</code></pre>
        <p><sub>This value should be taken from HEIDELPAY</sub>
        </p>
        <h4><a name="Registration_Concept"></a>Registration Concept</h4>
        <p>Payment flow with credit card is divided into two workflows - based on the existing "Registration"
    and without/with the new "Registration".&#160;<strong>"Registration"</strong><span>&#160;means that customer's&#160;</span><strong>anonymized</strong><span>&#160;credit card data will be persisted in the database in order to use it again next time, if customer&#160;</span><strong>uses
        the same shipping address</strong><span>. The idea is visually represented in the image below</span></p>
        <p><span><img src="../../../../Resources/Images/Heidelpay/9241664.png" /><br /></span>
        </p>
        <h4>Checkout Payment Step Display</h4>
        <p>With the credit card, two payment options are possible - using the already existing
    registration (if available) or creating a new registration (always available) with the payment frame.
    <var>CreditCardSecureDataProvider</var> in Yves is responsible for that (<var>getOptions()</var> method). It makes
    a request into Zed in order to get available payment options, available for the current quote.&#160;</p>
        <ul>
            <li>
                <p>Payment option - "new registration". The new credit card registration is
        done inside of the iframe* on the payment step. To be able to display the iframe, Zed makes a
        "registration" request for the current quote each time customer accesses the payment
        step. Iframe URL is generated by Heidelpay for one-time usage. Iframe will contain the standard
        form for entering credit card data.&#160;<br /><br /></p>
                <p class="important">Please note that iframe doesn't have a
                submit button, it will be submitted with javascript when customer submits the payment
                step.</p>
            </li>
            <li>Payment option - "last successful registration". Zed will try to find an
        existing registration for current customer, based on the used shipping address ID (so it's
        available only for the registered customer). If one is found, then it will be added as a payment
        option. It contains anonymized credit card data and should be displayed as in the image in the <a href="#Registration_Concept">Registration Concept</a> section. Each registration has it's "registration number" hash, which is then used to
        authorize money on the customer's credit card.
    </li>
        </ul>
        <p><sub>* for security reasons, merchant is not allowed (or has to obtain a
    special permit) to process/store credit card data directly on it's website.&#160;</sub>
        </p>
        <p>Each payment option has its own template. You can find and customize it under
    <var>Yves/Theme/default/credit-card/</var>.</p>
        <h4>Payment Step Submitting</h4>
        <ul>
            <li>When customer chooses a new registration (fills in the payment form in the iframe)
        and clicks "Go To Summary" button, data inside the payment iframe will be
        serialised and sent as a POST request to Heidelpay payment system*. Heidelpay then processes the
        request and sends asynchronous POST request to the shop's
        <var>CONFIG_YVES_CHECKOUT_ASYNC_RESPONSE_URL</var> in Yves (<var>CreditCardController::registrationRequestAction</var>).
        This request will contain an anonymized customer credit card data and registration number (hash).
        This data will be persisted in Zed for future customer recognition and for the next step. In
        response, Heidelpay expects to get a plain URL where to redirect customer. In case of failure it
        is <var>HeidelpayController::paymentFailedAction()</var>, and in case of success - <var>CreditCardController::registrationSuccessAction()</var>. <var>RegistrationSuccessAction()</var>
        will find customer registration (through Zed) and set it to quote. Then customer is redirected
        to summary page**
    </li>
            <li>When customer chooses the existing registration, it is simply set to quote and customer
        goes to summary step as usual.
    </li>
        </ul>
        <p><sub>*&#160;This javascript behavior can be found and customized under
    <var>assets/Yves/js/modules/creditCardFrame.js</var> file.<br /></sub><span><sub>** This overhead with payment-&gt;registrationRequest-&gt;registrationSuccess-&gt;summary is necessary, because <var>registrationRequest</var> is called asynchronously from the outside, where customer session is not available. Later on, <var>registrationSuccess</var> action is called already where customer session is available, so we can add registration to quote there.&#160;</sub></span>
        </p>
        <h4 id="UsageandImplementationdetails-Summaryreviewandordersubmit.4">Summary Review and Order Submitting</h4>
        <p><u><span style="text-decoration: none;"><b>On the review page</b></span></u><span>, it might be necessary to display customer registration details (like anonymised credit card data, etc). For that use <var>Yves/Heidelpay/Theme/default/partial/summary.twig</var> as a reference and include it to your summary page template.</span>
        </p>
        <p><u><span style="text-decoration: none; font-weight: bold;">On "save order" event</span></u> save Heidelpay payment
    per order and items, as usual.</p>
        <p><u><span style="text-decoration: none; font-weight: bold;">When state machine is initialized</span></u>, an event "send
    authorize request" will trigger the authorize request. In case of success, the payment system will
    return a redirect URL for customer, where the payment can be completed. Request and response will be
    fully persisted in the database (<var>spy_payment_heidelpay_transaction_log</var>).&#160;</p>
        <p><u><span style="text-decoration: none; font-weight: bold;">On "post save hook" event</span></u>, we check in
    transaction log table if the authorize request was sent successfully and if so, we set external
    redirect response (URL is obtained from the previous step) and redirect the customer to the payment website,
		where customer confirms the payment using 3D secure validation and so on.<br />Below is the code sample from <var>HeidelpayPostSavePlugin</var>:</p><pre><code class="language-bash line-numbers">/**
 * @method \SprykerEco\Zed\Heidelpay\Business\HeidelpayFacadeInterface getFacade()
 * @method \SprykerEco\Zed\Heidelpay\Business\HeidelpayBusinessFactory getFactory()
 */
class HeidelpayPostSavePlugin extends BaseAbstractPlugin implements CheckoutPostCheckPluginInterface
{
   /**
	* @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
	* @param \Generated\Shared\Transfer\CheckoutResponseTransfer $checkoutResponseTransfer
	*
	* @return void
	*/
   public function execute(QuoteTransfer $quoteTransfer, CheckoutResponseTransfer $checkoutResponseTransfer)
   {
	  $this-&gt;getFacade()-&gt;postSaveHook($quoteTransfer, $checkoutResponseTransfer);
   }
}</code></pre>
        <p><u><span style="text-decoration: none; font-weight: bold;">On payment confirmation</span></u>, response is sent to the Heidelpay
    and Heidelpay makes an asynchronous POST request to the shop's "CONFIG_HEIDELPAY_PAYMENT_RESPONSE_URL"
    URL (Yves), with the result of payment (see <var>HeidelpayController::paymentAction()</var>). This is called
    "external response transaction", the result will be persisted in
    <var>spy_payment_heidelpay_transaction_log</var> as usual.</p>
        The most important data here - is the payment
        reference ID which can be used for further transactions like capture/cancel/etc.&#160;
   
        <p>In the response Heidelpay expects an URL string which defines where customer has to be redirected. In case
    if customer successfully confirmed payment, it should be a link to checkout order success step, in
    case of failure - checkout payment failed action with error code
    (See&#160;See <var>HeidelpayController::paymentFailedAction()</var> and <a href="heidelpay-error-workflow.htm">Heidelpay - Workflow for Errors</a> section).&#160;Heidelpay
    redirects customer to the given URL and payment process is finished.&#160;</p><p><u><span style="text-decoration: none; font-weight: bold;">Capture the money</span></u>&#160;- later on, when the item is shipped to the
    customer, it is time to call "capture" command of the state machine to capture money
    from the customer's account. It is done in CapturePlugin of the OMS command. In the provided basic
    order state machine for <var>CreditCardSecureAuthorize</var> method, command will be executed automatically,
    when order is manually moved into the "shipped" state. Now order can be considered as
    "paid".</p><p>&#160;</p><p><b>See also:</b></p><ul><li><a href="../heidelpay.htm">Get a general idea about Heidelpay</a></li><li><a href="heidelpay-installation.htm">Install Heidelpay</a></li><li><a href="heidelpay-integration.htm">Integrate Heidelpay</a></li><li><a href="heidelpay-error-workflow.htm">Configure error workflow</a></li><li><a href="heidelpay-paypal-debit.htm">Configure Paypal Debit Workflow for Heidelpay</a></li><li><a href="heidelpay-sofort.htm">Configure Sofort payment for Heidelay</a></li><li><a href="heidelpay-ideal.htm">Configure iDeal payment for Heidelpay</a></li><li><a href="heidelpay-error-workflow.htm">Configure error workflow for Heidelpay</a></li></ul><p>&#160;</p><p><i>Last review date: Nov. 16th, 2017</i><MadCap:conditionalText MadCap:conditions="General.Hidden Comment"><i> by Mykyta Borysevych</i></MadCap:conditionalText></p></body>
</html>