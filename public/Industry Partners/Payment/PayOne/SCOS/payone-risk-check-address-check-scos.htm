<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:conditions="Spryker.ShopSuite">
    <head><title>Payone - Risk Check and Address Check</title>
    </head>
    <body>
        <h1> Risk Check and Address Check - Payone</h1>
        <p>On the project level, you should override execute and postCondition methods of <var>SprykerShop\Yves\CheckoutPage\Process\Steps\AddressStep</var>.</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>src/Pyz/Yves/CheckoutPage/Process/Steps/AddressStep.php
                </MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">
&lt;?php
 
namespace Pyz\Yves\CheckoutPage\Process\Steps;
 
use Generated\Shared\Transfer\QuoteTransfer;
use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
use SprykerEco\Client\Payone\PayoneClientInterface;
use SprykerShop\Yves\CheckoutPage\Dependency\Client\CheckoutPageToCalculationClientInterface;
use SprykerShop\Yves\CheckoutPage\Dependency\Client\CheckoutPageToCustomerClientInterface;
use SprykerShop\Yves\CheckoutPage\Process\Steps\AddressStep as SprykerAddressStep;
use Symfony\Component\HttpFoundation\Request;
 
class AddressStep extends SprykerAddressStep
{
	protected const ADDRESS_CHECK_STATUS_VALID = 'VALID';
 
	/**
	 * @var \SprykerEco\Client\Payone\PayoneClientInterface
	 */
	protected $payoneClient;
 
	public function __construct(CheckoutPageToCustomerClientInterface $customerClient, CheckoutPageToCalculationClientInterface $calculationClient, string $stepRoute, string $escapeRoute, PayoneClientInterface $payoneClient)
	{
		parent::__construct($customerClient, $calculationClient, $stepRoute, $escapeRoute);
		$this-&gt;payoneClient = $payoneClient;
	}
 
	public function execute(Request $request, AbstractTransfer $quoteTransfer)
	{
		...
		$responseTransfer = $this-&gt;payoneClient-&gt;sendAddressCheckRequest($quoteTransfer);
		$quoteTransfer-&gt;setIsAddressValid($responseTransfer-&gt;getStatus() === static::ADDRESS_CHECK_STATUS_VALID);
		...
	}
 
	/**
	 * @param \Generated\Shared\Transfer\QuoteTransfer|\Spryker\Shared\Kernel\Transfer\AbstractTransfer $quoteTransfer
	 *
	 * @return bool
	 */
	public function postCondition(AbstractTransfer $quoteTransfer)
	{
		...
 
		if (!$quoteTransfer-&gt;getIsAddressValid()) {
			return false;
		}
 
		...
	}
}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p>Also, <var>src/Pyz/Yves/CheckoutPage/Process/StepFactory.php</var> should be updated on the project level.</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>src/Pyz/Yves/CheckoutPage/Process/StepFactory.php
                </MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">
&lt;?php
  
namespace Pyz\Yves\CheckoutPage\Process;
 
...
use SprykerShop\Yves\HomePage\Plugin\Provider\HomePageControllerProvider;
...
 
class StepFactory extends SprykerStepFactory
{
	/**
	 * @var PayoneClientInterface
	 */
	protected $payoneClient;
     
	public function __construct(PayoneClientInterface $payoneClient)
	{
		$this-&gt;payoneClient = $payoneClient;
	}
 
	...
 
	/**
	 * @return \Pyz\Yves\CheckoutPage\Process\Steps\AddressStep
	 */
	public function createAddressStep()
	{
		return new AddressStep(
			$this-&gt;getCustomerClient(),
			$this-&gt;getCalculationClient(),
			CheckoutPageControllerProvider::CHECKOUT_ADDRESS,
			HomePageControllerProvider::ROUTE_HOME,
			$this-&gt;payoneClient
		);
	}
 
	...
}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h2>Consumer Score Integration</h2>
        <p>On the project level, you should override the execute method of <var>SprykerShop\Yves\CheckoutPage\Process\Steps\AddressStep</var>.</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>src/Pyz/Yves/CheckoutPage/Process/Steps/ShipmentStep.php
                </MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">
&lt;?php
 
namespace Pyz\Yves\CheckoutPage\Process\Steps;
use Generated\Shared\Transfer\QuoteTransfer;
use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
use Spryker\Yves\StepEngine\Dependency\Plugin\Handler\StepHandlerPluginCollection;
use SprykerEco\Client\Payone\PayoneClientInterface;
use SprykerShop\Yves\CheckoutPage\Dependency\Client\CheckoutPageToCalculationClientInterface;
use SprykerShop\Yves\CheckoutPage\Process\Steps\ShipmentStep as SprykerShipmentStep;
use Symfony\Component\HttpFoundation\Request;
 
class ShipmentStep extends SprykerShipmentStep
{
	/**
	 * @var PayoneClientInterface
	 */
	protected $payoneClient;
 
	public function __construct(
		CheckoutPageToCalculationClientInterface $calculationClient,
		StepHandlerPluginCollection $shipmentPlugins,
		string $stepRoute,
		string $escapeRoute,
		PayoneClientInterface $payoneClient
	) {
		parent::__construct($calculationClient, $shipmentPlugins, $stepRoute, $escapeRoute);
		$this-&gt;payoneClient = $payoneClient;
	}
 
	public function execute(Request $request, AbstractTransfer $quoteTransfer)
	{
		$responseTransfer = $this-&gt;payoneClient-&gt;sendConsumerScoreRequest($quoteTransfer);
		$quoteTransfer-&gt;setConsumerScore($responseTransfer-&gt;getScore());
		return parent::execute($request, $quoteTransfer);
	}
}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p><var>src/Pyz/Yves/CheckoutPage/Process/StepFactory.php</var> should be updated:</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>src/Pyz/Yves/CheckoutPage/Process/Steps/ShipmentStep.php
                </MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">
&lt;?php
 
namespace Pyz\Yves\CheckoutPage\Process\Steps;
use Generated\Shared\Transfer\QuoteTransfer;
use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
use Spryker\Yves\StepEngine\Dependency\Plugin\Handler\StepHandlerPluginCollection;
use SprykerEco\Client\Payone\PayoneClientInterface;
use SprykerShop\Yves\CheckoutPage\Dependency\Client\CheckoutPageToCalculationClientInterface;
use SprykerShop\Yves\CheckoutPage\Process\Steps\ShipmentStep as SprykerShipmentStep;
use Symfony\Component\HttpFoundation\Request;
 
class ShipmentStep extends SprykerShipmentStep
{
	/**
	 * @var PayoneClientInterface
	 */
	protected $payoneClient;
 
	public function __construct(
		CheckoutPageToCalculationClientInterface $calculationClient,
		StepHandlerPluginCollection $shipmentPlugins,
		string $stepRoute,
		string $escapeRoute,
		PayoneClientInterface $payoneClient
	) {
		parent::__construct($calculationClient, $shipmentPlugins, $stepRoute, $escapeRoute);
		$this-&gt;payoneClient = $payoneClient;
	}
 
	public function execute(Request $request, AbstractTransfer $quoteTransfer)
	{
		$responseTransfer = $this-&gt;payoneClient-&gt;sendConsumerScoreRequest($quoteTransfer);
		$quoteTransfer-&gt;setConsumerScore($responseTransfer-&gt;getScore());
		return parent::execute($request, $quoteTransfer);
	}
}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p><var>src/Pyz/Yves/CheckoutPage/Process/StepFactory.php</var> should be updated:</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>src/Pyz/Yves/CheckoutPage/Process/StepFactory.php
                </MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">
&lt;?php
  
namespace Pyz\Yves\CheckoutPage\Process;
 
...
use SprykerShop\Yves\HomePage\Plugin\Provider\HomePageControllerProvider;
...
 
class StepFactory extends SprykerStepFactory
{
	/**
	 * @var PayoneClientInterface
	 */
	protected $payoneClient;
     
	public function __construct(PayoneClientInterface $payoneClient)
	{
		$this-&gt;payoneClient = $payoneClient;
	}
 
	...
 
	public function createShipmentStep()
	{
		return new ShipmentStep(
			$this-&gt;getCalculationClient(),
			$this-&gt;getProvidedDependency(CheckoutPageDependencyProvider::PLUGIN_SHIPMENT_HANDLER),
			CheckoutPageControllerProvider::CHECKOUT_SHIPMENT,
			HomePageControllerProvider::ROUTE_HOME,
			$this-&gt;payoneClient
		);
	}
 
	...
}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p><var>src/Pyz/Zed/Payment/PaymentDependencyProvider.php</var> should be updated:</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>src/Pyz/Zed/Payment/PaymentDependencyProvider.php
                </MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">
&lt;?php
 
...
use SprykerEco\Zed\Payone\Communication\Plugin\Payment\PayonePaymentMethodFilterPlugin;
...
 
class PaymentDependencyProvider extends SprykerPaymentDependencyProvider
{
	...
 
	/**
	 * @return \Spryker\Zed\Payment\Dependency\Plugin\Payment\PaymentMethodFilterPluginInterface[]
	 */
	protected function getPaymentMethodFilterPlugins(): array
	{
		return [
			new PayonePaymentMethodFilterPlugin(),
		];
	}
	...
}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p>Now Payone is ready for filtering Payment methods. Configuration for each score result should be defined in the config:</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Example of configuration for score results</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-PHP line-numbers">
&lt;?php
 
	... 
 
	PayoneConstants::PAYONE_GREEN_SCORE_AVAILABLE_PAYMENT_METHODS =&gt; [
		PayoneConfig::PAYMENT_METHOD_INVOICE,
		PayoneConfig::PAYMENT_METHOD_CREDIT_CARD,
	],
	PayoneConstants::PAYONE_YELLOW_SCORE_AVAILABLE_PAYMENT_METHODS =&gt; [
		PayoneConfig::PAYMENT_METHOD_EPS_ONLINE_TRANSFER
	],
	PayoneConstants::PAYONE_RED_SCORE_AVAILABLE_PAYMENT_METHODS =&gt; [
		PayoneConfig::PAYMENT_METHOD_PRE_PAYMENT
	],
	PayoneConstants::PAYONE_UNKNOWN_SCORE_AVAILABLE_PAYMENT_METHODS =&gt; [
		PayoneConfig::PAYMENT_METHOD_CREDIT_CARD,
		PayoneConfig::PAYMENT_METHOD_EPS_ONLINE_TRANSFER,
		PayoneConfig::PAYMENT_METHOD_PRE_PAYMENT,
	],
 
	//Also you should define the check types for bot requests
	PayoneConstants::PAYONE_ADDRESS_CHECK_TYPE =&gt; 'BA',
	PayoneConstants::PAYONE_CONSUMER_SCORE_TYPE =&gt; 'IH',
...</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
    </body>
</html>