<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:conditions="Spryker.ShopSuite,Spryker.DemoShop,Spryker.B2C">
    <head><title>Akeneo - Integration</title>
    </head>
    <body>
        <h1>Akeneo - Integration <img src="../../../Resources/Images/shoptype/B2C_Shop.png" /> <img src="../../../Resources/Images/shoptype/MasterSuite.png" /> <img src="../../../Resources/Images/shoptype/Demoshop.png" /></h1>
        <p>Add Middleware Process console command to <code>ConsoleDependencyProvider</code> in your project:</p><pre><code class="language-php line-numbers">
	…
	use SprykerMiddleware\Zed\Process\Communication\Console\ProcessConsole;
	…
	protected function getConsoleCommands(Container $container)
	{
		$commands = [
			… 
			new ProcessConsole(),
		];
		…
		return $commands;
	}
				</code></pre>
        <p>Add Process Module on project level and specify configuration profiles:</p><pre><code class="language-php line-numbers">
	class ProcessDependencyProvider extends SprykerMiddlewareProcessDependencyProvider
	{
		…
		protected function getConfigurationProfilePluginsStack(): array
		{
			$profileStack = parent::getConfigurationProfilePluginsStack();
			$profileStack[] = new AkeneoPimConfigurationProfilePlugin();
			$profileStack[] = new DefaultConfigurationProfilePlugin();
 
			return $profileStack;
		}
	}
				</code></pre>
        <p>Lastly, you should implement data import plugins for writing data (categories, attributes, abstract and concrete products) into the shop. You need to add <code>AkeneoPimMiddlewareConnector</code> module on project level and provide corresponding data import plugins in the following methods of <code>AkeneoPimMiddlewareConnectorDependencyProvider</code>:</p><pre><code class="language-php line-numbers">
	class AkeneoPimMiddlewareConnectorDependencyProvider extends SprykerEcoAkeneoPimMiddlewareConnectorDependencyProvider
	{
		...
		/**
		* @param \Spryker\Zed\Kernel\Container $container
		*
		* @return \Spryker\Zed\Kernel\Container
		*/
		protected function addCategoryDataImporterPlugin(Container $container): Container
		{
			$container[static::AKENEO_PIM_MIDDLEWARE_CATEGORY_IMPORTER_PLUGIN] = function () {
				return new CategoryDataImporterPlugin();
			};
 
			return $container;
	}
 
	/**
	* @param \Spryker\Zed\Kernel\Container $container
	*
	* @return \Spryker\Zed\Kernel\Container
	*/
	protected function addAttributeDataImporterPlugin(Container $container): Container
	{
		$container[static::AKENEO_PIM_MIDDLEWARE_ATTRIBUTE_IMPORTER_PLUGIN] = function () {
			return new AttributeDataImporterPlugin();
		};
 
		return $container;
	}
 
	/**
	* @param \Spryker\Zed\Kernel\Container $container
	*
	* @return \Spryker\Zed\Kernel\Container
	*/
	protected function addProductAbstractDataImporterPlugin(Container $container): Container
	{
		$container[static::AKENEO_PIM_MIDDLEWARE_PRODUCT_ABSTRACT_IMPORTER_PLUGIN] = function () {
			return new ProductAbstractDataImporterPlugin();
		};
 
		return $container;
	}
 
	/**
	* @param \Spryker\Zed\Kernel\Container $container
	*
	* @return \Spryker\Zed\Kernel\Container
	*/
	protected function addProductConcreteDataImporterPlugin(Container $container): Container
	{
		$container[static::AKENEO_PIM_MIDDLEWARE_PRODUCT_CONCRETE_IMPORTER_PLUGIN] = function () {
			return new ProductConcreteDataImporterPlugin();
		};
 
		return $container;
		}
	}
				</code></pre>
        <h1>Commands</h1>
        <p>Now the following console commands are available in your project:</p><pre><code class="language-php line-numbers">
	1) Command to prepare locale mapping:
	vendor/bin/console middleware:process:run -p LOCALE_MAP_IMPORT_PROCESS -o data/import/maps/locale_map.json
 
	2) Command to prepare products attributes mapping:
	vendor/bin/console middleware:process:run -p ATTRIBUTE_MAP_PROCESS -o data/import/maps/attribute_map.json
 
	3) Command to import categories:
	vendor/bin/console middleware:process:run -p DEFAULT_CATEGORY_IMPORT_PROCESS
 
	4) Command to import super attributes:
	vendor/bin/console middleware:process:run -p SUPER_ATTRIBUTE_IMPORT_PROCESS -o data/import/maps/super_attribute_map.json
 
	5) Command to import products attributes:
	vendor/bin/console middleware:process:run -p ATTRIBUTE_IMPORT_PROCESS
 
	6) Command to prepare product models data in local file:
	vendor/bin/console middleware:process:run -p PRODUCT_MODEL_PREPARATION_PROCESS -o data/import/maps/product_models.json
 
	7) Command to import product model data (abstract products):
	vendor/bin/console middleware:process:run -p DEFAULT_PRODUCT_MODEL_IMPORT_PROCESS -i data/import/maps/product_models.json
 
	8) Command to prepare products data in local file:
	vendor/bin/console middleware:process:run -p PRODUCT_PREPARATION_PROCESS -o data/import/maps/products.json
 
	9) Command to import product model data (abstract products):
	vendor/bin/console middleware:process:run -p DEFAULT_PRODUCT_IMPORT_PROCESS -i data/import/maps/products.json
				</code></pre>
        <p style="font-weight: bold;">&#160;</p>
        <p style="font-weight: bold;">See also:</p>
        <ul>
            <li><a href="akeneo.htm">Learn about Akeneo</a><![CDATA[
            ]]></li>
            <li><a href="akeneo-configuration.htm">Configure Akeneo module</a><![CDATA[
            ]]></li>
            <li><a href="akeneo-milti-select-attributes.htm">Learn about multi-select attributes
            
</a>
            </li>
        </ul>
        <p>&#160;</p>
        <p><i>Last review date: Jul. 24th, 2018 </i>
            <MadCap:conditionalText MadCap:conditions="General.Hidden Comment"><i>by Volodymyr Hrychenko</i>
            </MadCap:conditionalText>
        </p>
    </body>
</html>